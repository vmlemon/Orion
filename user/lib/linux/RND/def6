===> nedmalloc.c
gcc-6 -I../../include -I../.. -I/usr/lib/gcc/x86_64-linux-gnu/6/include   -nostdinc -g -O2 -m64 -mno-red-zone   -fno-stack-protector -lssp -O2 -g -Wall -Wshadow   -fno-stack-protector  -Wconversion -std=c99 -c nedmalloc.c -o nedmalloc.o
In file included from nedmalloc.c:53:0:
../../include/stdio.h:50:9: error: unknown type name ‘__size_t’
 typedef __size_t size_t;
         ^~~~~~~~
../../include/stdio.h:66:9: error: unknown type name ‘__ssize_t’
 typedef __ssize_t ssize_t;
         ^~~~~~~~~
../../include/stdio.h:269:9: warning: conflicting types for built-in function ‘fwrite’
 size_t  fwrite(const void * __restrict, size_t, size_t, FILE * __restrict);
         ^~~~~~
../../include/stdio.h:298:6: warning: conflicting types for built-in function ‘snprintf’
 int  snprintf(char * __restrict, size_t, const char * __restrict,
      ^~~~~~~~
../../include/stdio.h:300:6: warning: conflicting types for built-in function ‘vsnprintf’
 int  vsnprintf(char * __restrict, size_t, const char * __restrict,
      ^~~~~~~~~
../../include/stdio.h:413:9: error: unknown type name ‘__ssize_t’
 typedef __ssize_t cookie_read_function_t(void *, char *, size_t);
         ^~~~~~~~~
../../include/stdio.h:414:9: error: unknown type name ‘__ssize_t’
 typedef __ssize_t cookie_write_function_t(void *, const char *, size_t);
         ^~~~~~~~~
../../include/stdio.h: In function ‘__sputc’:
../../include/stdio.h:460:23: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
   return (*_p->_p++ = _c);
                       ^~
nedmalloc.c: At top level:
nedmalloc.c:117:4: warning: #warning DEBUG may not be defined but without NDEBUG being defined allocator will run with assert checking! Define NDEBUG to run at full speed. [-Wcpp]
   #warning DEBUG may not be defined but without NDEBUG being defined allocator will run with assert checking! Define NDEBUG to run at full speed.
    ^~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2055:3: error: unknown type name ‘pthread_t’
   pthread_t threadid;
   ^~~~~~~~~
malloc.c.h: In function ‘pthread_acquire_lock’:
malloc.c.h:2069:3: error: unknown type name ‘pthread_t’
   pthread_t mythreadid = CURRENT_THREAD;
   ^~~~~~~~~
malloc.c.h:2058:31: warning: implicit declaration of function ‘pthread_self’ [-Wimplicit-function-declaration]
 #define CURRENT_THREAD        pthread_self()
                               ^
malloc.c.h:2069:26: note: in expansion of macro ‘CURRENT_THREAD’
   pthread_t mythreadid = CURRENT_THREAD;
                          ^~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: implicit declaration of function ‘abort’ [-Wimplicit-function-declaration]
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:2086:9: note: in expansion of macro ‘assert’
         assert(!sl->threadid);
         ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:2086:9: note: in expansion of macro ‘assert’
         assert(!sl->threadid);
         ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:2086:9: note: in expansion of macro ‘assert’
         assert(!sl->threadid);
         ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2097:7: warning: implicit declaration of function ‘sched_yield’ [-Wimplicit-function-declaration]
       sched_yield();
       ^~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘pthread_release_lock’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:2108:3: note: in expansion of macro ‘assert’
   assert(*lp != 0);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:2108:3: note: in expansion of macro ‘assert’
   assert(*lp != 0);
   ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:2109:3: note: in expansion of macro ‘assert’
   assert(sl->threadid == CURRENT_THREAD);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:2109:3: note: in expansion of macro ‘assert’
   assert(sl->threadid == CURRENT_THREAD);
   ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘pthread_try_lock’:
malloc.c.h:2117:3: error: unknown type name ‘pthread_t’
   pthread_t mythreadid = CURRENT_THREAD;
   ^~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:2131:7: note: in expansion of macro ‘assert’
       assert(!sl->threadid);
       ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:2131:7: note: in expansion of macro ‘assert’
       assert(!sl->threadid);
       ^~~~~~
malloc.c.h: In function ‘init_mparams’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3403:7: note: in expansion of macro ‘ABORT’
       ABORT;
       ^~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3403:7: note: in expansion of macro ‘ABORT’
       ABORT;
       ^~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:3436:26: warning: implicit declaration of function ‘time’ [-Wimplicit-function-declaration]
         magic = (size_t)(time(0) ^ (size_t)0x55555555U);
                          ^~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘internal_mallinfo’:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:3750:35: note: in expansion of macro ‘TOP_FOOT_SIZE’
       size_t mfree = m->topsize + TOP_FOOT_SIZE;
                                   ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:3750:35: note: in expansion of macro ‘TOP_FOOT_SIZE’
       size_t mfree = m->topsize + TOP_FOOT_SIZE;
                                   ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:3750:35: note: in expansion of macro ‘TOP_FOOT_SIZE’
       size_t mfree = m->topsize + TOP_FOOT_SIZE;
                                   ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:3750:35: note: in expansion of macro ‘TOP_FOOT_SIZE’
       size_t mfree = m->topsize + TOP_FOOT_SIZE;
                                   ^~~~~~~~~~~~~
malloc.c.h:3750:33: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       size_t mfree = m->topsize + TOP_FOOT_SIZE;
                                 ^
malloc.c.h:3750:22: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
       size_t mfree = m->topsize + TOP_FOOT_SIZE;
                      ^
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:3754:23: note: in expansion of macro ‘align_as_chunk’
         mchunkptr q = align_as_chunk(s->base);
                       ^~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:3754:23: note: in expansion of macro ‘align_as_chunk’
         mchunkptr q = align_as_chunk(s->base);
                       ^~~~~~~~~~~~~~
malloc.c.h: In function ‘internal_malloc_stats’:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:3794:33: note: in expansion of macro ‘TOP_FOOT_SIZE’
       used = fp - (m->topsize + TOP_FOOT_SIZE);
                                 ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:3794:33: note: in expansion of macro ‘TOP_FOOT_SIZE’
       used = fp - (m->topsize + TOP_FOOT_SIZE);
                                 ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:3794:33: note: in expansion of macro ‘TOP_FOOT_SIZE’
       used = fp - (m->topsize + TOP_FOOT_SIZE);
                                 ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:3794:33: note: in expansion of macro ‘TOP_FOOT_SIZE’
       used = fp - (m->topsize + TOP_FOOT_SIZE);
                                 ^~~~~~~~~~~~~
malloc.c.h:3794:31: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       used = fp - (m->topsize + TOP_FOOT_SIZE);
                               ^
malloc.c.h:3794:17: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       used = fp - (m->topsize + TOP_FOOT_SIZE);
                 ^
malloc.c.h:3794:14: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
       used = fp - (m->topsize + TOP_FOOT_SIZE);
              ^~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:3797:23: note: in expansion of macro ‘align_as_chunk’
         mchunkptr q = align_as_chunk(s->base);
                       ^~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:3797:23: note: in expansion of macro ‘align_as_chunk’
         mchunkptr q = align_as_chunk(s->base);
                       ^~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘mmap_alloc’:
malloc.c.h:4084:38: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   size_t mmsize = mmap_align_size(nb + SEVEN_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
                                      ^
malloc.c.h:2918:31: note: in definition of macro ‘mmap_align_size’
 #define mmap_align_size(S) (((S) + (mmapped_granularity - SIZE_T_ONE)) & ~(mmapped_granularity - SIZE_T_ONE))
                               ^
malloc.c.h:2918:34: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define mmap_align_size(S) (((S) + (mmapped_granularity - SIZE_T_ONE)) & ~(mmapped_granularity - SIZE_T_ONE))
                                  ^
malloc.c.h:4084:19: note: in expansion of macro ‘mmap_align_size’
   size_t mmsize = mmap_align_size(nb + SEVEN_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
                   ^~~~~~~~~~~~~~~
malloc.c.h:2918:72: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define mmap_align_size(S) (((S) + (mmapped_granularity - SIZE_T_ONE)) & ~(mmapped_granularity - SIZE_T_ONE))
                                                                        ^
malloc.c.h:4084:19: note: in expansion of macro ‘mmap_align_size’
   size_t mmsize = mmap_align_size(nb + SEVEN_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
                   ^~~~~~~~~~~~~~~
malloc.c.h:2918:28: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define mmap_align_size(S) (((S) + (mmapped_granularity - SIZE_T_ONE)) & ~(mmapped_granularity - SIZE_T_ONE))
                            ^
malloc.c.h:4084:19: note: in expansion of macro ‘mmap_align_size’
   size_t mmsize = mmap_align_size(nb + SEVEN_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
                   ^~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:4089:42: note: in expansion of macro ‘align_offset’
       size_t offset = MALLOC_ALIGNMENT + align_offset(chunk2mem(mm));
                                          ^~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:4089:42: note: in expansion of macro ‘align_offset’
       size_t offset = MALLOC_ALIGNMENT + align_offset(chunk2mem(mm));
                                          ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4090:38: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       size_t psize = mmsize - offset - MMAP_FOOT_PAD;
                                      ^
malloc.c.h:4090:22: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
       size_t psize = mmsize - offset - MMAP_FOOT_PAD;
                      ^~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:4095:7: note: in expansion of macro ‘mark_inuse_foot’
       mark_inuse_foot(m, p, psize);
       ^~~~~~~~~~~~~~~
malloc.c.h:4097:33: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
                                 ^
malloc.c.h:2540:63: note: in definition of macro ‘chunk_plus_offset’
 #define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))
                                                               ^
In file included from nedmalloc.c:168:0:
malloc.c.h:1576:31: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
 #define is_aligned(A)       (((size_t)((A)) & (CHUNK_ALIGN_MASK)) == 0)
                               ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
malloc.c.h:4103:14: note: in expansion of macro ‘is_aligned’
       assert(is_aligned(chunk2mem(p)));
              ^~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4103:7: note: in expansion of macro ‘assert’
       assert(is_aligned(chunk2mem(p)));
       ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4103:7: note: in expansion of macro ‘assert’
       assert(is_aligned(chunk2mem(p)));
       ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘mmap_resize’:
malloc.c.h:4117:21: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   if (oldsize >= nb + SIZE_T_SIZE &&
                     ^
malloc.c.h:4122:41: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     size_t oldmmsize = oldsize + offset + MMAP_FOOT_PAD;
                                         ^
malloc.c.h:4122:24: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
     size_t oldmmsize = oldsize + offset + MMAP_FOOT_PAD;
                        ^~~~~~~
malloc.c.h:4123:43: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     size_t newmmsize = mmap_align_size(nb + SEVEN_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
                                           ^
malloc.c.h:2918:31: note: in definition of macro ‘mmap_align_size’
 #define mmap_align_size(S) (((S) + (mmapped_granularity - SIZE_T_ONE)) & ~(mmapped_granularity - SIZE_T_ONE))
                               ^
malloc.c.h:2918:34: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define mmap_align_size(S) (((S) + (mmapped_granularity - SIZE_T_ONE)) & ~(mmapped_granularity - SIZE_T_ONE))
                                  ^
malloc.c.h:4123:24: note: in expansion of macro ‘mmap_align_size’
     size_t newmmsize = mmap_align_size(nb + SEVEN_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
                        ^~~~~~~~~~~~~~~
malloc.c.h:2918:72: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define mmap_align_size(S) (((S) + (mmapped_granularity - SIZE_T_ONE)) & ~(mmapped_granularity - SIZE_T_ONE))
                                                                        ^
malloc.c.h:4123:24: note: in expansion of macro ‘mmap_align_size’
     size_t newmmsize = mmap_align_size(nb + SEVEN_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
                        ^~~~~~~~~~~~~~~
malloc.c.h:2918:28: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define mmap_align_size(S) (((S) + (mmapped_granularity - SIZE_T_ONE)) & ~(mmapped_granularity - SIZE_T_ONE))
                            ^
malloc.c.h:4123:24: note: in expansion of macro ‘mmap_align_size’
     size_t newmmsize = mmap_align_size(nb + SEVEN_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
                        ^~~~~~~~~~~~~~~
malloc.c.h:4129:41: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       size_t psize = newmmsize - offset - MMAP_FOOT_PAD;
                                         ^
malloc.c.h:4129:22: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
       size_t psize = newmmsize - offset - MMAP_FOOT_PAD;
                      ^~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:4132:7: note: in expansion of macro ‘mark_inuse_foot’
       mark_inuse_foot(m, newp, psize);
       ^~~~~~~~~~~~~~~
malloc.c.h:4134:36: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       chunk_plus_offset(newp, psize+SIZE_T_SIZE)->head = 0;
                                    ^
malloc.c.h:2540:63: note: in definition of macro ‘chunk_plus_offset’
 #define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))
                                                               ^
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘init_top’:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:4152:19: note: in expansion of macro ‘align_offset’
   size_t offset = align_offset(chunk2mem(p));
                   ^~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:4152:19: note: in expansion of macro ‘align_offset’
   size_t offset = align_offset(chunk2mem(p));
                   ^~~~~~~~~~~~
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4160:39: note: in expansion of macro ‘TOP_FOOT_SIZE’
   chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
                                       ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4160:39: note: in expansion of macro ‘TOP_FOOT_SIZE’
   chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
                                       ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:4160:39: note: in expansion of macro ‘TOP_FOOT_SIZE’
   chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
                                       ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:4160:39: note: in expansion of macro ‘TOP_FOOT_SIZE’
   chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
                                       ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘prepend_alloc’:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:4196:17: note: in expansion of macro ‘align_as_chunk’
   mchunkptr p = align_as_chunk(newbase);
                 ^~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:4196:17: note: in expansion of macro ‘align_as_chunk’
   mchunkptr p = align_as_chunk(newbase);
                 ^~~~~~~~~~~~~~
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:4197:24: note: in expansion of macro ‘align_as_chunk’
   mchunkptr oldfirst = align_as_chunk(oldbase);
                        ^~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:4197:24: note: in expansion of macro ‘align_as_chunk’
   mchunkptr oldfirst = align_as_chunk(oldbase);
                        ^~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4198:18: warning: conversion to ‘size_t {aka int}’ from ‘long int’ may alter its value [-Wconversion]
   size_t psize = (char*)oldfirst - (char*)p;
                  ^
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4201:3: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
   set_size_and_pinuse_of_inuse_chunk(m, p, nb);
   ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4203:3: note: in expansion of macro ‘assert’
   assert((char*)oldfirst > (char*)q);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4203:3: note: in expansion of macro ‘assert’
   assert((char*)oldfirst > (char*)q);
   ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4204:3: note: in expansion of macro ‘assert’
   assert(pinuse(oldfirst));
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4204:3: note: in expansion of macro ‘assert’
   assert(pinuse(oldfirst));
   ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
malloc.c.h:4205:19: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   assert(qsize >= MIN_CHUNK_SIZE);
                   ^~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4205:3: note: in expansion of macro ‘assert’
   assert(qsize >= MIN_CHUNK_SIZE);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4205:3: note: in expansion of macro ‘assert’
   assert(qsize >= MIN_CHUNK_SIZE);
   ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3849:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3849:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3850:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3850:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3851:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3851:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3860:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3860:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4222:7: note: in expansion of macro ‘unlink_chunk’
       unlink_chunk(m, oldfirst, nsize);
       ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
malloc.c.h:3830:15: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   assert(S >= MIN_CHUNK_SIZE);\
               ^~~~~~~~~~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4227:24: warning: conversion to ‘unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     insert_chunk(m, q, qsize);
                        ^
malloc.c.h:3072:20: note: in definition of macro ‘compute_tree_index’
   unsigned int X = S >> TREEBIN_SHIFT;\
                    ^
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4227:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, qsize);
     ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘add_segment’:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:4241:18: note: in expansion of macro ‘pad_request’
   size_t ssize = pad_request(sizeof(struct malloc_segment));
                  ^~~~~~~~~~~
malloc.c.h:4242:34: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   char* rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
                                  ^
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:4243:19: note: in expansion of macro ‘align_offset’
   size_t offset = align_offset(chunk2mem(rawsp));
                   ^~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:4243:19: note: in expansion of macro ‘align_offset’
   size_t offset = align_offset(chunk2mem(rawsp));
                   ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:4245:33: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
                                 ^~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4253:41: note: in expansion of macro ‘TOP_FOOT_SIZE’
   init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
                                         ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4253:41: note: in expansion of macro ‘TOP_FOOT_SIZE’
   init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
                                         ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:4253:41: note: in expansion of macro ‘TOP_FOOT_SIZE’
   init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
                                         ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:4253:41: note: in expansion of macro ‘TOP_FOOT_SIZE’
   init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
                                         ^~~~~~~~~~~~~
malloc.c.h:4253:39: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
                                       ^
malloc.c.h:4253:33: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
                                 ^~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1576:31: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
 #define is_aligned(A)       (((size_t)((A)) & (CHUNK_ALIGN_MASK)) == 0)
                               ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
malloc.c.h:4256:10: note: in expansion of macro ‘is_aligned’
   assert(is_aligned(ss));
          ^~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4256:3: note: in expansion of macro ‘assert’
   assert(is_aligned(ss));
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4256:3: note: in expansion of macro ‘assert’
   assert(is_aligned(ss));
   ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4257:3: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
   set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
   ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4274:3: note: in expansion of macro ‘assert’
   assert(nfences >= 2);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4274:3: note: in expansion of macro ‘assert’
   assert(nfences >= 2);
   ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4279:20: warning: conversion to ‘size_t {aka int}’ from ‘long int’ may alter its value [-Wconversion]
     size_t psize = csp - old_top;
                    ^~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
malloc.c.h:3830:15: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   assert(S >= MIN_CHUNK_SIZE);\
               ^~~~~~~~~~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4282:24: warning: conversion to ‘unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     insert_chunk(m, q, psize);
                        ^
malloc.c.h:3072:20: note: in definition of macro ‘compute_tree_index’
   unsigned int X = S >> TREEBIN_SHIFT;\
                    ^
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4282:5: note: in expansion of macro ‘insert_chunk’
     insert_chunk(m, q, psize);
     ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘sys_alloc’:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4336:40: note: in expansion of macro ‘SYS_ALLOC_PADDING’
         asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                        ^~~~~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4336:40: note: in expansion of macro ‘SYS_ALLOC_PADDING’
         asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                        ^~~~~~~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4336:40: note: in expansion of macro ‘SYS_ALLOC_PADDING’
         asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                        ^~~~~~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4336:40: note: in expansion of macro ‘SYS_ALLOC_PADDING’
         asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                        ^~~~~~~~~~~~~~~~~
malloc.c.h:4336:38: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
         asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                      ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2912:9: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
         ^
malloc.c.h:4336:17: note: in expansion of macro ‘granularity_align’
         asize = granularity_align(nb + SYS_ALLOC_PADDING);
                 ^~~~~~~~~~~~~~~~~
malloc.c.h:2913:4: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    & ~(mparams.granularity - SIZE_T_ONE))
    ^
malloc.c.h:4336:17: note: in expansion of macro ‘granularity_align’
         asize = granularity_align(nb + SYS_ALLOC_PADDING);
                 ^~~~~~~~~~~~~~~~~
malloc.c.h:2912:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
   ^
malloc.c.h:4336:17: note: in expansion of macro ‘granularity_align’
         asize = granularity_align(nb + SYS_ALLOC_PADDING);
                 ^~~~~~~~~~~~~~~~~
malloc.c.h:2924:6: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
    (((size_t)(S) & (mparams.page_size - SIZE_T_ONE)) == 0)
      ^
malloc.c.h:4338:14: note: in expansion of macro ‘is_page_aligned’
         if (!is_page_aligned(base))
              ^~~~~~~~~~~~~~~
malloc.c.h:4339:32: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
           asize += (page_align((size_t)base) - (size_t)base);
                                ^
malloc.c.h:2908:5: note: in definition of macro ‘page_align’
  (((S) + (mparams.page_size - SIZE_T_ONE)) & ~(mparams.page_size - SIZE_T_ONE))
     ^
malloc.c.h:4339:48: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
           asize += (page_align((size_t)base) - (size_t)base);
                                                ^
In file included from nedmalloc.c:168:0:
malloc.c.h:1570:41: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define HALF_MAX_SIZE_T     (MAX_SIZE_T / 2U)
                                         ^
malloc.c.h:4341:21: note: in expansion of macro ‘HALF_MAX_SIZE_T’
         if (asize < HALF_MAX_SIZE_T &&
                     ^~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4350:51: note: in expansion of macro ‘SYS_ALLOC_PADDING’
       asize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
                                                   ^~~~~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4350:51: note: in expansion of macro ‘SYS_ALLOC_PADDING’
       asize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
                                                   ^~~~~~~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4350:51: note: in expansion of macro ‘SYS_ALLOC_PADDING’
       asize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
                                                   ^~~~~~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4350:51: note: in expansion of macro ‘SYS_ALLOC_PADDING’
       asize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
                                                   ^~~~~~~~~~~~~~~~~
malloc.c.h:4350:49: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       asize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
                                                 ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2912:9: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
         ^
malloc.c.h:4350:15: note: in expansion of macro ‘granularity_align’
       asize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
               ^~~~~~~~~~~~~~~~~
malloc.c.h:2913:4: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    & ~(mparams.granularity - SIZE_T_ONE))
    ^
malloc.c.h:4350:15: note: in expansion of macro ‘granularity_align’
       asize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
               ^~~~~~~~~~~~~~~~~
malloc.c.h:2912:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
   ^
malloc.c.h:4350:15: note: in expansion of macro ‘granularity_align’
       asize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
               ^~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1570:41: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define HALF_MAX_SIZE_T     (MAX_SIZE_T / 2U)
                                         ^
malloc.c.h:4352:19: note: in expansion of macro ‘HALF_MAX_SIZE_T’
       if (asize < HALF_MAX_SIZE_T &&
                   ^~~~~~~~~~~~~~~
malloc.c.h:1570:41: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define HALF_MAX_SIZE_T     (MAX_SIZE_T / 2U)
                                         ^
malloc.c.h:4361:21: note: in expansion of macro ‘HALF_MAX_SIZE_T’
         if (asize < HALF_MAX_SIZE_T &&
                     ^~~~~~~~~~~~~~~
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4362:26: note: in expansion of macro ‘SYS_ALLOC_PADDING’
             asize < nb + SYS_ALLOC_PADDING) {
                          ^~~~~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4362:26: note: in expansion of macro ‘SYS_ALLOC_PADDING’
             asize < nb + SYS_ALLOC_PADDING) {
                          ^~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4362:26: note: in expansion of macro ‘SYS_ALLOC_PADDING’
             asize < nb + SYS_ALLOC_PADDING) {
                          ^~~~~~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4362:26: note: in expansion of macro ‘SYS_ALLOC_PADDING’
             asize < nb + SYS_ALLOC_PADDING) {
                          ^~~~~~~~~~~~~~~~~
malloc.c.h:4362:24: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
             asize < nb + SYS_ALLOC_PADDING) {
                        ^
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4363:49: note: in expansion of macro ‘SYS_ALLOC_PADDING’
           size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - asize);
                                                 ^~~~~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4363:49: note: in expansion of macro ‘SYS_ALLOC_PADDING’
           size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - asize);
                                                 ^~~~~~~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4363:49: note: in expansion of macro ‘SYS_ALLOC_PADDING’
           size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - asize);
                                                 ^~~~~~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4363:49: note: in expansion of macro ‘SYS_ALLOC_PADDING’
           size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - asize);
                                                 ^~~~~~~~~~~~~~~~~
malloc.c.h:4363:47: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
           size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - asize);
                                               ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:4363:67: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
           size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - asize);
                                                                   ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2912:9: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
         ^
malloc.c.h:4363:26: note: in expansion of macro ‘granularity_align’
           size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - asize);
                          ^~~~~~~~~~~~~~~~~
malloc.c.h:2913:4: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    & ~(mparams.granularity - SIZE_T_ONE))
    ^
malloc.c.h:4363:26: note: in expansion of macro ‘granularity_align’
           size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - asize);
                          ^~~~~~~~~~~~~~~~~
malloc.c.h:2912:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
   ^
malloc.c.h:4363:26: note: in expansion of macro ‘granularity_align’
           size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - asize);
                          ^~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1570:41: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define HALF_MAX_SIZE_T     (MAX_SIZE_T / 2U)
                                         ^
malloc.c.h:4364:23: note: in expansion of macro ‘HALF_MAX_SIZE_T’
           if (esize < HALF_MAX_SIZE_T) {
                       ^~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4387:43: note: in expansion of macro ‘SYS_ALLOC_PADDING’
     size_t rsize = granularity_align(nb + SYS_ALLOC_PADDING);
                                           ^~~~~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4387:43: note: in expansion of macro ‘SYS_ALLOC_PADDING’
     size_t rsize = granularity_align(nb + SYS_ALLOC_PADDING);
                                           ^~~~~~~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4387:43: note: in expansion of macro ‘SYS_ALLOC_PADDING’
     size_t rsize = granularity_align(nb + SYS_ALLOC_PADDING);
                                           ^~~~~~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4387:43: note: in expansion of macro ‘SYS_ALLOC_PADDING’
     size_t rsize = granularity_align(nb + SYS_ALLOC_PADDING);
                                           ^~~~~~~~~~~~~~~~~
malloc.c.h:4387:41: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     size_t rsize = granularity_align(nb + SYS_ALLOC_PADDING);
                                         ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2912:9: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
         ^
malloc.c.h:4387:20: note: in expansion of macro ‘granularity_align’
     size_t rsize = granularity_align(nb + SYS_ALLOC_PADDING);
                    ^~~~~~~~~~~~~~~~~
malloc.c.h:2913:4: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    & ~(mparams.granularity - SIZE_T_ONE))
    ^
malloc.c.h:4387:20: note: in expansion of macro ‘granularity_align’
     size_t rsize = granularity_align(nb + SYS_ALLOC_PADDING);
                    ^~~~~~~~~~~~~~~~~
malloc.c.h:2912:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
   ^
malloc.c.h:4387:20: note: in expansion of macro ‘granularity_align’
     size_t rsize = granularity_align(nb + SYS_ALLOC_PADDING);
                    ^~~~~~~~~~~~~~~~~
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4399:43: note: in expansion of macro ‘SYS_ALLOC_PADDING’
     size_t asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                           ^~~~~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4399:43: note: in expansion of macro ‘SYS_ALLOC_PADDING’
     size_t asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                           ^~~~~~~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4399:43: note: in expansion of macro ‘SYS_ALLOC_PADDING’
     size_t asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                           ^~~~~~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:2921:28: note: in expansion of macro ‘TOP_FOOT_SIZE’
 #define SYS_ALLOC_PADDING (TOP_FOOT_SIZE + MALLOC_ALIGNMENT)
                            ^~~~~~~~~~~~~
malloc.c.h:4399:43: note: in expansion of macro ‘SYS_ALLOC_PADDING’
     size_t asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                           ^~~~~~~~~~~~~~~~~
malloc.c.h:4399:41: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     size_t asize = granularity_align(nb + SYS_ALLOC_PADDING);
                                         ^
malloc.c.h:2912:6: note: in definition of macro ‘granularity_align’
   (((S) + (mparams.granularity - SIZE_T_ONE))\
      ^
malloc.c.h:2912:9: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
         ^
malloc.c.h:4399:20: note: in expansion of macro ‘granularity_align’
     size_t asize = granularity_align(nb + SYS_ALLOC_PADDING);
                    ^~~~~~~~~~~~~~~~~
malloc.c.h:2913:4: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    & ~(mparams.granularity - SIZE_T_ONE))
    ^
malloc.c.h:4399:20: note: in expansion of macro ‘granularity_align’
     size_t asize = granularity_align(nb + SYS_ALLOC_PADDING);
                    ^~~~~~~~~~~~~~~~~
malloc.c.h:2912:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((S) + (mparams.granularity - SIZE_T_ONE))\
   ^
malloc.c.h:4399:20: note: in expansion of macro ‘granularity_align’
     size_t asize = granularity_align(nb + SYS_ALLOC_PADDING);
                    ^~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1570:41: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define HALF_MAX_SIZE_T     (MAX_SIZE_T / 2U)
                                         ^
malloc.c.h:4400:17: note: in expansion of macro ‘HALF_MAX_SIZE_T’
     if (asize < HALF_MAX_SIZE_T) {
                 ^~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4408:24: warning: conversion to ‘size_t {aka int}’ from ‘long int’ may alter its value [-Wconversion]
         size_t ssize = end - br;
                        ^~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4409:26: note: in expansion of macro ‘TOP_FOOT_SIZE’
         if (ssize > nb + TOP_FOOT_SIZE) {
                          ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4409:26: note: in expansion of macro ‘TOP_FOOT_SIZE’
         if (ssize > nb + TOP_FOOT_SIZE) {
                          ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:4409:26: note: in expansion of macro ‘TOP_FOOT_SIZE’
         if (ssize > nb + TOP_FOOT_SIZE) {
                          ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:4409:26: note: in expansion of macro ‘TOP_FOOT_SIZE’
         if (ssize > nb + TOP_FOOT_SIZE) {
                          ^~~~~~~~~~~~~
malloc.c.h:4409:24: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
         if (ssize > nb + TOP_FOOT_SIZE) {
                        ^
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4439:64: note: in expansion of macro ‘TOP_FOOT_SIZE’
         init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
                                                                ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4439:64: note: in expansion of macro ‘TOP_FOOT_SIZE’
         init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
                                                                ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:4439:64: note: in expansion of macro ‘TOP_FOOT_SIZE’
         init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
                                                                ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:4439:64: note: in expansion of macro ‘TOP_FOOT_SIZE’
         init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
                                                                ^~~~~~~~~~~~~
malloc.c.h:4439:63: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
                                                               ^
malloc.c.h:4439:25: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
         init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
                         ^
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4480:7: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
       set_size_and_pinuse_of_inuse_chunk(m, p, nb);
       ^
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘release_unused_segments’:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:4505:21: note: in expansion of macro ‘align_as_chunk’
       mchunkptr p = align_as_chunk(base);
                     ^~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:4505:21: note: in expansion of macro ‘align_as_chunk’
       mchunkptr p = align_as_chunk(base);
                     ^~~~~~~~~~~~~~
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4508:61: note: in expansion of macro ‘TOP_FOOT_SIZE’
       if (!is_inuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
                                                             ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4508:61: note: in expansion of macro ‘TOP_FOOT_SIZE’
       if (!is_inuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
                                                             ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:4508:61: note: in expansion of macro ‘TOP_FOOT_SIZE’
       if (!is_inuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
                                                             ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:4508:61: note: in expansion of macro ‘TOP_FOOT_SIZE’
       if (!is_inuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
                                                             ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4510:9: note: in expansion of macro ‘assert’
         assert(segment_holds(sp, (char*)sp));
         ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4510:9: note: in expansion of macro ‘assert’
         assert(segment_holds(sp, (char*)sp));
         ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4516:11: note: in expansion of macro ‘unlink_large_chunk’
           unlink_large_chunk(m, tp);
           ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4526:37: warning: conversion to ‘unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
           insert_large_chunk(m, tp, psize);
                                     ^
malloc.c.h:3072:20: note: in definition of macro ‘compute_tree_index’
   unsigned int X = S >> TREEBIN_SHIFT;\
                    ^
malloc.c.h:4526:11: note: in expansion of macro ‘insert_large_chunk’
           insert_large_chunk(m, tp, psize);
           ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4526:11: note: in expansion of macro ‘insert_large_chunk’
           insert_large_chunk(m, tp, psize);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4526:11: note: in expansion of macro ‘insert_large_chunk’
           insert_large_chunk(m, tp, psize);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4526:11: note: in expansion of macro ‘insert_large_chunk’
           insert_large_chunk(m, tp, psize);
           ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4526:11: note: in expansion of macro ‘insert_large_chunk’
           insert_large_chunk(m, tp, psize);
           ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘sys_trim’:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2495:32: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MAX_REQUEST         ((-MIN_CHUNK_SIZE) << 2)
                                ^~~~~~~~~~~~~~
malloc.c.h:4544:13: note: in expansion of macro ‘MAX_REQUEST’
   if (pad < MAX_REQUEST && is_initialized(m)) {
             ^~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4545:12: note: in expansion of macro ‘TOP_FOOT_SIZE’
     pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
            ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:4545:12: note: in expansion of macro ‘TOP_FOOT_SIZE’
     pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
            ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:4545:12: note: in expansion of macro ‘TOP_FOOT_SIZE’
     pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
            ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:4545:12: note: in expansion of macro ‘TOP_FOOT_SIZE’
     pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
            ^~~~~~~~~~~~~
malloc.c.h:4545:9: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
         ^~
malloc.c.h:2966:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
   ^
malloc.c.h:4545:12: note: in expansion of macro ‘TOP_FOOT_SIZE’
     pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
            ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1570:41: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define HALF_MAX_SIZE_T     (MAX_SIZE_T / 2U)
                                         ^
malloc.c.h:4568:24: note: in expansion of macro ‘HALF_MAX_SIZE_T’
           if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
                        ^~~~~~~~~~~~~~~
malloc.c.h:1570:41: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define HALF_MAX_SIZE_T     (MAX_SIZE_T / 2U)
                                         ^
malloc.c.h:4569:22: note: in expansion of macro ‘HALF_MAX_SIZE_T’
             extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
                      ^~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4569:52: warning: conversion to ‘unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
             extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
                                                    ^
malloc.c.h:4569:21: warning: conversion to ‘size_t {aka int}’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
                     ^
malloc.c.h:4578:28: warning: conversion to ‘size_t {aka int}’ from ‘long int’ may alter its value [-Wconversion]
                 released = old_br - new_br;
                            ^~~~~~
malloc.c.h: In function ‘tmalloc_large’:
malloc.c.h:4614:22: warning: conversion to ‘unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   compute_tree_index(nb, idx);
                      ^
malloc.c.h:3072:20: note: in definition of macro ‘compute_tree_index’
   unsigned int X = S >> TREEBIN_SHIFT;\
                    ^
malloc.c.h:3176:7: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   J = __builtin_ctz(X); \
       ^
malloc.c.h:4643:7: note: in expansion of macro ‘compute_bit2idx’
       compute_bit2idx(leastbit, i);
       ^~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4661:7: note: in expansion of macro ‘assert’
       assert(chunksize(v) == rsize + nb);
       ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4661:7: note: in expansion of macro ‘assert’
       assert(chunksize(v) == rsize + nb);
       ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4663:9: note: in expansion of macro ‘unlink_large_chunk’
         unlink_large_chunk(m, v);
         ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:4664:21: note: in expansion of macro ‘MIN_CHUNK_SIZE’
         if (rsize < MIN_CHUNK_SIZE)
                     ^~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3318:2: note: in expansion of macro ‘mark_inuse_foot’
  mark_inuse_foot(M,p,s))
  ^~~~~~~~~~~~~~~
malloc.c.h:4665:11: note: in expansion of macro ‘set_inuse_and_pinuse’
           set_inuse_and_pinuse(m, v, (rsize + nb));
           ^~~~~~~~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4667:11: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
           set_size_and_pinuse_of_inuse_chunk(m, v, nb);
           ^
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
malloc.c.h:3830:15: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   assert(S >= MIN_CHUNK_SIZE);\
               ^~~~~~~~~~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4041:20: note: in expansion of macro ‘insert_small_chunk’
   if (is_small(S)) insert_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4669:30: warning: conversion to ‘unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
           insert_chunk(m, r, rsize);
                              ^
malloc.c.h:3072:20: note: in definition of macro ‘compute_tree_index’
   unsigned int X = S >> TREEBIN_SHIFT;\
                    ^
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4042:41: note: in expansion of macro ‘insert_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:4669:11: note: in expansion of macro ‘insert_chunk’
           insert_chunk(m, r, rsize);
           ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4674:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(m);
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4674:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(m);
     ^~~~~~~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘tmalloc_small’:
malloc.c.h:3176:7: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   J = __builtin_ctz(X); \
       ^
malloc.c.h:4685:3: note: in expansion of macro ‘compute_bit2idx’
   compute_bit2idx(leastbit, i);
   ^~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4699:5: note: in expansion of macro ‘assert’
     assert(chunksize(v) == rsize + nb);
     ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4699:5: note: in expansion of macro ‘assert’
     assert(chunksize(v) == rsize + nb);
     ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4701:7: note: in expansion of macro ‘unlink_large_chunk’
       unlink_large_chunk(m, v);
       ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:4702:19: note: in expansion of macro ‘MIN_CHUNK_SIZE’
       if (rsize < MIN_CHUNK_SIZE)
                   ^~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3318:2: note: in expansion of macro ‘mark_inuse_foot’
  mark_inuse_foot(M,p,s))
  ^~~~~~~~~~~~~~~
malloc.c.h:4703:9: note: in expansion of macro ‘set_inuse_and_pinuse’
         set_inuse_and_pinuse(m, v, (rsize + nb));
         ^~~~~~~~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4705:9: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
         set_size_and_pinuse_of_inuse_chunk(m, v, nb);
         ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3889:5: note: in expansion of macro ‘assert’
     assert(is_small(DVS));\
     ^~~~~~
malloc.c.h:4707:9: note: in expansion of macro ‘replace_dv’
         replace_dv(m, r, rsize);
         ^~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3889:5: note: in expansion of macro ‘assert’
     assert(is_small(DVS));\
     ^~~~~~
malloc.c.h:4707:9: note: in expansion of macro ‘replace_dv’
         replace_dv(m, r, rsize);
         ^~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
malloc.c.h:3830:15: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   assert(S >= MIN_CHUNK_SIZE);\
               ^~~~~~~~~~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:4707:9: note: in expansion of macro ‘replace_dv’
         replace_dv(m, r, rsize);
         ^~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:4707:9: note: in expansion of macro ‘replace_dv’
         replace_dv(m, r, rsize);
         ^~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:4707:9: note: in expansion of macro ‘replace_dv’
         replace_dv(m, r, rsize);
         ^~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:4707:9: note: in expansion of macro ‘replace_dv’
         replace_dv(m, r, rsize);
         ^~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:4707:9: note: in expansion of macro ‘replace_dv’
         replace_dv(m, r, rsize);
         ^~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4713:3: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
   CORRUPTION_ERROR_ACTION(m);
   ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4713:3: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
   CORRUPTION_ERROR_ACTION(m);
   ^~~~~~~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘internal_realloc’:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2495:32: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MAX_REQUEST         ((-MIN_CHUNK_SIZE) << 2)
                                ^~~~~~~~~~~~~~
malloc.c.h:4721:16: note: in expansion of macro ‘MAX_REQUEST’
   if (bytes >= MAX_REQUEST) {
                ^~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2496:30: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MIN_REQUEST         (MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
                              ^~~~~~~~~~~~~~
malloc.c.h:2504:13: note: in expansion of macro ‘MIN_REQUEST’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
             ^~~~~~~~~~~
malloc.c.h:4736:19: note: in expansion of macro ‘request2size’
       size_t nb = request2size(bytes);
                   ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2504:27: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                           ^~~~~~~~~~~~~~
malloc.c.h:4736:19: note: in expansion of macro ‘request2size’
       size_t nb = request2size(bytes);
                   ^~~~~~~~~~~~
malloc.c.h:2500:12: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
            ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4736:19: note: in expansion of macro ‘request2size’
       size_t nb = request2size(bytes);
                   ^~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4736:19: note: in expansion of macro ‘request2size’
       size_t nb = request2size(bytes);
                   ^~~~~~~~~~~~
malloc.c.h:2504:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
   ^
malloc.c.h:4736:19: note: in expansion of macro ‘request2size’
       size_t nb = request2size(bytes);
                   ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:4742:22: note: in expansion of macro ‘MIN_CHUNK_SIZE’
         if (rsize >= MIN_CHUNK_SIZE) {
                      ^~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3313:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M,p,s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4744:11: note: in expansion of macro ‘set_inuse’
           set_inuse(m, newp, nb);
           ^~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3318:2: note: in expansion of macro ‘mark_inuse_foot’
  mark_inuse_foot(M,p,s))
  ^~~~~~~~~~~~~~~
malloc.c.h:4745:11: note: in expansion of macro ‘set_inuse_and_pinuse’
           set_inuse_and_pinuse(m, remainder, rsize);
           ^~~~~~~~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3313:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M,p,s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4754:9: note: in expansion of macro ‘set_inuse’
         set_inuse(m, oldp, nb);
         ^~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:4762:7: note: in expansion of macro ‘USAGE_ERROR_ACTION’
       USAGE_ERROR_ACTION(m, oldmem);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:4762:7: note: in expansion of macro ‘USAGE_ERROR_ACTION’
       USAGE_ERROR_ACTION(m, oldmem);
       ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4785:29: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
         size_t oc = oldsize - overhead_for(oldp);
                             ^
malloc.c.h:4785:21: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
         size_t oc = oldsize - overhead_for(oldp);
                     ^~~~~~~
malloc.c.h:4786:9: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
         memcpy(newmem, oldmem, (oc < bytes)? oc : bytes);
         ^~~~~~
malloc.c.h:4786:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
malloc.c.h:4786:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
malloc.c.h:4786:32: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
         memcpy(newmem, oldmem, (oc < bytes)? oc : bytes);
                                ^
malloc.c.h: In function ‘internal_memalign’:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:4800:20: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   if (alignment <  MIN_CHUNK_SIZE) /* must be at least a minimum chunk size */
                    ^~~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:4801:17: note: in expansion of macro ‘MIN_CHUNK_SIZE’
     alignment = MIN_CHUNK_SIZE;
                 ^~~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2495:32: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MAX_REQUEST         ((-MIN_CHUNK_SIZE) << 2)
                                ^~~~~~~~~~~~~~
malloc.c.h:4808:16: note: in expansion of macro ‘MAX_REQUEST’
   if (bytes >= MAX_REQUEST - alignment) {
                ^~~~~~~~~~~
malloc.c.h:4808:28: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   if (bytes >= MAX_REQUEST - alignment) {
                            ^
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2496:30: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MIN_REQUEST         (MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
                              ^~~~~~~~~~~~~~
malloc.c.h:2504:13: note: in expansion of macro ‘MIN_REQUEST’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
             ^~~~~~~~~~~
malloc.c.h:4814:17: note: in expansion of macro ‘request2size’
     size_t nb = request2size(bytes);
                 ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2504:27: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                           ^~~~~~~~~~~~~~
malloc.c.h:4814:17: note: in expansion of macro ‘request2size’
     size_t nb = request2size(bytes);
                 ^~~~~~~~~~~~
malloc.c.h:2500:12: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
            ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4814:17: note: in expansion of macro ‘request2size’
     size_t nb = request2size(bytes);
                 ^~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4814:17: note: in expansion of macro ‘request2size’
     size_t nb = request2size(bytes);
                 ^~~~~~~~~~~~
malloc.c.h:2504:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
   ^
malloc.c.h:4814:17: note: in expansion of macro ‘request2size’
     size_t nb = request2size(bytes);
                 ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:4815:35: note: in expansion of macro ‘MIN_CHUNK_SIZE’
     size_t req = nb + alignment + MIN_CHUNK_SIZE - CHUNK_OVERHEAD;
                                   ^~~~~~~~~~~~~~
malloc.c.h:4815:33: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     size_t req = nb + alignment + MIN_CHUNK_SIZE - CHUNK_OVERHEAD;
                                 ^
malloc.c.h:4815:18: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
     size_t req = nb + alignment + MIN_CHUNK_SIZE - CHUNK_OVERHEAD;
                  ^~
malloc.c.h:4823:13: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
       if ((((size_t)(mem)) % alignment) != 0) { /* misaligned */
             ^
malloc.c.h:4832:47: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
         char* br = (char*)mem2chunk((size_t)(((size_t)(mem +
                                               ^
malloc.c.h:2490:50: note: in definition of macro ‘mem2chunk’
 #define mem2chunk(mem)      ((mchunkptr)((char*)(mem) - TWO_SIZE_T_SIZES))
                                                  ^~~
malloc.c.h:2490:42: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
 #define mem2chunk(mem)      ((mchunkptr)((char*)(mem) - TWO_SIZE_T_SIZES))
                                          ^
malloc.c.h:4832:27: note: in expansion of macro ‘mem2chunk’
         char* br = (char*)mem2chunk((size_t)(((size_t)(mem +
                           ^~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:4836:51: note: in expansion of macro ‘MIN_CHUNK_SIZE’
         char* pos = ((size_t)(br - (char*)(p)) >= MIN_CHUNK_SIZE)?
                                                   ^~~~~~~~~~~~~~
malloc.c.h:4839:27: warning: conversion to ‘size_t {aka int}’ from ‘long int’ may alter its value [-Wconversion]
         size_t leadsize = pos - (char*)(p);
                           ^~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3313:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M,p,s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4847:11: note: in expansion of macro ‘set_inuse’
           set_inuse(m, newp, newsize);
           ^~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3313:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M,p,s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4848:11: note: in expansion of macro ‘set_inuse’
           set_inuse(m, p, leadsize);
           ^~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:4857:25: note: in expansion of macro ‘MIN_CHUNK_SIZE’
         if (size > nb + MIN_CHUNK_SIZE) {
                         ^~~~~~~~~~~~~~
malloc.c.h:4857:23: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
         if (size > nb + MIN_CHUNK_SIZE) {
                       ^
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3313:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M,p,s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4860:11: note: in expansion of macro ‘set_inuse’
           set_inuse(m, p, nb);
           ^~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3313:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M,p,s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4861:11: note: in expansion of macro ‘set_inuse’
           set_inuse(m, remainder, remainder_size);
           ^~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4866:7: note: in expansion of macro ‘assert’
       assert (chunksize(p) >= nb);
       ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4866:7: note: in expansion of macro ‘assert’
       assert (chunksize(p) >= nb);
       ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4867:16: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
       assert((((size_t)(chunk2mem(p))) % alignment) == 0);
                ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4867:7: note: in expansion of macro ‘assert’
       assert((((size_t)(chunk2mem(p))) % alignment) == 0);
       ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4867:7: note: in expansion of macro ‘assert’
       assert((((size_t)(chunk2mem(p))) % alignment) == 0);
       ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘ialloc’:
malloc.c.h:4923:42: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     array_size = request2size(n_elements * (sizeof(void*)));
                                          ^
malloc.c.h:2504:6: note: in definition of macro ‘request2size’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
      ^~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2496:30: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MIN_REQUEST         (MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
                              ^~~~~~~~~~~~~~
malloc.c.h:2504:13: note: in expansion of macro ‘MIN_REQUEST’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
             ^~~~~~~~~~~
malloc.c.h:4923:18: note: in expansion of macro ‘request2size’
     array_size = request2size(n_elements * (sizeof(void*)));
                  ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2504:27: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                           ^~~~~~~~~~~~~~
malloc.c.h:4923:18: note: in expansion of macro ‘request2size’
     array_size = request2size(n_elements * (sizeof(void*)));
                  ^~~~~~~~~~~~
malloc.c.h:4923:42: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     array_size = request2size(n_elements * (sizeof(void*)));
                                          ^
malloc.c.h:2500:7: note: in definition of macro ‘pad_request’
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
       ^~~
malloc.c.h:4923:18: note: in expansion of macro ‘request2size’
     array_size = request2size(n_elements * (sizeof(void*)));
                  ^~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4923:18: note: in expansion of macro ‘request2size’
     array_size = request2size(n_elements * (sizeof(void*)));
                  ^~~~~~~~~~~~
malloc.c.h:2504:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
   ^
malloc.c.h:4923:18: note: in expansion of macro ‘request2size’
     array_size = request2size(n_elements * (sizeof(void*)));
                  ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2496:30: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MIN_REQUEST         (MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
                              ^~~~~~~~~~~~~~
malloc.c.h:2504:13: note: in expansion of macro ‘MIN_REQUEST’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
             ^~~~~~~~~~~
malloc.c.h:4928:20: note: in expansion of macro ‘request2size’
     element_size = request2size(*sizes);
                    ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2504:27: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                           ^~~~~~~~~~~~~~
malloc.c.h:4928:20: note: in expansion of macro ‘request2size’
     element_size = request2size(*sizes);
                    ^~~~~~~~~~~~
malloc.c.h:2500:12: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
            ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4928:20: note: in expansion of macro ‘request2size’
     element_size = request2size(*sizes);
                    ^~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4928:20: note: in expansion of macro ‘request2size’
     element_size = request2size(*sizes);
                    ^~~~~~~~~~~~
malloc.c.h:2504:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
   ^
malloc.c.h:4928:20: note: in expansion of macro ‘request2size’
     element_size = request2size(*sizes);
                    ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2496:30: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MIN_REQUEST         (MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
                              ^~~~~~~~~~~~~~
malloc.c.h:2504:13: note: in expansion of macro ‘MIN_REQUEST’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
             ^~~~~~~~~~~
malloc.c.h:4935:24: note: in expansion of macro ‘request2size’
       contents_size += request2size(sizes[i]);
                        ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2504:27: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                           ^~~~~~~~~~~~~~
malloc.c.h:4935:24: note: in expansion of macro ‘request2size’
       contents_size += request2size(sizes[i]);
                        ^~~~~~~~~~~~
malloc.c.h:2500:12: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
            ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4935:24: note: in expansion of macro ‘request2size’
       contents_size += request2size(sizes[i]);
                        ^~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4935:24: note: in expansion of macro ‘request2size’
       contents_size += request2size(sizes[i]);
                        ^~~~~~~~~~~~
malloc.c.h:4935:21: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       contents_size += request2size(sizes[i]);
                     ^~
malloc.c.h:2504:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
   ^
malloc.c.h:4935:24: note: in expansion of macro ‘request2size’
       contents_size += request2size(sizes[i]);
                        ^~~~~~~~~~~~
malloc.c.h:2896:44: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define disable_mmap(M)       ((M)->mflags &= ~USE_MMAP_BIT)
                                            ^
malloc.c.h:4946:3: note: in expansion of macro ‘disable_mmap’
   disable_mmap(m);
   ^~~~~~~~~~~~
malloc.c.h:4947:33: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   mem = internal_malloc(m, size - CHUNK_OVERHEAD, 0);
                                 ^
malloc.c.h:4052:66: note: in definition of macro ‘internal_malloc’
 #define internal_malloc(m, b, f) mspace_malloc_implementation(m, b, f)
                                                                  ^
malloc.c.h:4947:28: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   mem = internal_malloc(m, size - CHUNK_OVERHEAD, 0);
                            ^
malloc.c.h:4052:66: note: in definition of macro ‘internal_malloc’
 #define internal_malloc(m, b, f) mspace_malloc_implementation(m, b, f)
                                                                  ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4957:3: note: in expansion of macro ‘assert’
   assert(!is_mmapped(p));
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:4957:3: note: in expansion of macro ‘assert’
   assert(!is_mmapped(p));
   ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:4960:5: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
     memset((size_t*)mem, 0, remainder_size - SIZE_T_SIZE - array_size);
     ^~~~~~
malloc.c.h:4960:5: warning: incompatible implicit declaration of built-in function ‘memset’
malloc.c.h:4960:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
malloc.c.h:4960:44: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     memset((size_t*)mem, 0, remainder_size - SIZE_T_SIZE - array_size);
                                            ^
malloc.c.h:4960:58: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     memset((size_t*)mem, 0, remainder_size - SIZE_T_SIZE - array_size);
                                                          ^
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4969:5: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
     set_size_and_pinuse_of_inuse_chunk(m, array_chunk, array_chunk_size);
     ^
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2496:30: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MIN_REQUEST         (MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
                              ^~~~~~~~~~~~~~
malloc.c.h:2504:13: note: in expansion of macro ‘MIN_REQUEST’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
             ^~~~~~~~~~~
malloc.c.h:4980:16: note: in expansion of macro ‘request2size’
         size = request2size(sizes[i]);
                ^~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2504:27: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                           ^~~~~~~~~~~~~~
malloc.c.h:4980:16: note: in expansion of macro ‘request2size’
         size = request2size(sizes[i]);
                ^~~~~~~~~~~~
malloc.c.h:2500:12: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
            ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4980:16: note: in expansion of macro ‘request2size’
         size = request2size(sizes[i]);
                ^~~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2504:44: note: in expansion of macro ‘pad_request’
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
                                            ^~~~~~~~~~~
malloc.c.h:4980:16: note: in expansion of macro ‘request2size’
         size = request2size(sizes[i]);
                ^~~~~~~~~~~~
malloc.c.h:2504:3: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
   ^
malloc.c.h:4980:16: note: in expansion of macro ‘request2size’
         size = request2size(sizes[i]);
                ^~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4982:7: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
       set_size_and_pinuse_of_inuse_chunk(m, p, size);
       ^
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:4986:7: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
       set_size_and_pinuse_of_inuse_chunk(m, p, remainder_size);
       ^
malloc.c.h: In function ‘dlmalloc_usable_size’:
malloc.c.h:5367:27: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       return chunksize(p) - overhead_for(p);
                           ^
malloc.c.h:5367:27: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
       return chunksize(p) - overhead_for(p);
                           ^
malloc.c.h: In function ‘init_user_mstate’:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:5377:18: note: in expansion of macro ‘pad_request’
   size_t msize = pad_request(sizeof(struct malloc_state));
                  ^~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:5379:19: note: in expansion of macro ‘align_as_chunk’
   mchunkptr msp = align_as_chunk(tbase);
                   ^~~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2492:47: note: in expansion of macro ‘align_offset’
 #define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
                                               ^~~~~~~~~~~~
malloc.c.h:5379:19: note: in expansion of macro ‘align_as_chunk’
   mchunkptr msp = align_as_chunk(tbase);
                   ^~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:5381:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(m, 0, msize);
   ^~~~~~
malloc.c.h:5381:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
malloc.c.h:5381:16: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   memset(m, 0, msize);
                ^~~~~
malloc.c.h:2059:73: warning: right-hand operand of comma expression has no effect [-Wunused-value]
 #define INITIAL_LOCK(sl)      ((sl)->threadid = 0, (sl)->l = (sl)->c = 0, 0)
                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
malloc.c.h:5382:3: note: in expansion of macro ‘INITIAL_LOCK’
   INITIAL_LOCK(&m->mutex);
   ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5394:59: note: in expansion of macro ‘TOP_FOOT_SIZE’
   init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) - TOP_FOOT_SIZE);
                                                           ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5394:59: note: in expansion of macro ‘TOP_FOOT_SIZE’
   init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) - TOP_FOOT_SIZE);
                                                           ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:5394:59: note: in expansion of macro ‘TOP_FOOT_SIZE’
   init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) - TOP_FOOT_SIZE);
                                                           ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:5394:59: note: in expansion of macro ‘TOP_FOOT_SIZE’
   init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) - TOP_FOOT_SIZE);
                                                           ^~~~~~~~~~~~~
malloc.c.h:5394:57: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) - TOP_FOOT_SIZE);
                                                         ^
malloc.c.h:5394:19: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) - TOP_FOOT_SIZE);
                   ^
malloc.c.h: In function ‘create_mspace’:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:5403:11: note: in expansion of macro ‘pad_request’
   msize = pad_request(sizeof(struct malloc_state));
           ^~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5404:37: note: in expansion of macro ‘TOP_FOOT_SIZE’
   if (capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                     ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5404:37: note: in expansion of macro ‘TOP_FOOT_SIZE’
   if (capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                     ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:5404:37: note: in expansion of macro ‘TOP_FOOT_SIZE’
   if (capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                     ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:5404:37: note: in expansion of macro ‘TOP_FOOT_SIZE’
   if (capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                     ^~~~~~~~~~~~~
malloc.c.h:5404:35: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   if (capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                   ^
malloc.c.h:5404:51: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   if (capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                                   ^
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5406:30: note: in expansion of macro ‘TOP_FOOT_SIZE’
                  (capacity + TOP_FOOT_SIZE + msize));
                              ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5406:30: note: in expansion of macro ‘TOP_FOOT_SIZE’
                  (capacity + TOP_FOOT_SIZE + msize));
                              ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:5406:30: note: in expansion of macro ‘TOP_FOOT_SIZE’
                  (capacity + TOP_FOOT_SIZE + msize));
                              ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:5406:30: note: in expansion of macro ‘TOP_FOOT_SIZE’
                  (capacity + TOP_FOOT_SIZE + msize));
                              ^~~~~~~~~~~~~
malloc.c.h:5406:28: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
                  (capacity + TOP_FOOT_SIZE + msize));
                            ^
malloc.c.h:5406:44: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
                  (capacity + TOP_FOOT_SIZE + msize));
                                            ^
malloc.c.h:5405:55: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     size_t rs = ((capacity == 0)? mparams.granularity :
                                                       ^
malloc.c.h:5405:17: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
     size_t rs = ((capacity == 0)? mparams.granularity :
                 ^
malloc.c.h: In function ‘create_mspace_with_base’:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:5422:11: note: in expansion of macro ‘pad_request’
   msize = pad_request(sizeof(struct malloc_state));
           ^~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5423:26: note: in expansion of macro ‘TOP_FOOT_SIZE’
   if (capacity > msize + TOP_FOOT_SIZE &&
                          ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5423:26: note: in expansion of macro ‘TOP_FOOT_SIZE’
   if (capacity > msize + TOP_FOOT_SIZE &&
                          ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:5423:26: note: in expansion of macro ‘TOP_FOOT_SIZE’
   if (capacity > msize + TOP_FOOT_SIZE &&
                          ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:5423:26: note: in expansion of macro ‘TOP_FOOT_SIZE’
   if (capacity > msize + TOP_FOOT_SIZE &&
                          ^~~~~~~~~~~~~
malloc.c.h:5423:24: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
   if (capacity > msize + TOP_FOOT_SIZE &&
                        ^
In file included from nedmalloc.c:168:0:
malloc.c.h:1580:5: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
     ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5424:37: note: in expansion of macro ‘TOP_FOOT_SIZE’
       capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                     ^~~~~~~~~~~~~
malloc.c.h:1581:25: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
                         ^
malloc.c.h:2966:4: note: in expansion of macro ‘align_offset’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
    ^~~~~~~~~~~~
malloc.c.h:5424:37: note: in expansion of macro ‘TOP_FOOT_SIZE’
       capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                     ^~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:2966:31: note: in expansion of macro ‘pad_request’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                               ^~~~~~~~~~~
malloc.c.h:5424:37: note: in expansion of macro ‘TOP_FOOT_SIZE’
       capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                     ^~~~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2966:74: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
                                                                          ^~~~~~~~~~~~~~
malloc.c.h:5424:37: note: in expansion of macro ‘TOP_FOOT_SIZE’
       capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                     ^~~~~~~~~~~~~
malloc.c.h:5424:35: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                   ^
malloc.c.h:5424:51: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
       capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
                                                   ^
malloc.c.h: In function ‘mspace_track_large_chunks’:
malloc.c.h:2896:44: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define disable_mmap(M)       ((M)->mflags &= ~USE_MMAP_BIT)
                                            ^
malloc.c.h:5441:7: note: in expansion of macro ‘disable_mmap’
       disable_mmap(ms);
       ^~~~~~~~~~~~
malloc.c.h: In function ‘destroy_mspace’:
malloc.c.h:2060:31: warning: statement with no effect [-Wunused-value]
 #define DESTROY_LOCK(sl)      (0)
                               ^
malloc.c.h:5461:5: note: in expansion of macro ‘DESTROY_LOCK’
     DESTROY_LOCK(&ms->mutex);
     ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5464:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5464:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘mspace_malloc_implementation’:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2496:30: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MIN_REQUEST         (MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
                              ^~~~~~~~~~~~~~
malloc.c.h:5482:23: note: in expansion of macro ‘MIN_REQUEST’
         nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
                       ^~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:5482:37: note: in expansion of macro ‘MIN_CHUNK_SIZE’
         nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
                                     ^~~~~~~~~~~~~~
malloc.c.h:2500:12: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
            ^
malloc.c.h:5482:54: note: in expansion of macro ‘pad_request’
         nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
                                                      ^~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:5482:54: note: in expansion of macro ‘pad_request’
         nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
                                                      ^~~~~~~~~~~
malloc.c.h:5482:14: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
         nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
              ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:5491:11: note: in expansion of macro ‘assert’
           assert(chunksize(p) == small_index2size(idx));
           ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:5491:11: note: in expansion of macro ‘assert’
           assert(chunksize(p) == small_index2size(idx));
           ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3867:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:5492:11: note: in expansion of macro ‘unlink_first_small_chunk’
           unlink_first_small_chunk(ms, b, p, idx);
           ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3867:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:5492:11: note: in expansion of macro ‘unlink_first_small_chunk’
           unlink_first_small_chunk(ms, b, p, idx);
           ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3868:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:5492:11: note: in expansion of macro ‘unlink_first_small_chunk’
           unlink_first_small_chunk(ms, b, p, idx);
           ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3868:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:5492:11: note: in expansion of macro ‘unlink_first_small_chunk’
           unlink_first_small_chunk(ms, b, p, idx);
           ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3869:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:5492:11: note: in expansion of macro ‘unlink_first_small_chunk’
           unlink_first_small_chunk(ms, b, p, idx);
           ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3869:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:5492:11: note: in expansion of macro ‘unlink_first_small_chunk’
           unlink_first_small_chunk(ms, b, p, idx);
           ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3877:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5492:11: note: in expansion of macro ‘unlink_first_small_chunk’
           unlink_first_small_chunk(ms, b, p, idx);
           ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3877:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5492:11: note: in expansion of macro ‘unlink_first_small_chunk’
           unlink_first_small_chunk(ms, b, p, idx);
           ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:3316:16: warning: conversion to ‘size_t {aka int}’ from ‘bindex_t {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
                ^
malloc.c.h:5493:11: note: in expansion of macro ‘set_inuse_and_pinuse’
           set_inuse_and_pinuse(ms, p, small_index2size(idx));
           ^~~~~~~~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3318:2: note: in expansion of macro ‘mark_inuse_foot’
  mark_inuse_foot(M,p,s))
  ^~~~~~~~~~~~~~~
malloc.c.h:5493:11: note: in expansion of macro ‘set_inuse_and_pinuse’
           set_inuse_and_pinuse(ms, p, small_index2size(idx));
           ^~~~~~~~~~~~~~~~~~~~
malloc.c.h:3176:7: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   J = __builtin_ctz(X); \
       ^
malloc.c.h:5506:13: note: in expansion of macro ‘compute_bit2idx’
             compute_bit2idx(leastbit, i);
             ^~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:5509:13: note: in expansion of macro ‘assert’
             assert(chunksize(p) == small_index2size(i));
             ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:5509:13: note: in expansion of macro ‘assert’
             assert(chunksize(p) == small_index2size(i));
             ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3867:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:5510:13: note: in expansion of macro ‘unlink_first_small_chunk’
             unlink_first_small_chunk(ms, b, p, i);
             ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3867:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:5510:13: note: in expansion of macro ‘unlink_first_small_chunk’
             unlink_first_small_chunk(ms, b, p, i);
             ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3868:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:5510:13: note: in expansion of macro ‘unlink_first_small_chunk’
             unlink_first_small_chunk(ms, b, p, i);
             ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3868:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:5510:13: note: in expansion of macro ‘unlink_first_small_chunk’
             unlink_first_small_chunk(ms, b, p, i);
             ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3869:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:5510:13: note: in expansion of macro ‘unlink_first_small_chunk’
             unlink_first_small_chunk(ms, b, p, i);
             ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3869:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:5510:13: note: in expansion of macro ‘unlink_first_small_chunk’
             unlink_first_small_chunk(ms, b, p, i);
             ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3877:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5510:13: note: in expansion of macro ‘unlink_first_small_chunk’
             unlink_first_small_chunk(ms, b, p, i);
             ^~~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3877:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5510:13: note: in expansion of macro ‘unlink_first_small_chunk’
             unlink_first_small_chunk(ms, b, p, i);
             ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:5511:41: warning: conversion to ‘bindex_t {aka unsigned int}’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
             rsize = small_index2size(i) - nb;
                                         ^
malloc.c.h:3061:29: warning: conversion to ‘size_t {aka int}’ from ‘bindex_t {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define small_index2size(i) ((i)  << SMALLBIN_SHIFT)
                             ^
malloc.c.h:5511:21: note: in expansion of macro ‘small_index2size’
             rsize = small_index2size(i) - nb;
                     ^~~~~~~~~~~~~~~~
malloc.c.h:3316:16: warning: conversion to ‘size_t {aka int}’ from ‘bindex_t {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
                ^
malloc.c.h:5514:15: note: in expansion of macro ‘set_inuse_and_pinuse’
               set_inuse_and_pinuse(ms, p, small_index2size(i));
               ^~~~~~~~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3318:2: note: in expansion of macro ‘mark_inuse_foot’
  mark_inuse_foot(M,p,s))
  ^~~~~~~~~~~~~~~
malloc.c.h:5514:15: note: in expansion of macro ‘set_inuse_and_pinuse’
               set_inuse_and_pinuse(ms, p, small_index2size(i));
               ^~~~~~~~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:5516:15: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
               set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
               ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3889:5: note: in expansion of macro ‘assert’
     assert(is_small(DVS));\
     ^~~~~~
malloc.c.h:5519:15: note: in expansion of macro ‘replace_dv’
               replace_dv(ms, r, rsize);
               ^~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3889:5: note: in expansion of macro ‘assert’
     assert(is_small(DVS));\
     ^~~~~~
malloc.c.h:5519:15: note: in expansion of macro ‘replace_dv’
               replace_dv(ms, r, rsize);
               ^~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
malloc.c.h:3830:15: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   assert(S >= MIN_CHUNK_SIZE);\
               ^~~~~~~~~~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:5519:15: note: in expansion of macro ‘replace_dv’
               replace_dv(ms, r, rsize);
               ^~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:5519:15: note: in expansion of macro ‘replace_dv’
               replace_dv(ms, r, rsize);
               ^~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:5519:15: note: in expansion of macro ‘replace_dv’
               replace_dv(ms, r, rsize);
               ^~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:5519:15: note: in expansion of macro ‘replace_dv’
               replace_dv(ms, r, rsize);
               ^~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:3890:5: note: in expansion of macro ‘insert_small_chunk’
     insert_small_chunk(M, DV, DVS);\
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:5519:15: note: in expansion of macro ‘replace_dv’
               replace_dv(ms, r, rsize);
               ^~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:2495:32: note: in expansion of macro ‘MIN_CHUNK_SIZE’
 #define MAX_REQUEST         ((-MIN_CHUNK_SIZE) << 2)
                                ^~~~~~~~~~~~~~
malloc.c.h:5532:25: note: in expansion of macro ‘MAX_REQUEST’
       else if (bytes >= MAX_REQUEST)
                         ^~~~~~~~~~~
malloc.c.h:2500:12: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
            ^
malloc.c.h:5535:14: note: in expansion of macro ‘pad_request’
         nb = pad_request(bytes);
              ^~~~~~~~~~~
malloc.c.h:2500:49: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                                 ^
malloc.c.h:5535:14: note: in expansion of macro ‘pad_request’
         nb = pad_request(bytes);
              ^~~~~~~~~~~
malloc.c.h:2500:4: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
    (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
    ^
malloc.c.h:5535:14: note: in expansion of macro ‘pad_request’
         nb = pad_request(bytes);
              ^~~~~~~~~~~
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:5545:22: note: in expansion of macro ‘MIN_CHUNK_SIZE’
         if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
                      ^~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:5549:11: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
           set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
           ^
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3318:2: note: in expansion of macro ‘mark_inuse_foot’
  mark_inuse_foot(M,p,s))
  ^~~~~~~~~~~~~~~
malloc.c.h:5555:11: note: in expansion of macro ‘set_inuse_and_pinuse’
           set_inuse_and_pinuse(ms, p, dvs);
           ^~~~~~~~~~~~~~~~~~~~
malloc.c.h:3304:50: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
                                                  ^
malloc.c.h:3322:3: note: in expansion of macro ‘mark_inuse_foot’
   mark_inuse_foot(M, p, s))
   ^~~~~~~~~~~~~~~
malloc.c.h:5567:9: note: in expansion of macro ‘set_size_and_pinuse_of_inuse_chunk’
         set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
         ^
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘mspace_malloc’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5587:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5587:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h: In function ‘mspace_malloc2’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5596:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5596:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:5606:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(mem, 0, chunksize(p) - overhead_for(p));
       ^~~~~~
malloc.c.h:5606:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
malloc.c.h:5606:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset(mem, 0, chunksize(p) - overhead_for(p));
                                   ^
malloc.c.h: In function ‘mspace_free’:
malloc.c.h:3307:4: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
   ((mstate)(((mchunkptr)((char*)(p) +\
    ^
malloc.c.h:5615:17: note: in expansion of macro ‘get_mstate_for’
     mstate fm = get_mstate_for(p);
                 ^~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5621:7: note: in expansion of macro ‘USAGE_ERROR_ACTION’
       USAGE_ERROR_ACTION(fm, p);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5621:7: note: in expansion of macro ‘USAGE_ERROR_ACTION’
       USAGE_ERROR_ACTION(fm, p);
       ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:5633:31: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
             psize += prevsize + MMAP_FOOT_PAD;
                               ^
malloc.c.h:5633:19: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
             psize += prevsize + MMAP_FOOT_PAD;
                   ^~
malloc.c.h:5633:22: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
             psize += prevsize + MMAP_FOOT_PAD;
                      ^~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3849:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3849:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3850:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3850:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3851:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3851:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3860:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3860:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5644:17: note: in expansion of macro ‘unlink_chunk’
                 unlink_chunk(fm, p, prevsize);
                 ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3849:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3849:3: note: in expansion of macro ‘assert’
   assert(P != B);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3850:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3850:3: note: in expansion of macro ‘assert’
   assert(P != F);\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3851:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3851:3: note: in expansion of macro ‘assert’
   assert(chunksize(P) == small_index2size(I));\
   ^~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3860:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3860:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4045:20: note: in expansion of macro ‘unlink_small_chunk’
   if (is_small(S)) unlink_small_chunk(M, P, S)\
                    ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3978:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3993:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4010:7: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
       CORRUPTION_ERROR_ACTION(M);\
       ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4021:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4029:13: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
             CORRUPTION_ERROR_ACTION(M);\
             ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:4033:9: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
         CORRUPTION_ERROR_ACTION(M);\
         ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:4046:41: note: in expansion of macro ‘unlink_large_chunk’
   else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
                                         ^~~~~~~~~~~~~~~~~~
malloc.c.h:5680:15: note: in expansion of macro ‘unlink_chunk’
               unlink_chunk(fm, next, nsize);
               ^~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:2486:37: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
                                     ^
malloc.c.h:1415:24: note: in definition of macro ‘assert’
 #define assert(x) if(!(x)) ABORT
                        ^
malloc.c.h:3830:15: note: in expansion of macro ‘MIN_CHUNK_SIZE’
   assert(S >= MIN_CHUNK_SIZE);\
               ^~~~~~~~~~~~~~
malloc.c.h:5692:13: note: in expansion of macro ‘insert_small_chunk’
             insert_small_chunk(fm, p, psize);
             ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:5692:13: note: in expansion of macro ‘insert_small_chunk’
             insert_small_chunk(fm, p, psize);
             ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
malloc.c.h:3830:3: note: in expansion of macro ‘assert’
   assert(S >= MIN_CHUNK_SIZE);\
   ^~~~~~
malloc.c.h:5692:13: note: in expansion of macro ‘insert_small_chunk’
             insert_small_chunk(fm, p, psize);
             ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5692:13: note: in expansion of macro ‘insert_small_chunk’
             insert_small_chunk(fm, p, psize);
             ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3836:5: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
     CORRUPTION_ERROR_ACTION(M);\
     ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5692:13: note: in expansion of macro ‘insert_small_chunk’
             insert_small_chunk(fm, p, psize);
             ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:5697:40: warning: conversion to ‘unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
             insert_large_chunk(fm, tp, psize);
                                        ^
malloc.c.h:3072:20: note: in definition of macro ‘compute_tree_index’
   unsigned int X = S >> TREEBIN_SHIFT;\
                    ^
malloc.c.h:5697:13: note: in expansion of macro ‘insert_large_chunk’
             insert_large_chunk(fm, tp, psize);
             ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5697:13: note: in expansion of macro ‘insert_large_chunk’
             insert_large_chunk(fm, tp, psize);
             ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3928:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5697:13: note: in expansion of macro ‘insert_large_chunk’
             insert_large_chunk(fm, tp, psize);
             ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5697:13: note: in expansion of macro ‘insert_large_chunk’
             insert_large_chunk(fm, tp, psize);
             ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3015:36: note: in expansion of macro ‘ABORT’
 #define CORRUPTION_ERROR_ACTION(m) ABORT
                                    ^~~~~
malloc.c.h:3942:11: note: in expansion of macro ‘CORRUPTION_ERROR_ACTION’
           CORRUPTION_ERROR_ACTION(M);\
           ^~~~~~~~~~~~~~~~~~~~~~~
malloc.c.h:5697:13: note: in expansion of macro ‘insert_large_chunk’
             insert_large_chunk(fm, tp, psize);
             ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5706:7: note: in expansion of macro ‘USAGE_ERROR_ACTION’
       USAGE_ERROR_ACTION(fm, p);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5706:7: note: in expansion of macro ‘USAGE_ERROR_ACTION’
       USAGE_ERROR_ACTION(fm, p);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h: In function ‘mspace_calloc’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5718:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5718:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:5731:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(mem, 0, chunksize(p) - overhead_for(p));
       ^~~~~~
malloc.c.h:5731:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
malloc.c.h:5731:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset(mem, 0, chunksize(p) - overhead_for(p));
                                   ^
malloc.c.h: In function ‘mspace_realloc2’:
malloc.c.h:5748:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     size_t oldsize = chunksize(p) - overhead_for(p);
                                   ^
malloc.c.h:2533:29: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define chunksize(p)        ((p)->head & ~(FLAG_BITS))
                             ^
malloc.c.h:5748:22: note: in expansion of macro ‘chunksize’
     size_t oldsize = chunksize(p) - overhead_for(p);
                      ^~~~~~~~~
malloc.c.h:3307:4: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
   ((mstate)(((mchunkptr)((char*)(p) +\
    ^
malloc.c.h:5750:17: note: in expansion of macro ‘get_mstate_for’
     mstate ms = get_mstate_for(p);
                 ^~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5755:7: note: in expansion of macro ‘USAGE_ERROR_ACTION’
       USAGE_ERROR_ACTION(ms,ms);
       ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5755:7: note: in expansion of macro ‘USAGE_ERROR_ACTION’
       USAGE_ERROR_ACTION(ms,ms);
       ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:5762:39: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         size_t newsize = chunksize(p) - overhead_for(p);
                                       ^
malloc.c.h:2533:29: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define chunksize(p)        ((p)->head & ~(FLAG_BITS))
                             ^
malloc.c.h:5762:26: note: in expansion of macro ‘chunksize’
         size_t newsize = chunksize(p) - overhead_for(p);
                          ^~~~~~~~~
malloc.c.h:5763:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset((char*)mem + oldsize, 0, newsize - oldsize);
         ^~~~~~
malloc.c.h:5763:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
malloc.c.h:5763:41: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
         memset((char*)mem + oldsize, 0, newsize - oldsize);
                                         ^~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘mspace_memalign’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5776:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5776:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h: In function ‘mspace_independent_calloc’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5787:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5787:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h: In function ‘mspace_independent_comalloc’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5797:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5797:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h: In function ‘mspace_trim’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5813:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5813:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h: In function ‘mspace_malloc_stats’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5824:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5824:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h: In function ‘mspace_footprint’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5835:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5835:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h: In function ‘mspace_max_footprint’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5848:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5848:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h: In function ‘mspace_mallinfo’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5858:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:3019:33: note: in expansion of macro ‘ABORT’
 #define USAGE_ERROR_ACTION(m,p) ABORT
                                 ^~~~~
malloc.c.h:5858:5: note: in expansion of macro ‘USAGE_ERROR_ACTION’
     USAGE_ERROR_ACTION(ms,ms);
     ^~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h: In function ‘mspace_usable_size’:
malloc.c.h:5868:27: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       return chunksize(p) - overhead_for(p);
                           ^
malloc.c.h:5868:27: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
       return chunksize(p) - overhead_for(p);
                           ^
nedmalloc.c: At top level:
nedmalloc.c:299:28: error: ‘malloc’ undeclared here (not in a function)
 void *(*sysmalloc)(size_t)=malloc;
                            ^~~~~~
nedmalloc.c:300:36: error: ‘calloc’ undeclared here (not in a function)
 void *(*syscalloc)(size_t, size_t)=calloc;
                                    ^~~~~~
nedmalloc.c:301:37: error: ‘realloc’ undeclared here (not in a function)
 void *(*sysrealloc)(void *, size_t)=realloc;
                                     ^~~~~~~
nedmalloc.c:302:25: error: ‘free’ undeclared here (not in a function)
 void (*sysfree)(void *)=free;
                         ^~~~
nedmalloc.c: In function ‘CallMalloc’:
nedmalloc.c:325:90: warning: declaration of ‘mspace’ shadows a global declaration [-Wshadow]
 static FORCEINLINE NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void *CallMalloc(void *RESTRICT mspace, size_t size, size_t alignment, unsigned flags) THROWSPEC
                                                                                          ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1179:15: note: shadowed declaration is here
 typedef void* mspace;
               ^~~~~~
nedmalloc.c:346:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   size_t truesize=chunksize(p) - overhead_for(p);
                                ^
In file included from nedmalloc.c:168:0:
malloc.c.h:2533:29: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define chunksize(p)        ((p)->head & ~(FLAG_BITS))
                             ^
nedmalloc.c:346:19: note: in expansion of macro ‘chunksize’
   size_t truesize=chunksize(p) - overhead_for(p);
                   ^~~~~~~~~
nedmalloc.c: In function ‘CallRealloc’:
nedmalloc.c:374:91: warning: declaration of ‘mspace’ shadows a global declaration [-Wshadow]
 static FORCEINLINE NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void *CallRealloc(void *RESTRICT mspace, void *RESTRICT mem, int isforeign, size_t oldsize, size_t newsize, size_t alignment, unsigned flags) THROWSPEC
                                                                                           ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1179:15: note: shadowed declaration is here
 typedef void* mspace;
               ^~~~~~
nedmalloc.c:391:4: warning: incompatible implicit declaration of built-in function ‘memcpy’
    memcpy(ret, mem, oldsize<newsize ? oldsize : newsize);
    ^~~~~~
nedmalloc.c:391:4: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
nedmalloc.c:391:21: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
    memcpy(ret, mem, oldsize<newsize ? oldsize : newsize);
                     ^~~~~~~
nedmalloc.c:412:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   size_t truesize=chunksize(p) - overhead_for(p);
                                ^
In file included from nedmalloc.c:168:0:
malloc.c.h:2533:29: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define chunksize(p)        ((p)->head & ~(FLAG_BITS))
                             ^
nedmalloc.c:412:19: note: in expansion of macro ‘chunksize’
   size_t truesize=chunksize(p) - overhead_for(p);
                   ^~~~~~~~~
nedmalloc.c: In function ‘CallFree’:
nedmalloc.c:435:49: warning: declaration of ‘mspace’ shadows a global declaration [-Wshadow]
 static FORCEINLINE void CallFree(void *RESTRICT mspace, void *RESTRICT mem, int isforeign) THROWSPEC
                                                 ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1179:15: note: shadowed declaration is here
 typedef void* mspace;
               ^~~~~~
In file included from nedmalloc.c:168:0:
nedmalloc.c: In function ‘nedblkmstate’:
malloc.c.h:1576:31: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
 #define is_aligned(A)       (((size_t)((A)) & (CHUNK_ALIGN_MASK)) == 0)
                               ^
nedmalloc.c:557:8: note: in expansion of macro ‘is_aligned’
    if(!is_aligned(mem)) return 0;  /* Would fail very rarely as all allocators return aligned blocks */
        ^~~~~~~~~~
nedmalloc.c:566:20: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if(chunksize(p)-overhead_for(p)>largestusedblock_) return 0;
                    ^
In file included from nedmalloc.c:168:0:
malloc.c.h:3307:4: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
   ((mstate)(((mchunkptr)((char*)(p) +\
    ^
nedmalloc.c:577:10: note: in expansion of macro ‘get_mstate_for’
     fm = get_mstate_for(p);
          ^~~~~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1576:31: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
 #define is_aligned(A)       (((size_t)((A)) & (CHUNK_ALIGN_MASK)) == 0)
                               ^
nedmalloc.c:578:9: note: in expansion of macro ‘is_aligned’
     if(!is_aligned(fm) || (void *)fm<leastusedaddress_) return 0;
         ^~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:583:5: note: in expansion of macro ‘assert’
     assert(ok_magic(fm)); /* If this fails, someone tried to free a block twice */
     ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:583:5: note: in expansion of macro ‘assert’
     assert(ok_magic(fm)); /* If this fails, someone tried to free a block twice */
     ^~~~~~
nedmalloc.c: In function ‘nedblksize’:
nedmalloc.c:616:13: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   if((flags & NM_SKIP_TOLERANCE_CHECKS) || nedblkmstate(mem))
             ^
nedmalloc.c:620:23: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    return chunksize(p)-overhead_for(p);
                       ^
nedmalloc.c:620:23: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
    return chunksize(p)-overhead_for(p);
                        
nedmalloc.c:625:8: warning: unused variable ‘a’ [-Wunused-variable]
    int a=1; /* Set breakpoints here if needed */
        ^
nedmalloc.c: In function ‘nedmalloc2’:
nedmalloc.c:643:1: warning: ‘nedpmalloc2’ is deprecated [-Wdeprecated-declarations]
 NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedmalloc2(size_t size, size_t alignment, unsigned flags) THROWSPEC    { return nedpmalloc2((nedpool *) 0, size, alignment, flags); }
 ^~~~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:78:0:
nedmalloc.h:606:83: note: declared here
 NEDMALLOCDEPRECATED NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedpmalloc2(nedpool *p, size_t size, size_t alignment, unsigned flags) THROWSPEC;
                                                                                   ^~~~~~~~~~~
nedmalloc.c: In function ‘nedrealloc2’:
nedmalloc.c:644:1: warning: ‘nedprealloc2’ is deprecated [-Wdeprecated-declarations]
 NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedrealloc2(void *mem, size_t size, size_t alignment, unsigned flags) THROWSPEC { return nedprealloc2((nedpool *) 0, mem, size, alignment, flags); }
 ^~~~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:78:0:
nedmalloc.h:607:83: note: declared here
 NEDMALLOCDEPRECATED NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedprealloc2(nedpool *p, void *mem, size_t size, size_t alignment, unsigned flags) THROWSPEC;
                                                                                   ^~~~~~~~~~~~
nedmalloc.c: In function ‘nedfree2’:
nedmalloc.c:645:1: warning: ‘nedpfree2’ is deprecated [-Wdeprecated-declarations]
 NEDMALLOCNOALIASATTR void   nedfree2(void *mem, unsigned flags) THROWSPEC              { nedpfree2((nedpool *) 0, mem, flags); }
 ^~~~~~~~~~~~~~~~~~~~
In file included from nedmalloc.c:78:0:
nedmalloc.h:608:66: note: declared here
 NEDMALLOCDEPRECATED NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR void   nedpfree2(nedpool *p, void *mem, unsigned flags) THROWSPEC;
                                                                  ^~~~~~~~~
nedmalloc.c: In function ‘GetTimestamp’:
nedmalloc.c:689:17: error: storage size of ‘tv’ isn’t known
  struct timeval tv;
                 ^~
nedmalloc.c:690:2: warning: implicit declaration of function ‘gettimeofday’ [-Wimplicit-function-declaration]
  gettimeofday(&tv, 0);
  ^~~~~~~~~~~~
nedmalloc.c:689:17: warning: unused variable ‘tv’ [-Wunused-variable]
  struct timeval tv;
                 ^~
nedmalloc.c: At top level:
nedmalloc.c:252:19: error: unknown type name ‘pthread_key_t’
  #define TLSVAR   pthread_key_t
                   ^
nedmalloc.c:791:2: note: in expansion of macro ‘TLSVAR’
  TLSVAR mycache;      /* Thread cache for this thread. 0 for unset, negative for use mspace-1 directly, otherwise is cache-1 */
  ^~~~~~
nedmalloc.c: In function ‘LogOperation’:
nedmalloc.c:1012:96: warning: declaration of ‘mspace’ shadows a global declaration [-Wshadow]
 static FORCEINLINE logentry *LogOperation(threadcache *tc, nedpool *np, LogEntryType type, int mspace, size_t size, void *mem, size_t alignment, unsigned flags, void *returned) THROWSPEC
                                                                                                ^~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:1179:15: note: shadowed declaration is here
 typedef void* mspace;
               ^~~~~~
nedmalloc.c: In function ‘size2binidx’:
nedmalloc.c:1056:48: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         topbit = sizeof(size)*__CHAR_BIT__ - 1 - __builtin_clz(size);
                                                ^
nedmalloc.c:1056:18: warning: conversion to ‘unsigned int’ from ‘long unsigned int’ may alter its value [-Wconversion]
         topbit = sizeof(size)*__CHAR_BIT__ - 1 - __builtin_clz(size);
                  ^~~~~~
In file included from nedmalloc.c:168:0:
nedmalloc.c: In function ‘RemoveCacheEntries’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1156:5: note: in expansion of macro ‘assert’
     assert(blksize<=nedblksize(0, f, 0));
     ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1156:5: note: in expansion of macro ‘assert’
     assert(blksize<=nedblksize(0, f, 0));
     ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1157:5: note: in expansion of macro ‘assert’
     assert(blksize);
     ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1157:5: note: in expansion of macro ‘assert’
     assert(blksize);
     ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1167:5: note: in expansion of macro ‘assert’
     assert((long) tc->freeInCache>=0);
     ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1167:5: note: in expansion of macro ‘assert’
     assert((long) tc->freeInCache>=0);
     ^~~~~~
nedmalloc.c:1170:53: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
     LogOperation(tc, p, LOGENTRY_THREADCACHE_CLEAN, age, blksize, f, 0, 0, 0);
                                                     ^~~
In file included from nedmalloc.c:168:0:
nedmalloc.c: In function ‘nedflushlogs’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1200:5: note: in expansion of macro ‘assert’
     assert(!tc->freeInCache);
     ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1200:5: note: in expansion of macro ‘assert’
     assert(!tc->freeInCache);
     ^~~~~~
nedmalloc.c: In function ‘AllocCache’:
nedmalloc.c:1322:15: warning: implicit declaration of function ‘abs’ [-Wimplicit-function-declaration]
  tc->mymspace=abs(tc->threadid) % end;
               ^~~
nedmalloc.c:256:23: warning: implicit declaration of function ‘pthread_setspecific’ [-Wimplicit-function-declaration]
  #define TLSSET(k, a) pthread_setspecific(k, a)
                       ^
nedmalloc.c:1343:5: note: in expansion of macro ‘TLSSET’
  if(TLSSET(p->mycache, (void *)(size_t)(n+1))) abort();
     ^~~~~~
nedmalloc.c:1343:24: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
  if(TLSSET(p->mycache, (void *)(size_t)(n+1))) abort();
                        ^
nedmalloc.c:256:46: note: in definition of macro ‘TLSSET’
  #define TLSSET(k, a) pthread_setspecific(k, a)
                                              ^
nedmalloc.c:1343:48: warning: incompatible implicit declaration of built-in function ‘abort’
  if(TLSSET(p->mycache, (void *)(size_t)(n+1))) abort();
                                                ^~~~~
nedmalloc.c:1343:48: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
nedmalloc.c: In function ‘threadcache_malloc’:
nedmalloc.c:1358:11: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  bestsize=1<<(idx+4);
           ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1379:2: note: in expansion of macro ‘assert’
  assert(bestsize>=size);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1379:2: note: in expansion of macro ‘assert’
  assert(bestsize>=size);
  ^~~~~~
nedmalloc.c:1380:25: warning: conversion to ‘size_t {aka int}’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
  if(size<bestsize) size=bestsize;
                         ^~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1381:2: note: in expansion of macro ‘assert’
  assert(size<=THREADCACHEMAX);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1381:2: note: in expansion of macro ‘assert’
  assert(size<=THREADCACHEMAX);
  ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1382:2: note: in expansion of macro ‘assert’
  assert(idx<=THREADCACHEMAXBINS);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1382:2: note: in expansion of macro ‘assert’
  assert(idx<=THREADCACHEMAXBINS);
  ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1398:3: note: in expansion of macro ‘assert’
   assert(nedblksize(0, blk, 0)>=blksize);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1398:3: note: in expansion of macro ‘assert’
   assert(nedblksize(0, blk, 0)>=blksize);
   ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1399:3: note: in expansion of macro ‘assert’
   assert(blksize>=size);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1399:3: note: in expansion of macro ‘assert’
   assert(blksize>=size);
   ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1408:3: note: in expansion of macro ‘assert’
   assert(binsptr[0]!=blk && binsptr[1]!=blk);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1408:3: note: in expansion of macro ‘assert’
   assert(binsptr[0]!=blk && binsptr[1]!=blk);
   ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1409:3: note: in expansion of macro ‘assert’
   assert(nedblksize(0, blk, 0)>=sizeof(threadcacheblk) && nedblksize(0, blk, 0)<=THREADCACHEMAX+CHUNK_OVERHEAD);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1409:3: note: in expansion of macro ‘assert’
   assert(nedblksize(0, blk, 0)>=sizeof(threadcacheblk) && nedblksize(0, blk, 0)<=THREADCACHEMAX+CHUNK_OVERHEAD);
   ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1416:3: note: in expansion of macro ‘assert’
   assert(blksize>=size);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1416:3: note: in expansion of macro ‘assert’
   assert(blksize>=size);
   ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1419:3: note: in expansion of macro ‘assert’
   assert((long) tc->freeInCache>=0);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1419:3: note: in expansion of macro ‘assert’
   assert((long) tc->freeInCache>=0);
   ^~~~~~
nedmalloc.c: In function ‘threadcache_free’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1455:2: note: in expansion of macro ‘assert’
  assert(size>=sizeof(threadcacheblk) && size<=THREADCACHEMAX+CHUNK_OVERHEAD);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1455:2: note: in expansion of macro ‘assert’
  assert(size>=sizeof(threadcacheblk) && size<=THREADCACHEMAX+CHUNK_OVERHEAD);
  ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1458:2: note: in expansion of macro ‘assert’
  assert(nedblksize(0, mem, 0));
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1458:2: note: in expansion of macro ‘assert’
  assert(nedblksize(0, mem, 0));
  ^~~~~~
nedmalloc.c:1464:11: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  bestsize=1<<(idx+4);
           ^
nedmalloc.c:1479:8: warning: conversion to ‘size_t {aka int}’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
   size=bestsize;
        ^~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1481:2: note: in expansion of macro ‘assert’
  assert(idx<=THREADCACHEMAXBINS);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1481:2: note: in expansion of macro ‘assert’
  assert(idx<=THREADCACHEMAXBINS);
  ^~~~~~
nedmalloc.c:1485:3: warning: incompatible implicit declaration of built-in function ‘abort’
   abort();
   ^~~~~
nedmalloc.c:1485:3: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
nedmalloc.c:1492:12: warning: conversion to ‘size_t {aka int}’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
  tck->size=(unsigned int) size;
            ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1499:2: note: in expansion of macro ‘assert’
  assert(!*binsptr || (*binsptr)->size==tck->size);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1499:2: note: in expansion of macro ‘assert’
  assert(!*binsptr || (*binsptr)->size==tck->size);
  ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1501:2: note: in expansion of macro ‘assert’
  assert(tck==tc->bins[idx*2]);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1501:2: note: in expansion of macro ‘assert’
  assert(tck==tc->bins[idx*2]);
  ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1502:2: note: in expansion of macro ‘assert’
  assert(tc->bins[idx*2+1]==tck || binsptr[0]->next->prev==tck);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1502:2: note: in expansion of macro ‘assert’
  assert(tc->bins[idx*2+1]==tck || binsptr[0]->next->prev==tck);
  ^~~~~~
nedmalloc.c: In function ‘InitPool’:
nedmalloc.c:253:22: warning: implicit declaration of function ‘pthread_key_create’ [-Wimplicit-function-declaration]
  #define TLSALLOC(k) pthread_key_create(k, 0)
                      ^
nedmalloc.c:1525:5: note: in expansion of macro ‘TLSALLOC’
  if(TLSALLOC(&p->mycache)) goto err;
     ^~~~~~~~
nedmalloc.c:1538:3: warning: incompatible implicit declaration of built-in function ‘abort’
   abort();   /* If you can't allocate for system pool, we're screwed */
   ^~~~~
nedmalloc.c:1538:3: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
nedmalloc.c:254:22: warning: implicit declaration of function ‘pthread_key_delete’ [-Wimplicit-function-declaration]
  #define TLSFREE(k)  pthread_key_delete(k)
                      ^
nedmalloc.c:1549:6: note: in expansion of macro ‘TLSFREE’
   if(TLSFREE(p->mycache)) abort();
      ^~~~~~~
nedmalloc.c:1549:27: warning: incompatible implicit declaration of built-in function ‘abort’
   if(TLSFREE(p->mycache)) abort();
                           ^~~~~
nedmalloc.c:1549:27: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
nedmalloc.c: In function ‘FindMSpace’:
nedmalloc.c:1615:25: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
   if(TLSSET(p->mycache, (void *)(size_t)(-(n+1)))) abort();
                         ^
nedmalloc.c:256:46: note: in definition of macro ‘TLSSET’
  #define TLSSET(k, a) pthread_setspecific(k, a)
                                              ^
nedmalloc.c:1615:52: warning: incompatible implicit declaration of built-in function ‘abort’
   if(TLSSET(p->mycache, (void *)(size_t)(-(n+1)))) abort();
                                                    ^~~~~
nedmalloc.c:1615:52: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
In file included from nedmalloc.c:168:0:
nedmalloc.c: In function ‘nedcreatepool’:
malloc.c.h:2059:73: warning: right-hand operand of comma expression has no effect [-Wunused-value]
 #define INITIAL_LOCK(sl)      ((sl)->threadid = 0, (sl)->l = (sl)->c = 0, 0)
                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
nedmalloc.c:1642:3: note: in expansion of macro ‘INITIAL_LOCK’
   INITIAL_LOCK(&poollistlock);
   ^~~~~~~~~~~~
nedmalloc.c:1656:46: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   newsize=sizeof(PoolList)+(poollist->size+1)*sizeof(nedpool *);
                                              ^
nedmalloc.c:1656:11: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   newsize=sizeof(PoolList)+(poollist->size+1)*sizeof(nedpool *);
           ^~~~~~
nedmalloc.c:1659:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&poollist->list[poollist->size], 0, newsize-((size_t)&poollist->list[poollist->size]-(size_t)&poollist->list[0]));
   ^~~~~~
nedmalloc.c:1659:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
nedmalloc.c:1659:55: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   memset(&poollist->list[poollist->size], 0, newsize-((size_t)&poollist->list[poollist->size]-(size_t)&poollist->list[0]));
                                                       ^
nedmalloc.c:1659:95: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   memset(&poollist->list[poollist->size], 0, newsize-((size_t)&poollist->list[poollist->size]-(size_t)&poollist->list[0]));
                                                                                               ^
nedmalloc.c:1659:46: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(&poollist->list[poollist->size], 0, newsize-((size_t)&poollist->list[poollist->size]-(size_t)&poollist->list[0]));
                                              ^~~~~~~
nedmalloc.c:1660:74: warning: conversion to ‘long unsigned int’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
   poollist->size=((newsize-((char *)&poollist->list[0]-(char *)poollist))/sizeof(nedpool *))-1;
                                                                          ^
nedmalloc.c:1660:18: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   poollist->size=((newsize-((char *)&poollist->list[0]-(char *)poollist))/sizeof(nedpool *))-1;
                  ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1661:3: note: in expansion of macro ‘assert’
   assert(poollist->size>poollist->length);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1661:3: note: in expansion of macro ‘assert’
   assert(poollist->size>poollist->length);
   ^~~~~~
In file included from nedmalloc.c:168:0:
nedmalloc.c: In function ‘neddestroypool’:
malloc.c.h:2060:31: warning: statement with no effect [-Wunused-value]
 #define DESTROY_LOCK(sl)      (0)
                               ^
nedmalloc.c:1694:2: note: in expansion of macro ‘DESTROY_LOCK’
  DESTROY_LOCK(&p->mutex);
  ^~~~~~~~~~~~
nedmalloc.c:1696:26: warning: incompatible implicit declaration of built-in function ‘abort’
  if(TLSFREE(p->mycache)) abort();
                          ^~~~~
nedmalloc.c:1696:26: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1701:2: note: in expansion of macro ‘assert’
  assert(poollist);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1701:2: note: in expansion of macro ‘assert’
  assert(poollist);
  ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1703:2: note: in expansion of macro ‘assert’
  assert(n!=poollist->length);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1703:2: note: in expansion of macro ‘assert’
  assert(n!=poollist->length);
  ^~~~~~
nedmalloc.c:1704:2: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  memmove(&poollist->list[n], &poollist->list[n+1], (size_t)&poollist->list[poollist->length]-(size_t)&poollist->list[n]);
  ^~~~~~~
nedmalloc.c:1704:2: warning: incompatible implicit declaration of built-in function ‘memmove’
nedmalloc.c:1704:2: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
nedmalloc.c:1704:52: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  memmove(&poollist->list[n], &poollist->list[n+1], (size_t)&poollist->list[poollist->length]-(size_t)&poollist->list[n]);
                                                    ^
nedmalloc.c:1704:94: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
  memmove(&poollist->list[n], &poollist->list[n+1], (size_t)&poollist->list[poollist->length]-(size_t)&poollist->list[n]);
                                                                                              ^
nedmalloc.c:1704:52: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  memmove(&poollist->list[n], &poollist->list[n+1], (size_t)&poollist->list[poollist->length]-(size_t)&poollist->list[n]);
                                                    ^
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1707:3: note: in expansion of macro ‘assert’
   assert(!poollist->list[0]);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1707:3: note: in expansion of macro ‘assert’
   assert(!poollist->list[0]);
   ^~~~~~
nedmalloc.c: In function ‘neddestroysyspool’:
nedmalloc.c:1735:26: warning: incompatible implicit declaration of built-in function ‘abort’
  if(TLSFREE(p->mycache)) abort();
                          ^~~~~
nedmalloc.c:1735:26: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
In file included from nedmalloc.c:168:0:
malloc.c.h:2060:31: warning: statement with no effect [-Wunused-value]
 #define DESTROY_LOCK(sl)      (0)
                               ^
nedmalloc.c:1738:2: note: in expansion of macro ‘DESTROY_LOCK’
  DESTROY_LOCK(&p->mutex);
  ^~~~~~~~~~~~
nedmalloc.c: In function ‘nedpoollist’:
nedmalloc.c:1749:55: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   if(!(ret=(nedpool **) nedmalloc((poollist->length+1)*sizeof(nedpool *)))) goto badexit;
                                                       ^
nedmalloc.c:1749:35: warning: conversion to ‘size_t {aka int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
   if(!(ret=(nedpool **) nedmalloc((poollist->length+1)*sizeof(nedpool *)))) goto badexit;
                                   ^
nedmalloc.c:1750:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(ret, poollist->list, (poollist->length+1)*sizeof(nedpool *));
   ^~~~~~
nedmalloc.c:1750:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
nedmalloc.c:1750:51: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(ret, poollist->list, (poollist->length+1)*sizeof(nedpool *));
                                                   ^
nedmalloc.c: In function ‘nedtrimthreadcache’:
nedmalloc.c:255:21: warning: implicit declaration of function ‘pthread_getspecific’ [-Wimplicit-function-declaration]
  #define TLSGET(k)  pthread_getspecific(k)
                     ^
nedmalloc.c:1784:24: note: in expansion of macro ‘TLSGET’
  mycache=(int)(size_t) TLSGET(p->mycache);
                        ^~~~~~
nedmalloc.c:1787:57: warning: incompatible implicit declaration of built-in function ‘abort’
   if(disable && TLSSET(p->mycache, (void *)(size_t)-1)) abort();
                                                         ^~~~~
nedmalloc.c:1787:57: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
nedmalloc.c:1796:36: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
   if(disable && TLSSET(p->mycache, (void *)(size_t)(-tc->mymspace))) abort();
                                    ^
nedmalloc.c:256:46: note: in definition of macro ‘TLSSET’
  #define TLSSET(k, a) pthread_setspecific(k, a)
                                              ^
nedmalloc.c:1796:70: warning: incompatible implicit declaration of built-in function ‘abort’
   if(disable && TLSSET(p->mycache, (void *)(size_t)(-tc->mymspace))) abort();
                                                                      ^~~~~
nedmalloc.c:1796:70: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1799:3: note: in expansion of macro ‘assert’
   assert(!tc->freeInCache);
   ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1799:3: note: in expansion of macro ‘assert’
   assert(!tc->freeInCache);
   ^~~~~~
nedmalloc.c: In function ‘GetMSpace’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1834:2: note: in expansion of macro ‘assert’
  assert(m);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1834:2: note: in expansion of macro ‘assert’
  assert(m);
  ^~~~~~
nedmalloc.c: In function ‘GetThreadCache_cold2’:
nedmalloc.c:1853:50: warning: incompatible implicit declaration of built-in function ‘abort’
    if(TLSSET((*p)->mycache, (void *)(size_t)-1)) abort();
                                                  ^~~~~
nedmalloc.c:1853:50: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
In file included from nedmalloc.c:168:0:
nedmalloc.c: In function ‘GetThreadCache’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1880:2: note: in expansion of macro ‘assert’
  assert(*mymspace>=0);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1880:2: note: in expansion of macro ‘assert’
  assert(*mymspace>=0);
  ^~~~~~
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1882:2: note: in expansion of macro ‘assert’
  assert(!(*tc) || (long)(size_t)CURRENT_THREAD==(*tc)->threadid);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1882:2: note: in expansion of macro ‘assert’
  assert(!(*tc) || (long)(size_t)CURRENT_THREAD==(*tc)->threadid);
  ^~~~~~
nedmalloc.c: In function ‘nedpmalloc2’:
nedmalloc.c:1907:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(ret, 0, size);
     ^~~~~~
nedmalloc.c:1907:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
nedmalloc.c:1907:20: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     memset(ret, 0, size);
                    ^~~~
nedmalloc.c: In function ‘nedprealloc2’:
nedmalloc.c:1928:2: warning: ‘nedpmalloc2’ is deprecated [-Wdeprecated-declarations]
  if(!mem) return nedpmalloc2(p, size, alignment, flags);
  ^~
nedmalloc.c:1895:46: note: declared here
 NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedpmalloc2(nedpool *p, size_t size, size_t alignment, unsigned flags) THROWSPEC
                                              ^~~~~~~~~~~
In file included from nedmalloc.c:168:0:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1937:2: note: in expansion of macro ‘assert’
  assert(memsize);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1937:2: note: in expansion of macro ‘assert’
  assert(memsize);
  ^~~~~~
nedmalloc.c:1941:3: warning: incompatible implicit declaration of built-in function ‘abort’
   abort();
   ^~~~~
nedmalloc.c:1941:3: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
nedmalloc.c:1958:4: warning: incompatible implicit declaration of built-in function ‘memcpy’
    memcpy(ret, mem, tocopy);
    ^~~~~~
nedmalloc.c:1958:4: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
nedmalloc.c:1958:21: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
    memcpy(ret, mem, tocopy);
                     ^~~~~~
nedmalloc.c:1960:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset((void *)((size_t)ret+memsize), 0, size-memsize);
     ^~~~~~
nedmalloc.c:1960:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
nedmalloc.c:1960:21: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
     memset((void *)((size_t)ret+memsize), 0, size-memsize);
                     ^
nedmalloc.c:1960:12: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
     memset((void *)((size_t)ret+memsize), 0, size-memsize);
            ^
nedmalloc.c:1960:46: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     memset((void *)((size_t)ret+memsize), 0, size-memsize);
                                              ^~~~
In file included from nedmalloc.c:168:0:
nedmalloc.c: In function ‘nedpfree2’:
malloc.c.h:592:16: warning: incompatible implicit declaration of built-in function ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1999:2: note: in expansion of macro ‘assert’
  assert(memsize);
  ^~~~~~
malloc.c.h:592:16: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
 #define ABORT  abort()
                ^
malloc.c.h:1415:28: note: in expansion of macro ‘ABORT’
 #define assert(x) if(!(x)) ABORT
                            ^~~~~
nedmalloc.c:1999:2: note: in expansion of macro ‘assert’
  assert(memsize);
  ^~~~~~
nedmalloc.c:2003:3: warning: incompatible implicit declaration of built-in function ‘abort’
   abort();
   ^~~~~
nedmalloc.c:2003:3: note: include ‘<stdlib.h>’ or provide a declaration of ‘abort’
nedmalloc.c: In function ‘nedpmalloc’:
nedmalloc.c:2023:2: warning: ‘nedpmalloc2’ is deprecated [-Wdeprecated-declarations]
  return nedpmalloc2(p, size, 0, flags);
  ^~~~~~
nedmalloc.c:1895:46: note: declared here
 NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedpmalloc2(nedpool *p, size_t size, size_t alignment, unsigned flags) THROWSPEC
                                              ^~~~~~~~~~~
nedmalloc.c: In function ‘nedpcalloc’:
nedmalloc.c:2031:2: warning: ‘nedpmalloc2’ is deprecated [-Wdeprecated-declarations]
  return nedpmalloc2(p, bytes, 0, M2_ZERO_MEMORY|flags);
  ^~~~~~
nedmalloc.c:1895:46: note: declared here
 NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedpmalloc2(nedpool *p, size_t size, size_t alignment, unsigned flags) THROWSPEC
                                              ^~~~~~~~~~~
nedmalloc.c: In function ‘nedprealloc’:
nedmalloc.c:2045:2: warning: ‘nedprealloc2’ is deprecated [-Wdeprecated-declarations]
  return nedprealloc2(p, mem, size, 0, flags);
  ^~~~~~
nedmalloc.c:1922:46: note: declared here
 NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedprealloc2(nedpool *p, void *mem, size_t size, size_t alignment, unsigned flags) THROWSPEC
                                              ^~~~~~~~~~~~
nedmalloc.c: In function ‘nedpmemalign’:
nedmalloc.c:2050:2: warning: ‘nedpmalloc2’ is deprecated [-Wdeprecated-declarations]
  return nedpmalloc2(p, bytes, alignment, flags);
  ^~~~~~
nedmalloc.c:1895:46: note: declared here
 NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedpmalloc2(nedpool *p, size_t size, size_t alignment, unsigned flags) THROWSPEC
                                              ^~~~~~~~~~~
nedmalloc.c: In function ‘nedpfree’:
nedmalloc.c:2054:3: warning: ‘nedpfree2’ is deprecated [-Wdeprecated-declarations]
   nedpfree2(p, mem, 0);
   ^~~~~~~~~
nedmalloc.c:1985:29: note: declared here
 NEDMALLOCNOALIASATTR void   nedpfree2(nedpool *p, void *mem, unsigned flags) THROWSPEC
                             ^~~~~~~~~
nedmalloc.c: In function ‘nedpindependent_comalloc’:
nedmalloc.c:2163:41: warning: implicit declaration of function ‘alloca’ [-Wimplicit-function-declaration]
     size_t i, *adjustedsizes=(size_t *) alloca(elems*sizeof(size_t));
                                         ^~~~~~
nedmalloc.c:2163:53: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
     size_t i, *adjustedsizes=(size_t *) alloca(elems*sizeof(size_t));
                                                     ^
nedmalloc.c:2163:30: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
     size_t i, *adjustedsizes=(size_t *) alloca(elems*sizeof(size_t));
                              ^
nedmalloc.c:2166:83: warning: conversion to ‘long unsigned int’ from ‘size_t {aka int}’ may change the sign of the result [-Wsign-conversion]
         adjustedsizes[i]=sizes[i]<sizeof(threadcacheblk) ? sizeof(threadcacheblk) : sizes[i];
                                                                                   ^
nedmalloc.c:2166:26: warning: conversion to ‘size_t {aka int}’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         adjustedsizes[i]=sizes[i]<sizeof(threadcacheblk) ? sizeof(threadcacheblk) : sizes[i];
                          ^~~~~
nedmalloc.c:2165:5: warning: this ‘for’ clause does not guard... [-Wmisleading-indentation]
     for(i=0; i<elems; i++)
     ^~~
nedmalloc.c:2167:2: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘for’
  GetThreadCache(&p, &tc, &mymspace, 0);
  ^~~~~~~~~~~~~~
At top level:
nedmalloc.c:739:20: warning: ‘LogEntryTypeStrings’ defined but not used [-Wunused-variable]
 static const char *LogEntryTypeStrings[]={
                    ^~~~~~~~~~~~~~~~~~~
nedmalloc.c:680:18: warning: ‘GetTimestamp’ defined but not used [-Wunused-function]
 static timeCount GetTimestamp()
                  ^~~~~~~~~~~~
make: *** [../../Mk/l4.build.mk:62: nedmalloc.o] Error 1
