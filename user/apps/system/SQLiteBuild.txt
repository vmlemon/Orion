===> sqlite-snapshot-201909031623/sqlite3.c
gcc-6 -I../../include -I../.. -I/usr/lib/gcc/x86_64-linux-gnu/6/include   -nostdinc -g -O2 -m64 -mno-red-zone   -fno-stack-protector -lssp -O2 -g -Wall -Wshadow   -fno-stack-protector  -Wconversion -std=c99 -c sqlite-snapshot-201909031623/sqlite3.c -o sqlite-snapshot-201909031623/sqlite3.o
In file included from sqlite-snapshot-201909031623/sqlite3.c:13746:0:
../../include/stdio.h: In function ‘__sputc’:
../../include/stdio.h:460:23: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
   return (*_p->_p++ = _c);
                       ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3StatusValue’:
sqlite-snapshot-201909031623/sqlite3.c:20745:3: warning: implicit declaration of function ‘assert’ [-Wimplicit-function-declaration]
   assert( op>=0 && op<ArraySize(wsdStat.nowValue) );
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3LookasideUsed’:
sqlite-snapshot-201909031623/sqlite3.c:20865:34: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   if( pHighwater ) *pHighwater = db->lookaside.nSlot - nInit;
                                  ^~
sqlite-snapshot-201909031623/sqlite3.c:20866:30: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   return db->lookaside.nSlot - (nInit+nFree);
          ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_db_status’:
sqlite-snapshot-201909031623/sqlite3.c:20910:21: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       *pHighwater = db->lookaside.anStat[op - SQLITE_DBSTATUS_LOOKASIDE_HIT];
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:20960:69: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           nByte += sqlite3GlobalConfig.m.xRoundup(sizeof(HashElem)) * (
                                                                     ^
sqlite-snapshot-201909031623/sqlite3.c:20960:17: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           nByte += sqlite3GlobalConfig.m.xRoundup(sizeof(HashElem)) * (
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:14242:31: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
   #define sqlite3GlobalConfig sqlite3Config
                               ^
sqlite-snapshot-201909031623/sqlite3.c:20960:20: note: in expansion of macro ‘sqlite3GlobalConfig’
           nByte += sqlite3GlobalConfig.m.xRoundup(sizeof(HashElem)) * (
                    ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20966:17: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           nByte += sqlite3_msize(pSchema->tblHash.ht);
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:20966:20: warning: conversion to ‘int’ from ‘sqlite3_uint64 {aka long long unsigned int}’ may alter its value [-Wconversion]
           nByte += sqlite3_msize(pSchema->tblHash.ht);
                    ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20967:17: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           nByte += sqlite3_msize(pSchema->trigHash.ht);
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:20967:20: warning: conversion to ‘int’ from ‘sqlite3_uint64 {aka long long unsigned int}’ may alter its value [-Wconversion]
           nByte += sqlite3_msize(pSchema->trigHash.ht);
                    ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20968:17: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           nByte += sqlite3_msize(pSchema->idxHash.ht);
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:20968:20: warning: conversion to ‘int’ from ‘sqlite3_uint64 {aka long long unsigned int}’ may alter its value [-Wconversion]
           nByte += sqlite3_msize(pSchema->idxHash.ht);
                    ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20969:17: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           nByte += sqlite3_msize(pSchema->fkeyHash.ht);
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:20969:20: warning: conversion to ‘int’ from ‘sqlite3_uint64 {aka long long unsigned int}’ may alter its value [-Wconversion]
           nByte += sqlite3_msize(pSchema->fkeyHash.ht);
                    ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘getDigits’:
sqlite-snapshot-201909031623/sqlite3.c:21176:14: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
     char N = zFormat[0] - '0';
              ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:21177:16: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
     char min = zFormat[1] - '0';
                ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘datetimeError’:
sqlite-snapshot-201909031623/sqlite3.c:21298:3: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
   memset(p, 0, sizeof(*p));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:21298:3: warning: incompatible implicit declaration of built-in function ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:21298:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘localtimeOffset’:
sqlite-snapshot-201909031623/sqlite3.c:21619:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sLocal, 0, sizeof(sLocal));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:21619:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘parseModifier’:
sqlite-snapshot-201909031623/sqlite3.c:21855:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(&tx, 0, sizeof(tx));
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:21855:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘isDate’:
sqlite-snapshot-201909031623/sqlite3.c:21939:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(*p));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:21939:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘juliandayFunc’:
sqlite-snapshot-201909031623/sqlite3.c:21981:41: warning: conversion to ‘double’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
     sqlite3_result_double(context, x.iJD/86400000.0);
                                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘strftimeFunc’:
sqlite-snapshot-201909031623/sqlite3.c:22121:34: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     z = sqlite3DbMallocRawNN(db, (int)n);
                                  ^
sqlite-snapshot-201909031623/sqlite3.c:22140:13: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           j += sqlite3Strlen30(&z[j]);
             ^~
sqlite-snapshot-201909031623/sqlite3.c:22165:51: warning: conversion to ‘double’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
           sqlite3_snprintf(20, &z[j],"%.16g",x.iJD/86400000.0);
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:22166:12: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           j+=sqlite3Strlen30(&z[j]);
            ^~
sqlite-snapshot-201909031623/sqlite3.c:22174:13: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           j += sqlite3Strlen30(&z[j]);
             ^~
sqlite-snapshot-201909031623/sqlite3.c:22179:20: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
           z[j++] = (char)(((x.iJD+129600000)/86400000) % 7) + '0';
                    ^
sqlite-snapshot-201909031623/sqlite3.c:22183:50: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           sqlite3_snprintf(5,&z[j],"%04d",x.Y); j+=sqlite3Strlen30(&z[j]);
                                                  ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3OsRandomness’:
sqlite-snapshot-201909031623/sqlite3.c:22571:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(zBufOut, 0, nByte);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:22571:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:22571:24: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(zBufOut, 0, nByte);
                        ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:22573:5: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:22573:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:22573:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:22573:47: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);
                                               ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3OsOpenMalloc’:
sqlite-snapshot-201909031623/sqlite3.c:22613:45: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pFile = (sqlite3_file *)sqlite3MallocZero(pVfs->szOsFile);
                                             ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_vfs_find’:
sqlite-snapshot-201909031623/sqlite3.c:22670:9: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
     if( strcmp(zVfs, pVfs->zName)==0 ) break;
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3MemMalloc’:
sqlite-snapshot-201909031623/sqlite3.c:22971:38: warning: implicit declaration of function ‘malloc’ [-Wimplicit-function-declaration]
 #define SQLITE_MALLOC(x)             malloc(x)
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:23037:7: note: in expansion of macro ‘SQLITE_MALLOC’
   p = SQLITE_MALLOC( nByte+8 );
       ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:22971:38: warning: incompatible implicit declaration of built-in function ‘malloc’
 #define SQLITE_MALLOC(x)             malloc(x)
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:23037:7: note: in expansion of macro ‘SQLITE_MALLOC’
   p = SQLITE_MALLOC( nByte+8 );
       ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:22971:38: note: include ‘<stdlib.h>’ or provide a declaration of ‘malloc’
 #define SQLITE_MALLOC(x)             malloc(x)
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:23037:7: note: in expansion of macro ‘SQLITE_MALLOC’
   p = SQLITE_MALLOC( nByte+8 );
       ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:23037:22: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p = SQLITE_MALLOC( nByte+8 );
                      ^
sqlite-snapshot-201909031623/sqlite3.c:22971:45: note: in definition of macro ‘SQLITE_MALLOC’
 #define SQLITE_MALLOC(x)             malloc(x)
                                             ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3MemFree’:
sqlite-snapshot-201909031623/sqlite3.c:22972:38: warning: implicit declaration of function ‘free’ [-Wimplicit-function-declaration]
 #define SQLITE_FREE(x)               free(x)
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:23064:3: note: in expansion of macro ‘SQLITE_FREE’
   SQLITE_FREE(p);
   ^~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:22972:38: warning: incompatible implicit declaration of built-in function ‘free’
 #define SQLITE_FREE(x)               free(x)
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:23064:3: note: in expansion of macro ‘SQLITE_FREE’
   SQLITE_FREE(p);
   ^~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:22972:38: note: include ‘<stdlib.h>’ or provide a declaration of ‘free’
 #define SQLITE_FREE(x)               free(x)
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:23064:3: note: in expansion of macro ‘SQLITE_FREE’
   SQLITE_FREE(p);
   ^~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3MemRealloc’:
sqlite-snapshot-201909031623/sqlite3.c:22973:38: warning: implicit declaration of function ‘realloc’ [-Wimplicit-function-declaration]
 #define SQLITE_REALLOC(x,y)          realloc((x),(y))
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:23110:7: note: in expansion of macro ‘SQLITE_REALLOC’
   p = SQLITE_REALLOC(p, nByte+8 );
       ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:22973:38: warning: incompatible implicit declaration of built-in function ‘realloc’
 #define SQLITE_REALLOC(x,y)          realloc((x),(y))
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:23110:7: note: in expansion of macro ‘SQLITE_REALLOC’
   p = SQLITE_REALLOC(p, nByte+8 );
       ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:22973:38: note: include ‘<stdlib.h>’ or provide a declaration of ‘realloc’
 #define SQLITE_REALLOC(x,y)          realloc((x),(y))
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:23110:7: note: in expansion of macro ‘SQLITE_REALLOC’
   p = SQLITE_REALLOC(p, nByte+8 );
       ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:22973:50: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define SQLITE_REALLOC(x,y)          realloc((x),(y))
                                                  ^
sqlite-snapshot-201909031623/sqlite3.c:23110:7: note: in expansion of macro ‘SQLITE_REALLOC’
   p = SQLITE_REALLOC(p, nByte+8 );
       ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3MutexAlloc’:
sqlite-snapshot-201909031623/sqlite3.c:25282:23: error: ‘mutexIsInit’ undeclared (first use in this function)
   assert( GLOBAL(int, mutexIsInit) );
                       ^
sqlite-snapshot-201909031623/sqlite3.c:14241:23: note: in definition of macro ‘GLOBAL’
   #define GLOBAL(t,v) v
                       ^
sqlite-snapshot-201909031623/sqlite3.c:25282:23: note: each undeclared identifier is reported only once for each function it appears in
   assert( GLOBAL(int, mutexIsInit) );
                       ^
sqlite-snapshot-201909031623/sqlite3.c:14241:23: note: in definition of macro ‘GLOBAL’
   #define GLOBAL(t,v) v
                       ^
sqlite-snapshot-201909031623/sqlite3.c: At top level:
sqlite-snapshot-201909031623/sqlite3.c:25612:3: error: unknown type name ‘pthread_mutex_t’
   pthread_mutex_t mutex;     /* Mutex controlling the lock */
   ^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pthreadMutexAlloc’:
sqlite-snapshot-201909031623/sqlite3.c:25628:41: error: ‘PTHREAD_MUTEX_INITIALIZER’ undeclared (first use in this function)
 #define SQLITE3_MUTEX_INITIALIZER(id) { PTHREAD_MUTEX_INITIALIZER }
                                         ^
sqlite-snapshot-201909031623/sqlite3.c:25725:5: note: in expansion of macro ‘SQLITE3_MUTEX_INITIALIZER’
     SQLITE3_MUTEX_INITIALIZER(2),
     ^~~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:25749:9: error: unknown type name ‘pthread_mutexattr_t’
         pthread_mutexattr_t recursiveAttr;
         ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:25750:9: warning: implicit declaration of function ‘pthread_mutexattr_init’ [-Wimplicit-function-declaration]
         pthread_mutexattr_init(&recursiveAttr);
         ^~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:25751:9: warning: implicit declaration of function ‘pthread_mutexattr_settype’ [-Wimplicit-function-declaration]
         pthread_mutexattr_settype(&recursiveAttr, PTHREAD_MUTEX_RECURSIVE);
         ^~~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:25751:51: error: ‘PTHREAD_MUTEX_RECURSIVE’ undeclared (first use in this function)
         pthread_mutexattr_settype(&recursiveAttr, PTHREAD_MUTEX_RECURSIVE);
                                                   ^~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:25752:9: warning: implicit declaration of function ‘pthread_mutex_init’ [-Wimplicit-function-declaration]
         pthread_mutex_init(&p->mutex, &recursiveAttr);
         ^~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:25753:9: warning: implicit declaration of function ‘pthread_mutexattr_destroy’ [-Wimplicit-function-declaration]
         pthread_mutexattr_destroy(&recursiveAttr);
         ^~~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pthreadMutexFree’:
sqlite-snapshot-201909031623/sqlite3.c:25795:12: error: ‘sqlite3_mutex {aka struct sqlite3_mutex}’ has no member named ‘nRef’
   assert( p->nRef==0 );
            ^~
sqlite-snapshot-201909031623/sqlite3.c:25800:5: warning: implicit declaration of function ‘pthread_mutex_destroy’ [-Wimplicit-function-declaration]
     pthread_mutex_destroy(&p->mutex);
     ^~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pthreadMutexEnter’:
sqlite-snapshot-201909031623/sqlite3.c:25822:12: error: ‘sqlite3_mutex {aka struct sqlite3_mutex}’ has no member named ‘id’
   assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );
            ^~
sqlite-snapshot-201909031623/sqlite3.c:25822:16: warning: comparison between pointer and integer
   assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );
                ^~
sqlite-snapshot-201909031623/sqlite3.c:25822:44: warning: implicit declaration of function ‘pthreadMutexNotheld’ [-Wimplicit-function-declaration]
   assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );
                                            ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:25849:3: warning: implicit declaration of function ‘pthread_mutex_lock’ [-Wimplicit-function-declaration]
   pthread_mutex_lock(&p->mutex);
   ^~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pthreadMutexTry’:
sqlite-snapshot-201909031623/sqlite3.c:25865:12: error: ‘sqlite3_mutex {aka struct sqlite3_mutex}’ has no member named ‘id’
   assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );
            ^~
sqlite-snapshot-201909031623/sqlite3.c:25865:16: warning: comparison between pointer and integer
   assert( p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) );
                ^~
sqlite-snapshot-201909031623/sqlite3.c:25895:7: warning: implicit declaration of function ‘pthread_mutex_trylock’ [-Wimplicit-function-declaration]
   if( pthread_mutex_trylock(&p->mutex)==0 ){
       ^~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pthreadMutexLeave’:
sqlite-snapshot-201909031623/sqlite3.c:25921:11: warning: implicit declaration of function ‘pthreadMutexHeld’ [-Wimplicit-function-declaration]
   assert( pthreadMutexHeld(p) );
           ^~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:25926:12: error: ‘sqlite3_mutex {aka struct sqlite3_mutex}’ has no member named ‘nRef’
   assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );
            ^~
sqlite-snapshot-201909031623/sqlite3.c:25926:26: error: ‘sqlite3_mutex {aka struct sqlite3_mutex}’ has no member named ‘id’
   assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );
                          ^~
sqlite-snapshot-201909031623/sqlite3.c:25926:30: warning: comparison between pointer and integer
   assert( p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE );
                              ^~
sqlite-snapshot-201909031623/sqlite3.c:25933:3: warning: implicit declaration of function ‘pthread_mutex_unlock’ [-Wimplicit-function-declaration]
   pthread_mutex_unlock(&p->mutex);
   ^~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3MallocInit’:
sqlite-snapshot-201909031623/sqlite3.c:26774:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&mem0, 0, sizeof(mem0));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:26774:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3MallocEnd’:
sqlite-snapshot-201909031623/sqlite3.c:26802:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&mem0, 0, sizeof(mem0));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:26802:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_malloc’:
sqlite-snapshot-201909031623/sqlite3.c:26917:35: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   return n<=0 ? 0 : sqlite3Malloc(n);
                                   ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_msize’:
sqlite-snapshot-201909031623/sqlite3.c:26966:45: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   return p ? sqlite3GlobalConfig.m.xSize(p) : 0;
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_realloc’:
sqlite-snapshot-201909031623/sqlite3.c:27090:31: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   return sqlite3Realloc(pOld, n);
                               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3MallocZero’:
sqlite-snapshot-201909031623/sqlite3.c:27106:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(p, 0, (size_t)n);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27106:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3DbMallocZero’:
sqlite-snapshot-201909031623/sqlite3.c:27119:11: warning: incompatible implicit declaration of built-in function ‘memset’
   if( p ) memset(p, 0, (size_t)n);
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27119:11: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘dbReallocFinish’:
sqlite-snapshot-201909031623/sqlite3.c:27223:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(pNew, p, db->lookaside.sz);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27223:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3DbStrDup’:
sqlite-snapshot-201909031623/sqlite3.c:27267:7: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   n = strlen(z) + 1;
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27267:7: warning: incompatible implicit declaration of built-in function ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:27267:7: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:27270:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(zNew, z, n);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27270:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3DbStrNDup’:
sqlite-snapshot-201909031623/sqlite3.c:27283:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(zNew, z, (size_t)n);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27283:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3DbSpanDup’:
sqlite-snapshot-201909031623/sqlite3.c:27299:39: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   return sqlite3DbStrNDup(db, zStart, n);
                                       ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘printfTempBuf’:
sqlite-snapshot-201909031623/sqlite3.c:27561:38: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   z = sqlite3DbMallocRaw(pAccum->db, n);
                                      ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_str_vappendf’:
sqlite-snapshot-201909031623/sqlite3.c:27674:25: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           unsigned wx = c - '0';
                         ^
sqlite-snapshot-201909031623/sqlite3.c:27676:24: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wx = wx*10 + c - '0';
                        ^
sqlite-snapshot-201909031623/sqlite3.c:27728:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
               px = px*10 + c - '0';
                          ^
sqlite-snapshot-201909031623/sqlite3.c:27804:27: warning: conversion to ‘sqlite_uint64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
               longvalue = -v;
                           ^
sqlite-snapshot-201909031623/sqlite3.c:27808:25: warning: conversion to ‘sqlite_uint64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
             longvalue = v;
                         ^
sqlite-snapshot-201909031623/sqlite3.c:27809:22: warning: conversion to ‘char’ from ‘etByte {aka unsigned char}’ may change the sign of the result [-Wsign-conversion]
             prefix = flag_prefix;
                      ^~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27835:29: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           if( cThousand ) n += precision/3;
                             ^~
sqlite-snapshot-201909031623/sqlite3.c:27836:49: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘u64 {aka long long unsigned int}’ may change the sign of the result [-Wsign-conversion]
           zOut = zExtra = printfTempBuf(pAccum, n);
                                                 ^
sqlite-snapshot-201909031623/sqlite3.c:27871:30: warning: conversion to ‘char’ from ‘etByte {aka unsigned char}’ may change the sign of the result [-Wsign-conversion]
               bufpt[++idx] = cThousand;
                              ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27902:20: warning: conversion to ‘char’ from ‘etByte {aka unsigned char}’ may change the sign of the result [-Wsign-conversion]
           prefix = flag_prefix;
                    ^~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27913:11: warning: incompatible implicit declaration of built-in function ‘memcpy’
           memcpy(&u, &rx, sizeof(u));
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27913:11: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:27915:50: warning: conversion to ‘double’ from ‘long double’ may alter its value [-Wfloat-conversion]
           if( precision+(ex/3) < 15 ) rounder += realvalue*3e-16;
                                                  ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27936:13: warning: incompatible implicit declaration of built-in function ‘memcpy’
             memcpy(buf+(prefix!=0),"Inf",4);
             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:27936:13: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:27976:19: warning: conversion to ‘etByte {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
         flag_dp = (precision>0 ?1:0) | flag_alternateform | flag_altform2;
                   ^
sqlite-snapshot-201909031623/sqlite3.c:28054:32: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
           *(va_arg(ap,int*)) = pAccum->nChar;
                                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:28068:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[0] = c = *(bufpt++);
                      ^
sqlite-snapshot-201909031623/sqlite3.c:28080:22: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
             buf[0] = ch & 0xff;
                      ^~
sqlite-snapshot-201909031623/sqlite3.c:28083:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[0] = 0xc0 + (u8)((ch>>6)&0x1f);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:28084:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[1] = 0x80 + (u8)(ch & 0x3f);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:28087:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[0] = 0xe0 + (u8)((ch>>12)&0x0f);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:28088:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[1] = 0x80 + (u8)((ch>>6) & 0x3f);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:28089:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[2] = 0x80 + (u8)(ch & 0x3f);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:28092:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[0] = 0xf0 + (u8)((ch>>18) & 0x07);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:28093:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[1] = 0x80 + (u8)((ch>>12) & 0x3f);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:28094:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[2] = 0x80 + (u8)((ch>>6) & 0x3f);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:28095:22: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[3] = 0x80 + (u8)(ch & 0x3f);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:28134:30: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             pAccum->nAlloc = sqlite3DbMallocSize(pAccum->db, bufpt);
                              ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:28135:47: warning: incompatible implicit declaration of built-in function ‘strlen’
             pAccum->nChar = 0x7fffffff & (int)strlen(bufpt);
                                               ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:28135:47: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:28155:38: warning: incompatible implicit declaration of built-in function ‘strlen’
           length = 0x7fffffff & (int)strlen(bufpt);
                                      ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:28155:38: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:28218:62: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
           sqlite3_str_append(pAccum, (const char*)pToken->z, pToken->n);
                                                              ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3StrAccumEnlarge’:
sqlite-snapshot-201909031623/sqlite3.c:28287:33: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     return p->nAlloc - p->nChar - 1;
            ~~~~~~~~~~~~~~~~~~~~~^~~
sqlite-snapshot-201909031623/sqlite3.c:28302:19: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       p->nAlloc = (int)szNew;
                   ^
sqlite-snapshot-201909031623/sqlite3.c:28311:42: warning: incompatible implicit declaration of built-in function ‘memcpy’
       if( !isMalloced(p) && p->nChar>0 ) memcpy(zNew, p->zText, p->nChar);
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:28311:42: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:28313:19: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       p->nAlloc = sqlite3DbMallocSize(p->db, zNew);
                   ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘enlargeAndAppend’:
sqlite-snapshot-201909031623/sqlite3.c:28346:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&p->zText[p->nChar], z, N);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:28346:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:28346:36: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(&p->zText[p->nChar], z, N);
                                    ^
sqlite-snapshot-201909031623/sqlite3.c:28347:14: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     p->nChar += N;
              ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_str_append’:
sqlite-snapshot-201909031623/sqlite3.c:28360:15: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   if( p->nChar+N >= p->nAlloc ){
               ^
sqlite-snapshot-201909031623/sqlite3.c:28364:14: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     p->nChar += N;
              ^~
sqlite-snapshot-201909031623/sqlite3.c:28365:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&p->zText[p->nChar-N], z, N);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:28365:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:28365:30: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(&p->zText[p->nChar-N], z, N);
                              ^
sqlite-snapshot-201909031623/sqlite3.c:28365:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(&p->zText[p->nChar-N], z, N);
                                      ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘strAccumFinishRealloc’:
sqlite-snapshot-201909031623/sqlite3.c:28387:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(zText, p->zText, p->nChar+1);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:28387:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_str_length’:
sqlite-snapshot-201909031623/sqlite3.c:28435:23: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   return p ? p->nChar : 0;
          ~~~~~~~~~~~~~^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_str_reset’:
sqlite-snapshot-201909031623/sqlite3.c:28451:23: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     p->printfFlags &= ~SQLITE_PRINTF_MALLOCED;
                       ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3StrAccumInit’:
sqlite-snapshot-201909031623/sqlite3.c:28475:15: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->nAlloc = n;
               ^
sqlite-snapshot-201909031623/sqlite3.c:28476:16: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->mxAlloc = mx;
                ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_randomness’:
sqlite-snapshot-201909031623/sqlite3.c:29466:18: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
 # define wsdPrng sqlite3Prng
                  ^
sqlite-snapshot-201909031623/sqlite3.c:29507:20: note: in expansion of macro ‘wsdPrng’
       wsdPrng.j += wsdPrng.s[i] + k[i];
                    ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29519:18: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     wsdPrng.j += t;
                  ^
sqlite-snapshot-201909031623/sqlite3.c:29466:18: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
 # define wsdPrng sqlite3Prng
                  ^
sqlite-snapshot-201909031623/sqlite3.c:29522:10: note: in expansion of macro ‘wsdPrng’
     t += wsdPrng.s[wsdPrng.i];
          ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PrngSaveState’:
sqlite-snapshot-201909031623/sqlite3.c:29540:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29540:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PrngRestoreState’:
sqlite-snapshot-201909031623/sqlite3.c:29547:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29547:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: At top level:
sqlite-snapshot-201909031623/sqlite3.c:29599:3: error: unknown type name ‘pthread_t’
   pthread_t tid;                 /* Thread ID */
   ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ThreadCreate’:
sqlite-snapshot-201909031623/sqlite3.c:29623:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(*p));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29623:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:29633:10: warning: implicit declaration of function ‘pthread_create’ [-Wimplicit-function-declaration]
     rc = pthread_create(&p->tid, 0, xTask, pIn);
          ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ThreadJoin’:
sqlite-snapshot-201909031623/sqlite3.c:29653:10: warning: implicit declaration of function ‘pthread_join’ [-Wimplicit-function-declaration]
     rc = pthread_join(p->tid, ppOut) ? SQLITE_ERROR : SQLITE_OK;
          ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemTranslate’:
sqlite-snapshot-201909031623/sqlite3.c:30107:39: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   zOut = sqlite3DbMallocRaw(pMem->db, len);
                                       ^~~
sqlite-snapshot-201909031623/sqlite3.c:29943:5: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   c += ((*zIn++)<<8);                                                 \
     ^
sqlite-snapshot-201909031623/sqlite3.c:30135:9: note: in expansion of macro ‘READ_UTF16LE’
         READ_UTF16LE(zIn, zIn<zTerm, c);
         ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29902:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0xC0 + (u8)((c>>6)&0x1F);                \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30136:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29903:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)(c & 0x3F);                   \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30136:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29906:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0xE0 + (u8)((c>>12)&0x0F);               \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30136:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29907:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)((c>>6) & 0x3F);              \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30136:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29908:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)(c & 0x3F);                   \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30136:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29910:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0xF0 + (u8)((c>>18) & 0x07);             \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30136:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29911:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)((c>>12) & 0x3F);             \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30136:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29912:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)((c>>6) & 0x3F);              \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30136:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29913:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)(c & 0x3F);                   \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30136:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29952:7: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   c = ((*zIn++)<<8);                                                  \
       ^
sqlite-snapshot-201909031623/sqlite3.c:30141:9: note: in expansion of macro ‘READ_UTF16BE’
         READ_UTF16BE(zIn, zIn<zTerm, c);
         ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29902:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0xC0 + (u8)((c>>6)&0x1F);                \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30142:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29903:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)(c & 0x3F);                   \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30142:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29906:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0xE0 + (u8)((c>>12)&0x0F);               \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30142:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29907:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)((c>>6) & 0x3F);              \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30142:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29908:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)(c & 0x3F);                   \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30142:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29910:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0xF0 + (u8)((c>>18) & 0x07);             \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30142:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29911:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)((c>>12) & 0x3F);             \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30142:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29912:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)((c>>6) & 0x3F);              \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30142:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:29913:15: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     *zOut++ = 0x80 + (u8)(c & 0x3F);                   \
               ^
sqlite-snapshot-201909031623/sqlite3.c:30142:9: note: in expansion of macro ‘WRITE_UTF8’
         WRITE_UTF8(z, c);
         ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20320:23: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘unsigned int’ may alter its value [-Wconversion]
 #define MEM_Str       0x0002   /* Value is a string */
                       ^
sqlite-snapshot-201909031623/sqlite3.c:30152:17: note: in expansion of macro ‘MEM_Str’
   pMem->flags = MEM_Str|MEM_Term|(c&(MEM_AffMask|MEM_Subtype));
                 ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemHandleBom’:
sqlite-snapshot-201909031623/sqlite3.c:30200:7: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
       memmove(pMem->z, &pMem->z[2], pMem->n);
       ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:30200:7: warning: incompatible implicit declaration of built-in function ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:30200:7: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:30200:37: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memmove(pMem->z, &pMem->z[2], pMem->n);
                                     ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Utf16to8’:
sqlite-snapshot-201909031623/sqlite3.c:30274:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&m, 0, sizeof(m));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:30274:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3IsNaN’:
sqlite-snapshot-201909031623/sqlite3.c:30432:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&y,&x,sizeof(y));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:30432:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Strlen30’:
sqlite-snapshot-201909031623/sqlite3.c:30447:28: warning: incompatible implicit declaration of built-in function ‘strlen’
   return 0x3fffffff & (int)strlen(z);
                            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:30447:28: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ColumnType’:
sqlite-snapshot-201909031623/sqlite3.c:30459:24: warning: incompatible implicit declaration of built-in function ‘strlen’
   return pCol->zName + strlen(pCol->zName) + 1;
                        ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:30459:24: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3TokenInit’:
sqlite-snapshot-201909031623/sqlite3.c:30629:10: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->n = sqlite3Strlen30(z);
          ^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3AtoF’:
sqlite-snapshot-201909031623/sqlite3.c:30897:22: warning: conversion to ‘double’ from ‘long double’ may alter its value [-Wfloat-conversion]
             result = s / scale;
                      ^
sqlite-snapshot-201909031623/sqlite3.c:30900:22: warning: conversion to ‘double’ from ‘long double’ may alter its value [-Wfloat-conversion]
             result = s * scale;
                      ^
sqlite-snapshot-201909031623/sqlite3.c:30905:25: warning: conversion to ‘double’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
             result = 0.0*s;
                         ^
sqlite-snapshot-201909031623/sqlite3.c:30908:30: warning: conversion to ‘float’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
             result = INFINITY*s;
                              ^
sqlite-snapshot-201909031623/sqlite3.c:30917:20: warning: conversion to ‘double’ from ‘long double’ may alter its value [-Wfloat-conversion]
           result = s / scale;
                    ^
sqlite-snapshot-201909031623/sqlite3.c:30919:20: warning: conversion to ‘double’ from ‘long double’ may alter its value [-Wfloat-conversion]
           result = s * scale;
                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Atoi64’:
sqlite-snapshot-201909031623/sqlite3.c:31021:14: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     u = u*10 + c - '0';
              ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3DecOrHexToI64’:
sqlite-snapshot-201909031623/sqlite3.c:31101:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pOut, &u, 8);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:31101:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3GetInt32’:
sqlite-snapshot-201909031623/sqlite3.c:31142:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pValue, &u, 4);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:31142:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PutVarint’:
sqlite-snapshot-201909031623/sqlite3.c:31244:12: warning: conversion to ‘unsigned char’ from ‘u64 {aka long long unsigned int}’ may alter its value [-Wconversion]
     p[0] = ((v>>7)&0x7f)|0x80;
            ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Get4byte’:
sqlite-snapshot-201909031623/sqlite3.c:31569:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&x,p,4);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:31569:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Put4byte’:
sqlite-snapshot-201909031623/sqlite3.c:31585:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(p,&x,4);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:31585:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3HexToBlob’:
sqlite-snapshot-201909031623/sqlite3.c:31626:44: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   zBlob = (char *)sqlite3DbMallocRawNN(db, n/2 + 1);
                                            ^
sqlite-snapshot-201909031623/sqlite3.c:31630:20: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
       zBlob[i/2] = (sqlite3HexToInt(z[i])<<4) | sqlite3HexToInt(z[i+1]);
                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3LogEstAdd’:
sqlite-snapshot-201909031623/sqlite3.c:31819:26: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     if( a>b+31 ) return a+1;
                         ~^~
sqlite-snapshot-201909031623/sqlite3.c:31820:13: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     return a+x[a-b];
            ~^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:31823:26: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     if( b>a+31 ) return b+1;
                         ~^~
sqlite-snapshot-201909031623/sqlite3.c:31824:13: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     return b+x[b-a];
            ~^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3LogEst’:
sqlite-snapshot-201909031623/sqlite3.c:31837:25: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     while( x<8 ){  y -= 10; x <<= 1; }
                         ^~
sqlite-snapshot-201909031623/sqlite3.c:31841:10: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     y += i*10;
          ^
sqlite-snapshot-201909031623/sqlite3.c:31848:21: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   return a[x&7] + y - 10;
          ~~~~~~~~~~~^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3LogEstFromDouble’:
sqlite-snapshot-201909031623/sqlite3.c:31862:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&a, &x, 8);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:31862:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:31863:7: warning: conversion to ‘LogEst {aka short int}’ from ‘u64 {aka long long unsigned int}’ may alter its value [-Wconversion]
   e = (a>>52) - 1022;
       ^
sqlite-snapshot-201909031623/sqlite3.c:31864:11: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   return e*10;
          ~^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VListAdd’:
sqlite-snapshot-201909031623/sqlite3.c:31947:51: warning: conversion to ‘long long unsigned int’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     VList *pOut = sqlite3DbRealloc(db, pIn, nAlloc*sizeof(int));
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:31951:14: warning: conversion to ‘VList {aka int}’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
     pIn[0] = nAlloc;
              ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:31959:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(z, zName, nName);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:31959:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:31959:20: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(z, zName, nName);
                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VListNameToNum’:
sqlite-snapshot-201909031623/sqlite3.c:31992:9: warning: implicit declaration of function ‘strncmp’ [-Wimplicit-function-declaration]
     if( strncmp(z,zName,nName)==0 && z[nName]==0 ) return pIn[i];
         ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘rehash’:
sqlite-snapshot-201909031623/sqlite3.c:32131:52: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pH->htsize = new_size = sqlite3MallocSize(new_ht)/sizeof(struct _ht);
                                                    ^
sqlite-snapshot-201909031623/sqlite3.c:32131:27: warning: conversion to ‘unsigned int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   pH->htsize = new_size = sqlite3MallocSize(new_ht)/sizeof(struct _ht);
                           ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:32132:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(new_ht, 0, new_size*sizeof(struct _ht));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:32132:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
In file included from sqlite-snapshot-201909031623/sqlite3.c:32553:0:
../../include/sys/types.h: In function ‘__bitcount16’:
../../include/sys/types.h:327:7: warning: conversion to ‘__uint16_t {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
  _x = (_x & 0x5555) + ((_x & 0xaaaa) >> 1);
       ^
../../include/sys/types.h:328:7: warning: conversion to ‘__uint16_t {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
  _x = (_x & 0x3333) + ((_x & 0xcccc) >> 2);
       ^
sqlite-snapshot-201909031623/sqlite3.c: At top level:
sqlite-snapshot-201909031623/sqlite3.c:33036:42: error: ‘close’ undeclared here (not in a function)
   { "close",        (sqlite3_syscall_ptr)close,      0  },
                                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:33036:21: error: initializer element is not constant
   { "close",        (sqlite3_syscall_ptr)close,      0  },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33036:21: note: (near initialization for ‘aSyscall[1].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33039:42: error: ‘access’ undeclared here (not in a function)
   { "access",       (sqlite3_syscall_ptr)access,     0  },
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:33039:21: error: initializer element is not constant
   { "access",       (sqlite3_syscall_ptr)access,     0  },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33039:21: note: (near initialization for ‘aSyscall[2].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33042:42: error: ‘getcwd’ undeclared here (not in a function)
   { "getcwd",       (sqlite3_syscall_ptr)getcwd,     0  },
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:33042:21: error: initializer element is not constant
   { "getcwd",       (sqlite3_syscall_ptr)getcwd,     0  },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33042:21: note: (near initialization for ‘aSyscall[3].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33062:42: error: ‘ftruncate’ undeclared here (not in a function)
   { "ftruncate",    (sqlite3_syscall_ptr)ftruncate,  0  },
                                          ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:33062:21: error: initializer element is not constant
   { "ftruncate",    (sqlite3_syscall_ptr)ftruncate,  0  },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33062:21: note: (near initialization for ‘aSyscall[6].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33068:42: error: ‘read’ undeclared here (not in a function)
   { "read",         (sqlite3_syscall_ptr)read,       0  },
                                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:33068:21: error: initializer element is not constant
   { "read",         (sqlite3_syscall_ptr)read,       0  },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33068:21: note: (near initialization for ‘aSyscall[8].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33085:42: error: ‘write’ undeclared here (not in a function)
   { "write",        (sqlite3_syscall_ptr)write,      0  },
                                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:33085:21: error: initializer element is not constant
   { "write",        (sqlite3_syscall_ptr)write,      0  },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33085:21: note: (near initialization for ‘aSyscall[11].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33114:42: error: ‘unlink’ undeclared here (not in a function)
   { "unlink",       (sqlite3_syscall_ptr)unlink,           0 },
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:33114:21: error: initializer element is not constant
   { "unlink",       (sqlite3_syscall_ptr)unlink,           0 },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33114:21: note: (near initialization for ‘aSyscall[16].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33123:42: error: ‘rmdir’ undeclared here (not in a function)
   { "rmdir",        (sqlite3_syscall_ptr)rmdir,           0 },
                                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:33123:21: error: initializer element is not constant
   { "rmdir",        (sqlite3_syscall_ptr)rmdir,           0 },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33123:21: note: (near initialization for ‘aSyscall[19].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33127:42: error: ‘fchown’ undeclared here (not in a function)
   { "fchown",       (sqlite3_syscall_ptr)fchown,          0 },
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:33127:21: error: initializer element is not constant
   { "fchown",       (sqlite3_syscall_ptr)fchown,          0 },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33127:21: note: (near initialization for ‘aSyscall[20].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33134:42: error: ‘geteuid’ undeclared here (not in a function)
   { "geteuid",      (sqlite3_syscall_ptr)geteuid,         0 },
                                          ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:33134:21: error: initializer element is not constant
   { "geteuid",      (sqlite3_syscall_ptr)geteuid,         0 },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33134:21: note: (near initialization for ‘aSyscall[21].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33155:42: error: ‘mremap’ undeclared here (not in a function)
   { "mremap",       (sqlite3_syscall_ptr)mremap,          0 },
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:33155:21: error: initializer element is not constant
   { "mremap",       (sqlite3_syscall_ptr)mremap,          0 },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33155:21: note: (near initialization for ‘aSyscall[24].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c:33169:42: error: ‘readlink’ undeclared here (not in a function)
   { "readlink",     (sqlite3_syscall_ptr)readlink,        0 },
                                          ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:33169:21: error: initializer element is not constant
   { "readlink",     (sqlite3_syscall_ptr)readlink,        0 },
                     ^
sqlite-snapshot-201909031623/sqlite3.c:33169:21: note: (near initialization for ‘aSyscall[26].pCurrent’)
sqlite-snapshot-201909031623/sqlite3.c: In function ‘closePendingFds’:
sqlite-snapshot-201909031623/sqlite3.c:33953:11: warning: implicit declaration of function ‘unixFileMutexHeld’ [-Wimplicit-function-declaration]
   assert( unixFileMutexHeld(pFile) );
           ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘releaseInodeInfo’:
sqlite-snapshot-201909031623/sqlite3.c:33970:11: warning: implicit declaration of function ‘unixMutexHeld’ [-Wimplicit-function-declaration]
   assert( unixMutexHeld() );
           ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:33971:11: warning: implicit declaration of function ‘unixFileMutexNotheld’ [-Wimplicit-function-declaration]
   assert( unixFileMutexNotheld(pFile) );
           ^~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘findInodeInfo’:
sqlite-snapshot-201909031623/sqlite3.c:34055:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&fileId, 0, sizeof(fileId));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:34055:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:34064:20: warning: implicit declaration of function ‘memcmp’ [-Wimplicit-function-declaration]
   while( pInode && memcmp(&fileId, &pInode->fileId, sizeof(fileId)) ){
                    ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:34073:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&pInode->fileId, &fileId, sizeof(fileId));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:34073:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixLock’:
sqlite-snapshot-201909031623/sqlite3.c:34507:24: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     pFile->eFileLock = eFileLock;
                        ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:34508:25: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     pInode->eFileLock = eFileLock;
                         ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘posixUnlock’:
sqlite-snapshot-201909031623/sqlite3.c:34696:24: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     pFile->eFileLock = eFileLock;
                        ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘closeUnixFile’:
sqlite-snapshot-201909031623/sqlite3.c:34758:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pFile, 0, sizeof(unixFile));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:34758:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘dotlockLock’:
sqlite-snapshot-201909031623/sqlite3.c:34929:24: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     pFile->eFileLock = eFileLock;
                        ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:34934:5: warning: implicit declaration of function ‘utimes’ [-Wimplicit-function-declaration]
     utimes(zLockFile, NULL);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:34956:22: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
   pFile->eFileLock = eFileLock;
                      ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘seekAndRead’:
sqlite-snapshot-201909031623/sqlite3.c:35943:17: warning: implicit declaration of function ‘lseek’ [-Wimplicit-function-declaration]
     newOffset = lseek(id->h, offset, SEEK_SET);
                 ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:35949:31: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     got = osRead(id->h, pBuf, cnt);
                               ^~~
sqlite-snapshot-201909031623/sqlite3.c:33069:21: warning: conversion to ‘int’ from ‘ssize_t {aka long int}’ may alter its value [-Wconversion]
 #define osRead      ((ssize_t(*)(int,void*,size_t))aSyscall[8].pCurrent)
                     ^
sqlite-snapshot-201909031623/sqlite3.c:35949:11: note: in expansion of macro ‘osRead’
     got = osRead(id->h, pBuf, cnt);
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixRead’:
sqlite-snapshot-201909031623/sqlite3.c:36001:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pBuf, &((u8 *)(pFile->pMapRegion))[offset], amt);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:36001:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:36001:58: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(pBuf, &((u8 *)(pFile->pMapRegion))[offset], amt);
                                                          ^~~
sqlite-snapshot-201909031623/sqlite3.c:36004:19: warning: conversion to ‘int’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
       int nCopy = pFile->mmapSize - offset;
                   ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:36005:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pBuf, &((u8 *)(pFile->pMapRegion))[offset], nCopy);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:36005:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:36005:58: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(pBuf, &((u8 *)(pFile->pMapRegion))[offset], nCopy);
                                                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:36022:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&((char*)pBuf)[got], 0, amt-got);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:36022:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:36022:36: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(&((char*)pBuf)[got], 0, amt-got);
                                    ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘seekAndWriteFd’:
sqlite-snapshot-201909031623/sqlite3.c:36061:28: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     rc = osWrite(fd, pBuf, nBuf);
                            ^~~~
sqlite-snapshot-201909031623/sqlite3.c:33086:21: warning: conversion to ‘int’ from ‘ssize_t {aka long int}’ may alter its value [-Wconversion]
 #define osWrite     ((ssize_t(*)(int,const void*,size_t))aSyscall[11].pCurrent)
                     ^
sqlite-snapshot-201909031623/sqlite3.c:36061:10: note: in expansion of macro ‘osWrite’
     rc = osWrite(fd, pBuf, nBuf);
          ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘full_fsync’:
sqlite-snapshot-201909031623/sqlite3.c:36185:20: warning: implicit declaration of function ‘fsync’ [-Wimplicit-function-declaration]
 # define fdatasync fsync
                    ^
sqlite-snapshot-201909031623/sqlite3.c:36283:8: note: in expansion of macro ‘fdatasync’
   rc = fdatasync(fd);
        ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘openDirectory’:
sqlite-snapshot-201909031623/sqlite3.c:36326:15: warning: incompatible implicit declaration of built-in function ‘strlen’
   for(ii=(int)strlen(zDirname); ii>0 && zDirname[ii]!='/'; ii--);
               ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:36326:15: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixSync’:
sqlite-snapshot-201909031623/sqlite3.c:36399:25: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
     pFile->ctrlFlags &= ~UNIXFILE_DIRSYNC;
                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixModeBit’:
sqlite-snapshot-201909031623/sqlite3.c:36568:25: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
     pFile->ctrlFlags &= ~mask;
                         ^
sqlite-snapshot-201909031623/sqlite3.c:36570:25: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
     pFile->ctrlFlags |= mask;
                         ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixFileControl’:
sqlite-snapshot-201909031623/sqlite3.c:36630:40: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       char *zTFile = sqlite3_malloc64( pFile->pVfs->mxPathname );
                                        ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixGetpagesize’:
sqlite-snapshot-201909031623/sqlite3.c:36850:15: warning: implicit declaration of function ‘sysconf’ [-Wimplicit-function-declaration]
   return (int)sysconf(_SC_PAGESIZE);
               ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:36850:23: error: ‘_SC_PAGESIZE’ undeclared (first use in this function)
   return (int)sysconf(_SC_PAGESIZE);
                       ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixShmSystemLock’:
sqlite-snapshot-201909031623/sqlite3.c:36963:16: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
     f.l_type = lockType;
                ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixShmPurge’:
sqlite-snapshot-201909031623/sqlite3.c:37042:34: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         osMunmap(p->apRegion[i], p->szRegion);
                                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixOpenSharedMemory’:
sqlite-snapshot-201909031623/sqlite3.c:37166:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(*p));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:37166:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:37194:29: warning: incompatible implicit declaration of built-in function ‘strlen’
     nShmFilename = 6 + (int)strlen(zBasePath);
                             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:37194:29: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:37196:52: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pShmNode = sqlite3_malloc64( sizeof(*pShmNode) + nShmFilename );
                                                    ^
sqlite-snapshot-201909031623/sqlite3.c:37201:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(pShmNode, 0, sizeof(*pShmNode)+nShmFilename);
                                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixShmMap’:
sqlite-snapshot-201909031623/sqlite3.c:37369:19: warning: conversion to ‘int’ from ‘off_t {aka long int}’ may alter its value [-Wconversion]
           for(iPg=(sStat.st_size/pgsz); iPg<(nByte/pgsz); iPg++){
                   ^
sqlite-snapshot-201909031623/sqlite3.c:37383:39: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pShmNode->apRegion, nReqRegion*sizeof(char *)
                                       ^
sqlite-snapshot-201909031623/sqlite3.c:37383:29: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
         pShmNode->apRegion, nReqRegion*sizeof(char *)
                             ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:37395:26: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pMem = osMmap(0, nMap,
                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:37404:33: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pMem = sqlite3_malloc64(nMap);
                                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:37409:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(pMem, 0, nMap);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:37409:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:37409:25: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memset(pMem, 0, nMap);
                         ^~~~
sqlite-snapshot-201909031623/sqlite3.c:37415:28: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pShmNode->nRegion += nShmPerMap;
                            ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixShmLock’:
sqlite-snapshot-201909031623/sqlite3.c:37463:10: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   mask = (1<<(ofst+n)) - (1<<ofst);
          ^
sqlite-snapshot-201909031623/sqlite3.c:37485:22: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       p->exclMask &= ~mask;
                      ^
sqlite-snapshot-201909031623/sqlite3.c:37486:24: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       p->sharedMask &= ~mask;
                        ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixUnmapfile’:
sqlite-snapshot-201909031623/sqlite3.c:37629:31: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     osMunmap(pFd->pMapRegion, pFd->mmapSizeActual);
                               ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixRemapfile’:
sqlite-snapshot-201909031623/sqlite3.c:37684:22: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
       osMunmap(pReq, nOrig-nReuse);
                      ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:37688:42: error: ‘MREMAP_MAYMOVE’ undeclared (first use in this function)
     pNew = osMremap(pOrig, nReuse, nNew, MREMAP_MAYMOVE);
                                          ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:37688:28: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     pNew = osMremap(pOrig, nReuse, nNew, MREMAP_MAYMOVE);
                            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:37688:36: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     pNew = osMremap(pOrig, nReuse, nNew, MREMAP_MAYMOVE);
                                    ^~~~
sqlite-snapshot-201909031623/sqlite3.c:37688:42: warning: passing argument 4 of ‘(void * (*)(void *, size_t,  size_t,  int))aSyscall[24].pCurrent’ makes integer from pointer without a cast [-Wint-conversion]
     pNew = osMremap(pOrig, nReuse, nNew, MREMAP_MAYMOVE);
                                          ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:37688:42: note: expected ‘int’ but argument is of type ‘struct unix_syscall *’
sqlite-snapshot-201909031623/sqlite3.c:37704:23: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
       osMunmap(pOrig, nReuse);
                       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:37710:22: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     pNew = osMmap(0, nNew, flags, MAP_SHARED, h, 0);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘fillInUnixFile’:
sqlite-snapshot-201909031623/sqlite3.c:38260:22: warning: incompatible implicit declaration of built-in function ‘strlen’
     nFilename = (int)strlen(zFilename) + 6;
                      ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38260:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:38261:42: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     zLockFile = (char *)sqlite3_malloc64(nFilename);
                                          ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixTempFileDir’:
sqlite-snapshot-201909031623/sqlite3.c:38330:32: warning: implicit declaration of function ‘getenv’ [-Wimplicit-function-declaration]
   if( !azDirs[0] ) azDirs[0] = getenv("SQLITE_TMPDIR");
                                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38330:30: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
   if( !azDirs[0] ) azDirs[0] = getenv("SQLITE_TMPDIR");
                              ^
sqlite-snapshot-201909031623/sqlite3.c:38331:30: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
   if( !azDirs[1] ) azDirs[1] = getenv("TMPDIR");
                              ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘findCreateFileMode’:
sqlite-snapshot-201909031623/sqlite3.c:38526:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(zDb, zPath, nDb);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38526:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:38526:24: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(zDb, zPath, nDb);
                        ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixOpen’:
sqlite-snapshot-201909031623/sqlite3.c:38577:20: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   int eType = flags&0xFFFFFF00;  /* Type of file to open */
                    ^
sqlite-snapshot-201909031623/sqlite3.c:38577:15: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
   int eType = flags&0xFFFFFF00;  /* Type of file to open */
               ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:32634:28: warning: implicit declaration of function ‘getpid’ [-Wimplicit-function-declaration]
 #define osGetpid(X) (pid_t)getpid()
                            ^
sqlite-snapshot-201909031623/sqlite3.c:38641:22: note: in expansion of macro ‘osGetpid’
   if( randomnessPid!=osGetpid(0) ){
                      ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38645:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(unixFile));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38645:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:38663:48: warning: incompatible implicit declaration of built-in function ‘strlen’
     assert( (flags & SQLITE_OPEN_URI) || zName[strlen(zName)+1]==0 );
                                                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38663:48: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:38676:19: warning: incompatible implicit declaration of built-in function ‘strlen’
     assert( zName[strlen(zName)+1]==0 );
                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38676:19: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:38703:57: error: ‘F_OK’ undeclared (first use in this function)
       if( isNewJrnl && errno==EACCES && osAccess(zName, F_OK) ){
                                                         ^~~~
sqlite-snapshot-201909031623/sqlite3.c:38703:57: warning: passing argument 2 of ‘(int (*)(const char *, int))aSyscall[2].pCurrent’ makes integer from pointer without a cast [-Wint-conversion]
sqlite-snapshot-201909031623/sqlite3.c:38703:57: note: expected ‘int’ but argument is of type ‘struct unix_syscall *’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixAccess’:
sqlite-snapshot-201909031623/sqlite3.c:38899:32: error: ‘W_OK’ undeclared (first use in this function)
     *pResOut = osAccess(zPath, W_OK|R_OK)==0;
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:38899:37: error: ‘R_OK’ undeclared (first use in this function)
     *pResOut = osAccess(zPath, W_OK|R_OK)==0;
                                     ^~~~
sqlite-snapshot-201909031623/sqlite3.c:38899:36: error: invalid operands to binary | (have ‘struct unix_syscall *’ and ‘struct unix_syscall *’)
     *pResOut = osAccess(zPath, W_OK|R_OK)==0;
                                ~~~~^
sqlite-snapshot-201909031623/sqlite3.c:38899:32: warning: passing argument 2 of ‘(int (*)(const char *, int))aSyscall[2].pCurrent’ makes integer from pointer without a cast [-Wint-conversion]
     *pResOut = osAccess(zPath, W_OK|R_OK)==0;
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:38899:32: note: expected ‘int’ but argument is of type ‘struct unix_syscall *’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘mkFullPathname’:
sqlite-snapshot-201909031623/sqlite3.c:38915:24: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if( osGetcwd(zOut, nOut-2)==0 ){
                        ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixFullPathname’:
sqlite-snapshot-201909031623/sqlite3.c:38988:39: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nByte = osReadlink(zIn, zDel, nOut-1);
                                       ^~~~
sqlite-snapshot-201909031623/sqlite3.c:33173:20: warning: conversion to ‘int’ from ‘ssize_t {aka long int}’ may alter its value [-Wconversion]
 #define osReadlink ((ssize_t(*)(const char*,char*,size_t))aSyscall[26].pCurrent)
                    ^
sqlite-snapshot-201909031623/sqlite3.c:38988:17: note: in expansion of macro ‘osReadlink’
         nByte = osReadlink(zIn, zDel, nOut-1);
                 ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38998:15: warning: incompatible implicit declaration of built-in function ‘memmove’
               memmove(&zDel[n], zDel, nByte+1);
               ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38998:15: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:38998:39: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
               memmove(&zDel[n], zDel, nByte+1);
                                       ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:38999:15: warning: incompatible implicit declaration of built-in function ‘memcpy’
               memcpy(zDel, zIn, n);
               ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:38999:15: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:38999:33: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
               memcpy(zDel, zIn, n);
                                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixRandomness’:
sqlite-snapshot-201909031623/sqlite3.c:39105:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(zBuf, 0, nBuf);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:39105:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:39105:19: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(zBuf, 0, nBuf);
                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c:39114:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(zBuf, &t, sizeof(t));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:39114:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:39119:34: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       do{ got = osRead(fd, zBuf, nBuf); }while( got<0 && errno==EINTR );
                                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c:33069:21: warning: conversion to ‘int’ from ‘ssize_t {aka long int}’ may alter its value [-Wconversion]
 #define osRead      ((ssize_t(*)(int,void*,size_t))aSyscall[8].pCurrent)
                     ^
sqlite-snapshot-201909031623/sqlite3.c:39119:17: note: in expansion of macro ‘osRead’
       do{ got = osRead(fd, zBuf, nBuf); }while( got<0 && errno==EINTR );
                 ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixSleep’:
sqlite-snapshot-201909031623/sqlite3.c:39151:3: warning: implicit declaration of function ‘sleep’ [-Wimplicit-function-declaration]
   sleep(seconds);
   ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixCurrentTimeInt64’:
sqlite-snapshot-201909031623/sqlite3.c:39188:18: error: storage size of ‘sNow’ isn’t known
   struct timeval sNow;
                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c:39189:9: warning: implicit declaration of function ‘gettimeofday’ [-Wimplicit-function-declaration]
   (void)gettimeofday(&sNow, 0);  /* Cannot fail given valid arguments */
         ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:39190:48: error: ‘(struct unix_syscall *)&<erroneous-expression>’ is a pointer; did you mean to use ‘->’?
   *piNow = unixEpoch + 1000*(sqlite3_int64)sNow.tv_sec + sNow.tv_usec/1000;
                                                ^
                                                ->
sqlite-snapshot-201909031623/sqlite3.c:39190:62: error: ‘(struct unix_syscall *)&<erroneous-expression>’ is a pointer; did you mean to use ‘->’?
   *piNow = unixEpoch + 1000*(sqlite3_int64)sNow.tv_sec + sNow.tv_usec/1000;
                                                              ^
                                                              ->
sqlite-snapshot-201909031623/sqlite3.c:39190:70: error: invalid operands to binary / (have ‘struct unix_syscall *’ and ‘int’)
   *piNow = unixEpoch + 1000*(sqlite3_int64)sNow.tv_sec + sNow.tv_usec/1000;
                                                        ~             ^
sqlite-snapshot-201909031623/sqlite3.c:39190:10: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
   *piNow = unixEpoch + 1000*(sqlite3_int64)sNow.tv_sec + sNow.tv_usec/1000;
          ^
sqlite-snapshot-201909031623/sqlite3.c:39188:18: warning: unused variable ‘sNow’ [-Wunused-variable]
   struct timeval sNow;
                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unixCurrentTime’:
sqlite-snapshot-201909031623/sqlite3.c:39213:13: warning: conversion to ‘double’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
   *prNow = i/86400000.0;
             ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BitvecSet’:
sqlite-snapshot-201909031623/sqlite3.c:47686:38: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     p->u.aBitmap[i/BITVEC_SZELEM] |= 1 << (i&(BITVEC_SZELEM-1));
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:47718:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(aiValues, p->u.aHash, sizeof(p->u.aHash));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:47718:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:47719:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(p->u.apSub, 0, sizeof(p->u.apSub));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:47719:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:47720:21: warning: conversion to ‘u32 {aka unsigned int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
       p->iDivisor = (p->iSize + BITVEC_NPTR - 1)/BITVEC_NPTR;
                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BitvecClear’:
sqlite-snapshot-201909031623/sqlite3.c:47754:38: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     p->u.aBitmap[i/BITVEC_SZELEM] &= ~(1 << (i&(BITVEC_SZELEM-1)));
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:47758:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(aiValues, p->u.aHash, sizeof(p->u.aHash));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:47758:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:47759:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(p->u.aHash, 0, sizeof(p->u.aHash));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:47759:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BitvecBuiltinTest’:
sqlite-snapshot-201909031623/sqlite3.c:47847:34: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pBitvec = sqlite3BitvecCreate( sz );
                                  ^~
sqlite-snapshot-201909031623/sqlite3.c:47848:27: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pV = sqlite3MallocZero( (sz+7)/8 + 1 );
                           ^
sqlite-snapshot-201909031623/sqlite3.c:47804:37: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
 #define SETBIT(V,I)      V[I>>3] |= (1<<(I&7))
                                     ^
sqlite-snapshot-201909031623/sqlite3.c:47880:7: note: in expansion of macro ‘SETBIT’
       SETBIT(pV, (i+1));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:47882:39: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         if( sqlite3BitvecSet(pBitvec, i+1) ) goto bitvec_end;
                                       ^
sqlite-snapshot-201909031623/sqlite3.c:47805:37: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
 #define CLEARBIT(V,I)    V[I>>3] &= ~(1<<(I&7))
                                     ^
sqlite-snapshot-201909031623/sqlite3.c:47885:7: note: in expansion of macro ‘CLEARBIT’
       CLEARBIT(pV, (i+1));
       ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:47886:35: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       sqlite3BitvecClear(pBitvec, i+1, pTmpSpace);
                                   ^
sqlite-snapshot-201909031623/sqlite3.c:47895:60: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   rc = sqlite3BitvecTest(0,0) + sqlite3BitvecTest(pBitvec, sz+1)
                                                            ^~
sqlite-snapshot-201909031623/sqlite3.c:47897:41: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           + (sqlite3BitvecSize(pBitvec) - sz);
                                         ^
sqlite-snapshot-201909031623/sqlite3.c:47897:11: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           + (sqlite3BitvecSize(pBitvec) - sz);
           ^
sqlite-snapshot-201909031623/sqlite3.c:47895:8: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   rc = sqlite3BitvecTest(0,0) + sqlite3BitvecTest(pBitvec, sz+1)
        ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:47899:53: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if(  (TESTBIT(pV,i))!=sqlite3BitvecTest(pBitvec,i) ){
                                                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PcacheOpen’:
sqlite-snapshot-201909031623/sqlite3.c:48216:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(PCache));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:48216:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:48220:19: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   p->bPurgeable = bPurgeable;
                   ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PcacheSetPageSize’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:48239:43: note: in expansion of macro ‘ROUND8’
                 szPage, pCache->szExtra + ROUND8(sizeof(PgHdr)),
                                           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:48239:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 szPage, pCache->szExtra + ROUND8(sizeof(PgHdr)),
                                         ^
sqlite-snapshot-201909031623/sqlite3.c:48239:25: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
                 szPage, pCache->szExtra + ROUND8(sizeof(PgHdr)),
                         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcacheFetchFinishWithInit’:
sqlite-snapshot-201909031623/sqlite3.c:48384:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&pPgHdr->pDirty, 0, sizeof(PgHdr) - offsetof(PgHdr,pDirty));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:48384:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PcacheFetchFinish’:
sqlite-snapshot-201909031623/sqlite3.c:48416:11: warning: implicit declaration of function ‘sqlite3PcachePageSanity’ [-Wimplicit-function-declaration]
   assert( sqlite3PcachePageSanity(pPgHdr) );
           ^~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PcacheMakeDirty’:
sqlite-snapshot-201909031623/sqlite3.c:48469:17: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     p->flags &= ~PGHDR_DONT_WRITE;
                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PcacheMakeClean’:
sqlite-snapshot-201909031623/sqlite3.c:48489:15: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   p->flags &= ~(PGHDR_DIRTY|PGHDR_NEED_SYNC|PGHDR_WRITEABLE);
               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PcacheClearWritable’:
sqlite-snapshot-201909031623/sqlite3.c:48516:17: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     p->flags &= ~(PGHDR_NEED_SYNC|PGHDR_WRITEABLE);
                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PcacheClearSyncFlags’:
sqlite-snapshot-201909031623/sqlite3.c:48527:17: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     p->flags &= ~PGHDR_NEED_SYNC;
                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PcacheTruncate’:
sqlite-snapshot-201909031623/sqlite3.c:48579:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(pPage1->pBuf, 0, pCache->szPage);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:48579:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:48579:33: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memset(pPage1->pBuf, 0, pCache->szPage);
                                 ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcacheSortDirtyList’:
sqlite-snapshot-201909031623/sqlite3.c:48647:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(a, 0, sizeof(a));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:48647:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3HeaderSizePcache’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:48762:58: note: in expansion of macro ‘ROUND8’
 SQLITE_PRIVATE int sqlite3HeaderSizePcache(void){ return ROUND8(sizeof(PgHdr)); }
                                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1InitBulk’:
sqlite-snapshot-201909031623/sqlite3.c:49105:42: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   zBulk = pCache->pBulk = sqlite3Malloc( szBulk );
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1Alloc’:
sqlite-snapshot-201909031623/sqlite3.c:49153:23: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     p = sqlite3Malloc(nByte);
                       ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1TruncateUnsafe’:
sqlite-snapshot-201909031623/sqlite3.c:49489:11: error: ‘nPage’ undeclared (first use in this function)
   assert( nPage<0 || pCache->nPage==(unsigned)nPage );
           ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:49489:37: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   assert( nPage<0 || pCache->nPage==(unsigned)nPage );
                                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1Init’:
sqlite-snapshot-201909031623/sqlite3.c:49501:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&pcache1, 0, sizeof(pcache1));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:49501:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1Shutdown’:
sqlite-snapshot-201909031623/sqlite3.c:49554:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&pcache1, 0, sizeof(pcache1));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:49554:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1Create’:
sqlite-snapshot-201909031623/sqlite3.c:49573:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   sz = sizeof(PCache1) + sizeof(PGroup)*pcache1.separateCache;
                                        ^
sqlite-snapshot-201909031623/sqlite3.c:49573:8: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   sz = sizeof(PCache1) + sizeof(PGroup)*pcache1.separateCache;
        ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:49574:41: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pCache = (PCache1 *)sqlite3MallocZero(sz);
                                         ^~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:49590:42: note: in expansion of macro ‘ROUND8’
     pCache->szAlloc = szPage + szExtra + ROUND8(sizeof(PgHdr1));
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:49590:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pCache->szAlloc = szPage + szExtra + ROUND8(sizeof(PgHdr1));
                                        ^
sqlite-snapshot-201909031623/sqlite3.c:49590:23: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
     pCache->szAlloc = szPage + szExtra + ROUND8(sizeof(PgHdr1));
                       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1Cachesize’:
sqlite-snapshot-201909031623/sqlite3.c:49620:31: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pGroup->nMaxPage += (nMax - pCache->nMax);
                               ^
sqlite-snapshot-201909031623/sqlite3.c:49622:20: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pCache->nMax = nMax;
                    ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1Shrink’:
sqlite-snapshot-201909031623/sqlite3.c:49640:20: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
     savedMaxPage = pGroup->nMaxPage;
                    ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:49643:24: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pGroup->nMaxPage = savedMaxPage;
                        ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1Pagecount’:
sqlite-snapshot-201909031623/sqlite3.c:49655:7: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
   n = pCache->nPage;
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1FetchStage2’:
sqlite-snapshot-201909031623/sqlite3.c:49709:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pGroup->nPurgeable -= (pOther->bPurgeable - pCache->bPurgeable);
                          ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pcache1Fetch’:
sqlite-snapshot-201909031623/sqlite3.c:49852:11: error: ‘pCache’ undeclared (first use in this function)
   assert( pCache->bPurgeable || createFlag!=1 );
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:49852:17: error: ‘struct unix_syscall’ has no member named ‘bPurgeable’
   assert( pCache->bPurgeable || createFlag!=1 );
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:49853:17: error: ‘struct unix_syscall’ has no member named ‘bPurgeable’
   assert( pCache->bPurgeable || pCache->nMin==0 );
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:49853:39: error: ‘struct unix_syscall’ has no member named ‘nMin’
   assert( pCache->bPurgeable || pCache->nMin==0 );
                                       ^~
sqlite-snapshot-201909031623/sqlite3.c:49854:17: error: ‘struct unix_syscall’ has no member named ‘bPurgeable’
   assert( pCache->bPurgeable==0 || pCache->nMin==10 );
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:49854:42: error: ‘struct unix_syscall’ has no member named ‘nMin’
   assert( pCache->bPurgeable==0 || pCache->nMin==10 );
                                          ^~
sqlite-snapshot-201909031623/sqlite3.c:49854:48: warning: comparison between pointer and integer
   assert( pCache->bPurgeable==0 || pCache->nMin==10 );
                                                ^~
sqlite-snapshot-201909031623/sqlite3.c:49855:17: error: ‘struct unix_syscall’ has no member named ‘nMin’
   assert( pCache->nMin==0 || pCache->bPurgeable );
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:49855:36: error: ‘struct unix_syscall’ has no member named ‘bPurgeable’
   assert( pCache->nMin==0 || pCache->bPurgeable );
                                    ^~
sqlite-snapshot-201909031623/sqlite3.c:49856:17: error: ‘struct unix_syscall’ has no member named ‘nHash’
   assert( pCache->nHash>0 );
                 ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3HeaderSizePcache1’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:50008:59: note: in expansion of macro ‘ROUND8’
 SQLITE_PRIVATE int sqlite3HeaderSizePcache1(void){ return ROUND8(sizeof(PgHdr1)); }
                                                           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3RowSetInit’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:50217:39: note: in expansion of macro ‘ROUND8’
     p->pFresh = (struct RowSetEntry*)(ROUND8(sizeof(*p)) + (char*)p);
                                       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:50218:28: note: in expansion of macro ‘ROUND8’
     p->nFresh = (u16)((N - ROUND8(sizeof(*p)))/sizeof(struct RowSetEntry));
                            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:50218:26: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     p->nFresh = (u16)((N - ROUND8(sizeof(*p)))/sizeof(struct RowSetEntry));
                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3RowSetInsert’:
sqlite-snapshot-201909031623/sqlite3.c:50304:21: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       p->rsFlags &= ~ROWSET_SORTED;
                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘rowSetEntrySort’:
sqlite-snapshot-201909031623/sqlite3.c:50358:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(aBucket, 0, sizeof(aBucket));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:50358:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘readMasterJournal’:
sqlite-snapshot-201909031623/sqlite3.c:52081:54: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
    || SQLITE_OK!=(rc = sqlite3OsRead(pJrnl, zMaster, len, szJ-16-len))
                                                      ^~~
sqlite-snapshot-201909031623/sqlite3.c:52088:11: warning: conversion to ‘u32 {aka unsigned int}’ from ‘char’ may change the sign of the result [-Wsign-conversion]
     cksum -= zMaster[u];
           ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘writeJournalHdr’:
sqlite-snapshot-201909031623/sqlite3.c:52250:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(zHeader, aJournalMagic, sizeof(aJournalMagic));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:52250:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:52253:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(zHeader, 0, sizeof(aJournalMagic)+4);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:52253:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:52265:49: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   put32bits(&zHeader[sizeof(aJournalMagic)+16], pPager->pageSize);
                                                 ^
sqlite-snapshot-201909031623/sqlite3.c:51876:48: note: in definition of macro ‘put32bits’
 #define put32bits(A,B)  sqlite3Put4byte((u8*)A,B)
                                                ^
sqlite-snapshot-201909031623/sqlite3.c:52272:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&zHeader[sizeof(aJournalMagic)+20], 0,
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:52272:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:52294:47: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     rc = sqlite3OsWrite(pPager->jfd, zHeader, nHeader, pPager->journalOff);
                                               ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘readJournalHdr’:
sqlite-snapshot-201909031623/sqlite3.c:52384:19: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       iPageSize = pPager->pageSize;
                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘writeMasterJournal’:
sqlite-snapshot-201909031623/sqlite3.c:52465:11: warning: conversion to ‘u32 {aka unsigned int}’ from ‘char’ may change the sign of the result [-Wsign-conversion]
     cksum += zMaster[nMaster];
           ^~
sqlite-snapshot-201909031623/sqlite3.c:52482:63: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    || (0 != (rc = write32bits(pPager->jfd, iHdrOff+4+nMaster, nMaster)))
                                                               ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pager_end_transaction’:
sqlite-snapshot-201909031623/sqlite3.c:52790:11: warning: implicit declaration of function ‘assert_pager_state’ [-Wimplicit-function-declaration]
   assert( assert_pager_state(pPager) );
           ^~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pager_playback_one_page’:
sqlite-snapshot-201909031623/sqlite3.c:53224:27: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pPager->doNotSpill &= ~SPILLFLAG_ROLLBACK;
                           ^
sqlite-snapshot-201909031623/sqlite3.c:53237:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pData, (u8*)aData, pPager->pageSize);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:53237:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:53237:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pData, (u8*)aData, pPager->pageSize);
                               ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pager_delmaster’:
sqlite-snapshot-201909031623/sqlite3.c:53317:47: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pMaster = (sqlite3_file *)sqlite3MallocZero(pVfs->szOsFile * 2);
                                               ^~~~
sqlite-snapshot-201909031623/sqlite3.c:53335:34: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   zMasterJournal = sqlite3Malloc(nMasterJournal + nMasterPtr + 1);
                                  ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:53364:52: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       rc = readMasterJournal(pJournal, zMasterPtr, nMasterPtr);
                                                    ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pager_truncate’:
sqlite-snapshot-201909031623/sqlite3.c:53432:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(pTmp, 0, szPage);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:53432:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:53432:25: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memset(pTmp, 0, szPage);
                         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘setSectorSize’:
sqlite-snapshot-201909031623/sqlite3.c:53495:26: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pPager->sectorSize = sqlite3SectorSize(pPager->fd);
                          ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pager_playback’:
sqlite-snapshot-201909031623/sqlite3.c:53567:23: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   u32 savedPageSize = pPager->pageSize;
                       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:53590:48: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   rc = readMasterJournal(pPager->jfd, zMaster, pPager->pVfs->mxPathname+1);
                                                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:53626:14: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       nRec = (int)((szJ - JOURNAL_HDR_SZ(pPager))/JOURNAL_PG_SZ(pPager));
              ^
sqlite-snapshot-201909031623/sqlite3.c:53645:14: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       nRec = (int)((szJ - pPager->journalOff) / JOURNAL_PG_SZ(pPager));
              ^
sqlite-snapshot-201909031623/sqlite3.c:53722:50: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     rc = readMasterJournal(pPager->jfd, zMaster, pPager->pVfs->mxPathname+1);
                                                  ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘readDbPage’:
sqlite-snapshot-201909031623/sqlite3.c:53807:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(pPager->dbFileVers, 0xff, sizeof(pPager->dbFileVers));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:53807:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:53810:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(&pPager->dbFileVers, dbFileVers, sizeof(pPager->dbFileVers));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:53810:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerSetFlags’:
sqlite-snapshot-201909031623/sqlite3.c:54381:26: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pPager->walSyncFlags = (pPager->syncFlags<<2);
                          ^
sqlite-snapshot-201909031623/sqlite3.c:54389:27: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pPager->doNotSpill &= ~SPILLFLAG_OFF;
                           ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerSetPagesize’:
sqlite-snapshot-201909031623/sqlite3.c:54531:40: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       pNew = (char *)sqlite3PageMalloc(pageSize+8);
                                        ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:54535:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(pNew+pageSize, 0, 8);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:54535:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:54541:54: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       rc = sqlite3PcacheSetPageSize(pPager->pPCache, pageSize);
                                                      ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:54547:26: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       pPager->pageSize = pageSize;
                          ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:54553:16: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   *pPageSize = pPager->pageSize;
                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerMaxPageCount’:
sqlite-snapshot-201909031623/sqlite3.c:54585:22: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pPager->mxPgno = mxPage;
                      ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:54592:16: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   return pPager->mxPgno;
          ~~~~~~^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerReadFileheader’:
sqlite-snapshot-201909031623/sqlite3.c:54635:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pDest, 0, N);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:54635:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:54635:20: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(pDest, 0, N);
                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pagerAcquireMapPage’:
sqlite-snapshot-201909031623/sqlite3.c:54812:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(p->pExtra, 0, 8);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:54812:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘syncJournal’:
sqlite-snapshot-201909031623/sqlite3.c:55062:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(zHeader, aJournalMagic, sizeof(aJournalMagic));
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55062:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:55063:52: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         put32bits(&zHeader[sizeof(aJournalMagic)], pPager->nRec);
                                                    ^
sqlite-snapshot-201909031623/sqlite3.c:51876:48: note: in definition of macro ‘put32bits’
 #define put32bits(A,B)  sqlite3Put4byte((u8*)A,B)
                                                ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pager_write_pagelist’:
sqlite-snapshot-201909031623/sqlite3.c:55175:44: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     rc = pagerOpentemp(pPager, pPager->fd, pPager->vfsFlags);
                                            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55220:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(&pPager->dbFileVers, &pData[24], sizeof(pPager->dbFileVers));
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55220:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘subjournalPage’:
sqlite-snapshot-201909031623/sqlite3.c:55288:13: warning: implicit declaration of function ‘pageInJournal’ [-Wimplicit-function-declaration]
          || pageInJournal(pPager, pPg)
             ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerOpen’:
sqlite-snapshot-201909031623/sqlite3.c:55528:39: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     zPathname = sqlite3DbMallocRaw(0, nPathname*2);
                                       ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:55570:5: note: in expansion of macro ‘ROUND8’
     ROUND8(sizeof(*pPager)) +      /* Pager structure */
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55570:29: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ROUND8(sizeof(*pPager)) +      /* Pager structure */
                             ^
sqlite-snapshot-201909031623/sqlite3.c:55571:24: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ROUND8(pcacheSize) +           /* PCache object */
                        ^
sqlite-snapshot-201909031623/sqlite3.c:55572:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ROUND8(pVfs->szOsFile) +       /* The main db file */
                            ^
sqlite-snapshot-201909031623/sqlite3.c:55573:25: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     journalFileSize * 2 +          /* The two journal files */
                         ^
sqlite-snapshot-201909031623/sqlite3.c:55574:19: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nPathname + 1 + nUri +         /* zFilename */
                   ^
sqlite-snapshot-201909031623/sqlite3.c:55574:26: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nPathname + 1 + nUri +         /* zFilename */
                          ^
sqlite-snapshot-201909031623/sqlite3.c:55577:5: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     + nPathname + 4 + 2            /* zWal */
     ^
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:55586:42: note: in expansion of macro ‘ROUND8’
   pPager->pPCache =    (PCache*)(pPtr += ROUND8(sizeof(*pPager)));
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55597:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pPager->zFilename, zPathname, nPathname);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55597:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:55597:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pPager->zFilename, zPathname, nPathname);
                                          ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55598:62: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUri);
                                                              ^~~~
sqlite-snapshot-201909031623/sqlite3.c:55599:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pPager->zJournal, zPathname, nPathname);
                                         ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55604:37: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pPager->zWal, zPathname, nPathname);
                                     ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55611:22: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pPager->vfsFlags = vfsFlags;
                      ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55658:24: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       pPager->noLock = sqlite3_uri_boolean(zFilename, "nolock", 0);
                        ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:55697:28: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     rc = sqlite3PcacheOpen(szPageDflt, nExtra, !memDb,
                            ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerSharedLock’:
sqlite-snapshot-201909031623/sqlite3.c:56081:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(dbFileVers, 0, sizeof(dbFileVers));
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:56081:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘getPageNormal’:
sqlite-snapshot-201909031623/sqlite3.c:56277:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(pPg->pData, 0, pPager->pageSize);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:56277:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:56277:29: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset(pPg->pData, 0, pPager->pageSize);
                             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerUnrefNotNull’:
sqlite-snapshot-201909031623/sqlite3.c:56444:33: error: ‘pPager’ undeclared (first use in this function)
   assert( sqlite3PcacheRefCount(pPager->pPCache)>0 );
                                 ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:56444:39: error: ‘struct unix_syscall’ has no member named ‘pPCache’
   assert( sqlite3PcacheRefCount(pPager->pPCache)>0 );
                                       ^~
sqlite-snapshot-201909031623/sqlite3.c:56444:33: warning: passing argument 1 of ‘sqlite3PcacheRefCount’ from incompatible pointer type [-Wincompatible-pointer-types]
   assert( sqlite3PcacheRefCount(pPager->pPCache)>0 );
                                 ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:48693:20: note: expected ‘PCache * {aka struct PCache *}’ but argument is of type ‘struct unix_syscall *’
 SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){
                    ^~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pagerWriteLargeSector’:
sqlite-snapshot-201909031623/sqlite3.c:56797:44: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   Pgno nPagePerSector = (pPager->sectorSize/pPager->pageSize);
                                            ^
sqlite-snapshot-201909031623/sqlite3.c:56815:13: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     nPage = (pPg->pgno - pg1)+1;
             ^
sqlite-snapshot-201909031623/sqlite3.c:56817:13: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     nPage = nPageCount+1-pg1;
             ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:56819:13: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     nPage = nPagePerSector;
             ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:56823:14: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   assert((pg1+nPage)>pPg->pgno);
              ^
sqlite-snapshot-201909031623/sqlite3.c:56826:18: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     Pgno pg = pg1+ii;
                  ^
sqlite-snapshot-201909031623/sqlite3.c:56856:52: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       PgHdr *pPage = sqlite3PagerLookup(pPager, pg1+ii);
                                                    ^
sqlite-snapshot-201909031623/sqlite3.c:56865:25: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pPager->doNotSpill &= ~SPILLFLAG_NOSYNC;
                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerDontWrite’:
sqlite-snapshot-201909031623/sqlite3.c:56938:19: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pPg->flags &= ~PGHDR_WRITEABLE;
                   ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pager_incr_changecounter’:
sqlite-snapshot-201909031623/sqlite3.c:57028:11: warning: incompatible implicit declaration of built-in function ‘memcpy’
           memcpy(&pPager->dbFileVers, pCopy, sizeof(pPager->dbFileVers));
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:57028:11: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerMemUsed’:
sqlite-snapshot-201909031623/sqlite3.c:57478:55: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   int perPageSize = pPager->pageSize + pPager->nExtra + sizeof(PgHdr)
                                                       ^
sqlite-snapshot-201909031623/sqlite3.c:57478:21: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   int perPageSize = pPager->pageSize + pPager->nExtra + sizeof(PgHdr)
                     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pagerOpenSavepoint’:
sqlite-snapshot-201909031623/sqlite3.c:57576:49: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pPager->aSavepoint, sizeof(PagerSavepoint)*nSavepoint
                                                 ^
sqlite-snapshot-201909031623/sqlite3.c:57581:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&aNew[nCurrent], 0, (nSavepoint-nCurrent) * sizeof(PagerSavepoint));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:57581:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:57581:52: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(&aNew[nCurrent], 0, (nSavepoint-nCurrent) * sizeof(PagerSavepoint));
                                                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PagerMovepage’:
sqlite-snapshot-201909031623/sqlite3.c:57915:17: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pPg->flags &= ~PGHDR_NEED_SYNC;
                 ^
sqlite-snapshot-201909031623/sqlite3.c:57923:19: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pPg->flags |= (pPgOld->flags&PGHDR_NEED_SYNC);
                   ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walIndexPageRealloc’:
sqlite-snapshot-201909031623/sqlite3.c:59051:39: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     sqlite3_int64 nByte = sizeof(u32*)*(iPage+1);
                                       ^
sqlite-snapshot-201909031623/sqlite3.c:59051:27: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     sqlite3_int64 nByte = sizeof(u32*)*(iPage+1);
                           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59053:72: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     apNew = (volatile u32 **)sqlite3_realloc64((void *)pWal->apWiData, nByte);
                                                                        ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:59058:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset((void*)&apNew[pWal->nWiData], 0,
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59058:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:59059:24: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
            sizeof(u32*)*(iPage+1-pWal->nWiData));
                        ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walIndexWriteHdr’:
sqlite-snapshot-201909031623/sqlite3.c:59193:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy((void*)&aHdr[1], (const void*)&pWal->hdr, sizeof(WalIndexHdr));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59193:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walEncodeFrame’:
sqlite-snapshot-201909031623/sqlite3.c:59224:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&aFrame[8], pWal->hdr.aSalt, 8);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59224:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:59228:42: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     walChecksumBytes(nativeCksum, aData, pWal->szPage, aCksum, aCksum);
                                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:59233:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&aFrame[8], 0, 16);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59233:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walDecodeFrame’:
sqlite-snapshot-201909031623/sqlite3.c:59275:40: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   walChecksumBytes(nativeCksum, aData, pWal->szPage, aCksum, aCksum);
                                        ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walHashGet’:
sqlite-snapshot-201909031623/sqlite3.c:59411:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pLoc->iZero = HASHTABLE_NPAGE_ONE + (iHash-1)*HASHTABLE_NPAGE;
                                         ^
sqlite-snapshot-201909031623/sqlite3.c:59021:30: warning: conversion to ‘u32 {aka unsigned int}’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define HASHTABLE_NPAGE_ONE  (HASHTABLE_NPAGE - (WALINDEX_HDR_SIZE/sizeof(u32)))
                              ^
sqlite-snapshot-201909031623/sqlite3.c:59411:21: note: in expansion of macro ‘HASHTABLE_NPAGE_ONE’
       pLoc->iZero = HASHTABLE_NPAGE_ONE + (iHash-1)*HASHTABLE_NPAGE;
                     ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walFramePage’:
sqlite-snapshot-201909031623/sqlite3.c:59425:15: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   int iHash = (iFrame+HASHTABLE_NPAGE-HASHTABLE_NPAGE_ONE-1) / HASHTABLE_NPAGE;
               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walCleanupHash’:
sqlite-snapshot-201909031623/sqlite3.c:59484:12: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   iLimit = pWal->hdr.mxFrame - sLoc.iZero;
            ^~~~
sqlite-snapshot-201909031623/sqlite3.c:59496:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset((void *)&sLoc.aPgno[iLimit+1], 0, nByte);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59496:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:59496:44: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset((void *)&sLoc.aPgno[iLimit+1], 0, nByte);
                                            ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walIndexAppend’:
sqlite-snapshot-201909031623/sqlite3.c:59534:11: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     idx = iFrame - sLoc.iZero;
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59543:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset((void*)&sLoc.aPgno[1], 0, nByte);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59543:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:59543:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset((void*)&sLoc.aPgno[1], 0, nByte);
                                        ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walIndexRecover’:
sqlite-snapshot-201909031623/sqlite3.c:59640:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&pWal->hdr, 0, sizeof(WalIndexHdr));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59640:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:59671:14: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     szPage = sqlite3Get4byte(&aBuf[8]);
              ^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59680:20: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pWal->szPage = szPage;
                    ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59682:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&pWal->hdr.aSalt, &aBuf[16], 8);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59682:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:59704:37: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     aFrame = (u8 *)sqlite3_malloc64(szFrame);
                                     ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59723:33: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       rc = walIndexAppend(pWal, iFrame, pgno);
                                 ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59728:29: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pWal->hdr.mxFrame = iFrame;
                             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WalOpen’:
sqlite-snapshot-201909031623/sqlite3.c:59844:46: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pRet = (Wal*)sqlite3MallocZero(sizeof(Wal) + pVfs->szOsFile);
                                              ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walIteratorNext’:
sqlite-snapshot-201909031623/sqlite3.c:59908:10: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   iMin = p->iPrior;
          ^
sqlite-snapshot-201909031623/sqlite3.c:59917:22: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           *piFrame = pSegment->iZero + pSegment->aIndex[pSegment->iNext];
                      ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59925:25: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   *piPage = p->iPrior = iRet;
                         ^~~~
sqlite-snapshot-201909031623/sqlite3.c:59925:13: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   *piPage = p->iPrior = iRet;
             ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walMerge’:
sqlite-snapshot-201909031623/sqlite3.c:59989:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(aLeft, aTmp, sizeof(aTmp[0])*iOut);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:59989:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:59989:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(aLeft, aTmp, sizeof(aTmp[0])*iOut);
                                      ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walMergesort’:
sqlite-snapshot-201909031623/sqlite3.c:60027:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(aSub, 0, sizeof(aSub));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:60027:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walIteratorInit’:
sqlite-snapshot-201909031623/sqlite3.c:60107:23: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         + (nSegment-1)*sizeof(struct WalSegment)
                       ^
sqlite-snapshot-201909031623/sqlite3.c:60106:11: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
   nByte = sizeof(WalIterator)
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:60109:39: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   p = (WalIterator *)sqlite3_malloc64(nByte);
                                       ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:60113:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, nByte);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:60113:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:60113:16: warning: conversion to ‘long unsigned int’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   memset(p, 0, nByte);
                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:60148:30: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       p->aSegment[i].iZero = sLoc.iZero;
                              ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walRestartHdr’:
sqlite-snapshot-201909031623/sqlite3.c:60216:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&pWal->hdr.aSalt[1], &salt1, 4);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:60216:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walIndexTryHdr’:
sqlite-snapshot-201909031623/sqlite3.c:60556:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&h1, (void *)&aHdr[0], sizeof(h1));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:60556:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:60574:20: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pWal->szPage = (pWal->hdr.szPage&0xfe00) + ((pWal->hdr.szPage&0x0001)<<16);
                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walBeginShmUnreliable’:
sqlite-snapshot-201909031623/sqlite3.c:60779:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&pWal->hdr, (void*)walIndexHdr(pWal), sizeof(WalIndexHdr));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:60779:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:60815:35: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   aFrame = (u8 *)sqlite3_malloc64(szFrame);
                                   ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WalFindFrame’:
sqlite-snapshot-201909031623/sqlite3.c:61333:36: error: ‘Wal {aka struct Wal}’ has no member named ‘lockError’
   assert( pWal->readLock>=0 || pWal->lockError );
                                    ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WalUndo’:
sqlite-snapshot-201909031623/sqlite3.c:61534:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&pWal->hdr, (void *)walIndexHdr(pWal), sizeof(WalIndexHdr));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:61534:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walWriteOneFrame’:
sqlite-snapshot-201909031623/sqlite3.c:61718:40: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   walEncodeFrame(p->pWal, pPage->pgno, nTruncate, pData, aFrame);
                                        ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:61722:50: warning: conversion to ‘long long unsigned int’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   rc = walWriteToLog(p, pData, p->szPage, iOffset+sizeof(aFrame));
                                                  ^
sqlite-snapshot-201909031623/sqlite3.c:61722:43: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long long unsigned int’ may change the sign of the result [-Wsign-conversion]
   rc = walWriteToLog(p, pData, p->szPage, iOffset+sizeof(aFrame));
                                           ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘walRewriteChecksums’:
sqlite-snapshot-201909031623/sqlite3.c:61735:22: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   const int szPage = pWal->szPage;/* Database page size */
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WalFrames’:
sqlite-snapshot-201909031623/sqlite3.c:61839:34: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     sqlite3Put4byte(&aWalHdr[8], szPage);
                                  ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:61842:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&aWalHdr[16], pWal->hdr.aSalt, 8);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:61842:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:61847:20: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pWal->szPage = szPage;
                    ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:61907:21: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         p->flags &= ~PGHDR_WAL_APPEND;
                     ^
sqlite-snapshot-201909031623/sqlite3.c:61914:15: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     nDbSize = (isCommit && p->pDirty==0) ? nTruncate : 0;
               ^
sqlite-snapshot-201909031623/sqlite3.c:61950:42: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
         rc = walWriteOneFrame(&w, pLast, nTruncate, iOffset);
                                          ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:61969:30: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if( walFrameOffset(iFrame+nExtra+1, szPage)>pWal->mxWalSize ){
                              ^
sqlite-snapshot-201909031623/sqlite3.c:58917:19: note: in definition of macro ‘walFrameOffset’
   WAL_HDRSIZE + ((iFrame)-1)*(i64)((szPage)+WAL_FRAME_HDRSIZE)         \
                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:61970:33: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       sz = walFrameOffset(iFrame+nExtra+1, szPage);
                                 ^
sqlite-snapshot-201909031623/sqlite3.c:58917:19: note: in definition of macro ‘walFrameOffset’
   WAL_HDRSIZE + ((iFrame)-1)*(i64)((szPage)+WAL_FRAME_HDRSIZE)         \
                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WalCheckpoint’:
sqlite-snapshot-201909031623/sqlite3.c:62119:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&pWal->hdr, 0, sizeof(WalIndexHdr));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:62119:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WalExclusiveMode’:
sqlite-snapshot-201909031623/sqlite3.c:62179:36: error: ‘Wal {aka struct Wal}’ has no member named ‘lockError’
   assert( pWal->readLock>=0 || pWal->lockError );
                                    ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeEnterAll’:
sqlite-snapshot-201909031623/sqlite3.c:63236:23: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   db->noSharedCache = skipOk;
                       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘querySharedCacheTableLock’:
sqlite-snapshot-201909031623/sqlite3.c:63628:11: warning: implicit declaration of function ‘sqlite3BtreeHoldsMutex’ [-Wimplicit-function-declaration]
   assert( sqlite3BtreeHoldsMutex(p) );
           ^~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘clearAllSharedCacheTableLocks’:
sqlite-snapshot-201909031623/sqlite3.c:63786:22: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pBt->btsFlags &= ~(BTS_EXCLUSIVE|BTS_PENDING);
                      ^
sqlite-snapshot-201909031623/sqlite3.c:63797:22: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pBt->btsFlags &= ~BTS_PENDING;
                      ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘downgradeAllSharedCacheTableLocks’:
sqlite-snapshot-201909031623/sqlite3.c:63809:22: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pBt->btsFlags &= ~(BTS_EXCLUSIVE|BTS_PENDING);
                      ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘invalidateAllOverflowCache’:
sqlite-snapshot-201909031623/sqlite3.c:63851:58: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
 #define invalidateOverflowCache(pCur) (pCur->curFlags &= ~BTCF_ValidOvfl)
                                                          ^
sqlite-snapshot-201909031623/sqlite3.c:63861:5: note: in expansion of macro ‘invalidateOverflowCache’
     invalidateOverflowCache(p);
     ^~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘saveCursorKey’:
sqlite-snapshot-201909031623/sqlite3.c:64006:11: warning: implicit declaration of function ‘cursorHoldsMutex’ [-Wimplicit-function-declaration]
   assert( cursorHoldsMutex(pCur) );
           ^~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64020:27: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     pKey = sqlite3Malloc( pCur->nKey + 9 + 8 );
                           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:64022:41: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       rc = sqlite3BtreePayload(pCur, 0, (int)pCur->nKey, pKey);
                                         ^
sqlite-snapshot-201909031623/sqlite3.c:64024:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(((u8*)pKey)+pCur->nKey, 0, 9+8);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64024:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘saveCursorPosition’:
sqlite-snapshot-201909031623/sqlite3.c:64063:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pCur->curFlags &= ~(BTCF_ValidNKey|BTCF_ValidOvfl|BTCF_AtLast);
                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘saveAllCursors’:
sqlite-snapshot-201909031623/sqlite3.c:64099:38: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   if( pExcept ) pExcept->curFlags &= ~BTCF_Multiple;
                                      ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeRestoreCursorPosition’:
sqlite-snapshot-201909031623/sqlite3.c:64186:11: warning: implicit declaration of function ‘cursorOwnsBtShared’ [-Wimplicit-function-declaration]
   assert( cursorOwnsBtShared(pCur) );
           ^~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeCursorHintFlags’:
sqlite-snapshot-201909031623/sqlite3.c:64292:17: warning: conversion to ‘u8 {aka unsigned char}’ from ‘unsigned int’ may alter its value [-Wconversion]
   pCur->hints = x;
                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘ptrmapPageno’:
sqlite-snapshot-201909031623/sqlite3.c:64311:22: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   nPagesPerMapPage = (pBt->usableSize/5)+1;
                      ^
sqlite-snapshot-201909031623/sqlite3.c:64312:21: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   iPtrMap = (pgno-2)/nPagesPerMapPage;
                     ^
sqlite-snapshot-201909031623/sqlite3.c:64313:17: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   ret = (iPtrMap*nPagesPerMapPage) + 2;
                 ^
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64314:12: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   if( ret==PENDING_BYTE_PAGE(pBt) ){
            ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘ptrmapPut’:
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62944:52: note: in definition of macro ‘PTRMAP_PAGENO’
 #define PTRMAP_PAGENO(pBt, pgno) ptrmapPageno(pBt, pgno)
                                                    ^~~~
sqlite-snapshot-201909031623/sqlite3.c:64341:14: note: in expansion of macro ‘PTRMAP_ISPAGE’
   assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );
              ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64341:33: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );
                                 ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62946:65: note: in definition of macro ‘PTRMAP_ISPAGE’
 #define PTRMAP_ISPAGE(pBt, pgno) (PTRMAP_PAGENO((pBt),(pgno))==(pgno))
                                                                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64341:33: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   assert( 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) );
                                 ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:62945:42: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define PTRMAP_PTROFFSET(pgptrmap, pgno) (5*(pgno-pgptrmap-1))
                                          ^
sqlite-snapshot-201909031623/sqlite3.c:64361:12: note: in expansion of macro ‘PTRMAP_PTROFFSET’
   offset = PTRMAP_PTROFFSET(iPtrmap, key);
            ^~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘ptrmapGet’:
sqlite-snapshot-201909031623/sqlite3.c:62944:34: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define PTRMAP_PAGENO(pBt, pgno) ptrmapPageno(pBt, pgno)
                                  ^
sqlite-snapshot-201909031623/sqlite3.c:64398:13: note: in expansion of macro ‘PTRMAP_PAGENO’
   iPtrmap = PTRMAP_PAGENO(pBt, key);
             ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64399:37: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   rc = sqlite3PagerGet(pBt->pPager, iPtrmap, &pDbPage, 0);
                                     ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:62945:50: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PTRMAP_PTROFFSET(pgptrmap, pgno) (5*(pgno-pgptrmap-1))
                                                  ^
sqlite-snapshot-201909031623/sqlite3.c:64405:12: note: in expansion of macro ‘PTRMAP_PTROFFSET’
   offset = PTRMAP_PTROFFSET(iPtrmap, key);
            ^~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:62945:42: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define PTRMAP_PTROFFSET(pgptrmap, pgno) (5*(pgno-pgptrmap-1))
                                          ^
sqlite-snapshot-201909031623/sqlite3.c:64405:12: note: in expansion of macro ‘PTRMAP_PTROFFSET’
   offset = PTRMAP_PTROFFSET(iPtrmap, key);
            ^~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeParseCellAdjustSizeForOverflow’:
sqlite-snapshot-201909031623/sqlite3.c:64468:41: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   surplus = minLocal + (pInfo->nPayload - minLocal)%(pPage->pBt->usableSize-4);
                                         ^
sqlite-snapshot-201909031623/sqlite3.c:64468:22: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   surplus = minLocal + (pInfo->nPayload - minLocal)%(pPage->pBt->usableSize-4);
                      ^
sqlite-snapshot-201909031623/sqlite3.c:64468:13: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   surplus = minLocal + (pInfo->nPayload - minLocal)%(pPage->pBt->usableSize-4);
             ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64476:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pInfo->nSize = (u16)(&pInfo->pPayload[pInfo->nLocal] - pCell) + 4;
                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeParseCellPtrNoPayload’:
sqlite-snapshot-201909031623/sqlite3.c:64504:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pInfo->nSize = 4 + getVarint(&pCell[4], (u64*)&pInfo->nKey);
                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeParseCellPtr’:
sqlite-snapshot-201909031623/sqlite3.c:64571:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
     pInfo->nSize = nPayload + (u16)(pIter - pCell);
                    ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeParseCellPtrIndex’:
sqlite-snapshot-201909031623/sqlite3.c:64608:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
     pInfo->nSize = nPayload + (u16)(pIter - pCell);
                    ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘cellSizePtr’:
sqlite-snapshot-201909031623/sqlite3.c:64672:31: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nSize = minLocal + (nSize - minLocal) % (pPage->pBt->usableSize - 4);
                               ^
sqlite-snapshot-201909031623/sqlite3.c:64672:22: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nSize = minLocal + (nSize - minLocal) % (pPage->pBt->usableSize - 4);
                      ^
sqlite-snapshot-201909031623/sqlite3.c:64676:15: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       nSize = minLocal;
               ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64678:11: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nSize += 4 + (u16)(pIter - pCell);
           ^~
sqlite-snapshot-201909031623/sqlite3.c:64680:18: error: ‘debuginfo’ undeclared (first use in this function)
   assert( nSize==debuginfo.nSize || CORRUPT_DB );
                  ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64680:27: error: ‘(struct unix_syscall *)&<erroneous-expression>’ is a pointer; did you mean to use ‘->’?
   assert( nSize==debuginfo.nSize || CORRUPT_DB );
                           ^
                           ->
sqlite-snapshot-201909031623/sqlite3.c:64680:16: warning: comparison between pointer and integer
   assert( nSize==debuginfo.nSize || CORRUPT_DB );
                ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘cellSizePtrNoPayload’:
sqlite-snapshot-201909031623/sqlite3.c:64701:11: error: ‘debuginfo’ undeclared (first use in this function)
   assert( debuginfo.nSize==(u16)(pIter - pCell) || CORRUPT_DB );
           ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64701:20: error: ‘(struct unix_syscall *)&<erroneous-expression>’ is a pointer; did you mean to use ‘->’?
   assert( debuginfo.nSize==(u16)(pIter - pCell) || CORRUPT_DB );
                    ^
                    ->
sqlite-snapshot-201909031623/sqlite3.c:64701:26: warning: comparison between pointer and integer
   assert( debuginfo.nSize==(u16)(pIter - pCell) || CORRUPT_DB );
                          ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘defragmentPage’:
sqlite-snapshot-201909031623/sqlite3.c:64767:11: warning: implicit declaration of function ‘sqlite3PagerIswriteable’ [-Wimplicit-function-declaration]
   assert( sqlite3PagerIswriteable(pPage->pDbPage) );
           ^~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64779:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   usableSize = pPage->pBt->usableSize;
                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:64805:11: warning: incompatible implicit declaration of built-in function ‘memmove’
           memmove(&data[iFree+sz+sz2], &data[iFree+sz], iFree2-(iFree+sz));
           ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64805:11: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:64805:57: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           memmove(&data[iFree+sz+sz2], &data[iFree+sz], iFree2-(iFree+sz));
                                                         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64813:9: warning: incompatible implicit declaration of built-in function ‘memmove’
         memmove(&data[cbrk], &data[top], iFree-top);
         ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64813:9: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:64813:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memmove(&data[cbrk], &data[top], iFree-top);
                                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:64853:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(&temp[x], &data[x], (cbrk+size) - x);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64853:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:64853:34: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(&temp[x], &data[x], (cbrk+size) - x);
                                  ^
sqlite-snapshot-201909031623/sqlite3.c:64856:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&data[cbrk], &src[pc], size);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64856:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:64856:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(&data[cbrk], &src[pc], size);
                                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c:64869:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&data[iCellFirst], 0, cbrk-iCellFirst);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64869:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:64869:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(&data[iCellFirst], 0, cbrk-iCellFirst);
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pageFindSlot’:
sqlite-snapshot-201909031623/sqlite3.c:64894:36: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   int maxPC = pPg->pBt->usableSize - nByte;  /* Max address for a usable slot */
                                    ^
sqlite-snapshot-201909031623/sqlite3.c:64894:15: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   int maxPC = pPg->pBt->usableSize - nByte;  /* Max address for a usable slot */
               ^~~
sqlite-snapshot-201909031623/sqlite3.c:64913:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(&aData[iAddr], &aData[pc], 2);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:64913:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:64914:25: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
         aData[hdr+7] += (u8)x;
                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘freeSpace’:
sqlite-snapshot-201909031623/sqlite3.c:65057:14: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   u32 iEnd = iStart + iSize;            /* First byte past the iStart buffer */
              ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65072:10: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   iPtr = hdr + 1;
          ^~~
sqlite-snapshot-201909031623/sqlite3.c:63035:23: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
 #define get2byte(x)   ((x)[0]<<8 | (x)[1])
                       ^
sqlite-snapshot-201909031623/sqlite3.c:65076:24: note: in expansion of macro ‘get2byte’
     while( (iFreeBlk = get2byte(&data[iPtr]))<iStart ){
                        ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65095:15: warning: conversion to ‘u8 {aka unsigned char}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
       nFrag = iFreeBlk - iEnd;
               ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65097:14: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       iEnd = iFreeBlk + get2byte(&data[iFreeBlk+2]);
              ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65101:15: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
       iSize = iEnd - iStart;
               ^~~~
sqlite-snapshot-201909031623/sqlite3.c:63035:23: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
 #define get2byte(x)   ((x)[0]<<8 | (x)[1])
                       ^
sqlite-snapshot-201909031623/sqlite3.c:65102:18: note: in expansion of macro ‘get2byte’
       iFreeBlk = get2byte(&data[iFreeBlk]);
                  ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65113:18: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
         nFrag += iStart - iPtrEnd;
                  ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65114:17: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
         iSize = iEnd - iPtr;
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:65119:20: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
     data[hdr+7] -= nFrag;
                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:63035:23: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
 #define get2byte(x)   ((x)[0]<<8 | (x)[1])
                       ^
sqlite-snapshot-201909031623/sqlite3.c:65121:7: note: in expansion of macro ‘get2byte’
   x = get2byte(&data[hdr+5]);
       ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65136:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&data[iStart], 0, iSize);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65136:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘decodeFlags’:
sqlite-snapshot-201909031623/sqlite3.c:65163:25: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pPage->childPtrSize = 4-4*pPage->leaf;
                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeComputeFreeSpace’:
sqlite-snapshot-201909031623/sqlite3.c:65222:24: warning: implicit declaration of function ‘sqlite3PagerPagenumber’ [-Wimplicit-function-declaration]
   assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );
                        ^~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65228:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   usableSize = pPage->pBt->usableSize;
                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:63035:23: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define get2byte(x)   ((x)[0]<<8 | (x)[1])
                       ^
sqlite-snapshot-201909031623/sqlite3.c:65257:14: note: in expansion of macro ‘get2byte’
       next = get2byte(&data[pc]);
              ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:63035:23: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define get2byte(x)   ((x)[0]<<8 | (x)[1])
                       ^
sqlite-snapshot-201909031623/sqlite3.c:65258:14: note: in expansion of macro ‘get2byte’
       size = get2byte(&data[pc+2]);
              ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65259:21: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       nFree = nFree + size;
                     ^
sqlite-snapshot-201909031623/sqlite3.c:65259:15: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       nFree = nFree + size;
               ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:65260:19: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       if( next<=pc+size+3 ) break;
                   ^
sqlite-snapshot-201909031623/sqlite3.c:65261:12: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       pc = next;
            ^~~~
sqlite-snapshot-201909031623/sqlite3.c:65267:11: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if( pc+size>(unsigned int)usableSize ){
           ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeCellSizeCheck’:
sqlite-snapshot-201909031623/sqlite3.c:65302:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   usableSize = pPage->pBt->usableSize;
                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeInitPage’:
sqlite-snapshot-201909031623/sqlite3.c:65354:23: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pPage->cellOffset = pPage->hdrOffset + 8 + pPage->childPtrSize;
                       ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:63035:23: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
 #define get2byte(x)   ((x)[0]<<8 | (x)[1])
                       ^
sqlite-snapshot-201909031623/sqlite3.c:65360:18: note: in expansion of macro ‘get2byte’
   pPage->nCell = get2byte(&data[3]);
                  ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘zeroPage’:
sqlite-snapshot-201909031623/sqlite3.c:65397:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&data[hdr], 0, pBt->usableSize - hdr);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65397:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:65399:15: warning: conversion to ‘unsigned char’ from ‘char’ may change the sign of the result [-Wsign-conversion]
   data[hdr] = (char)flags;
               ^
sqlite-snapshot-201909031623/sqlite3.c:65400:11: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   first = hdr + ((flags&PTF_LEAF)==0 ? 12 : 8);
           ^~~
sqlite-snapshot-201909031623/sqlite3.c:65401:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&data[hdr+1], 0, 4);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65401:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeOpen’:
sqlite-snapshot-201909031623/sqlite3.c:13886:19: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 # define MAX(A,B) ((A)>(B)?(A):(B))
                   ^
sqlite-snapshot-201909031623/sqlite3.c:65741:43: note: in expansion of macro ‘MAX’
       char *zFullPathname = sqlite3Malloc(MAX(nFullPathname,nFilename));
                                           ^~~
sqlite-snapshot-201909031623/sqlite3.c:65750:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(zFullPathname, zFilename, nFilename);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65750:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:65750:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memcpy(zFullPathname, zFilename, nFilename);
                                          ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:65843:21: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pBt->pageSize = (zDbHeader[16]<<8) | (zDbHeader[17]<<16);
                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘allocateTempSpace’:
sqlite-snapshot-201909031623/sqlite3.c:66010:41: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     pBt->pTmpSpace = sqlite3PageMalloc( pBt->pageSize );
                                         ^~~
sqlite-snapshot-201909031623/sqlite3.c:66028:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(pBt->pTmpSpace, 0, 8);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:66028:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeSetPageSize’:
sqlite-snapshot-201909031623/sqlite3.c:66209:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     nReserve = pBt->pageSize - pBt->usableSize;
                ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeGetPageSize’:
sqlite-snapshot-201909031623/sqlite3.c:66230:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   return p->pBt->pageSize;
          ~~~~~~^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeGetReserveNoMutex’:
sqlite-snapshot-201909031623/sqlite3.c:66247:7: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   n = p->pBt->pageSize - p->pBt->usableSize;
       ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeSecureDelete’:
sqlite-snapshot-201909031623/sqlite3.c:66310:25: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     p->pBt->btsFlags &= ~BTS_FAST_SECURE;
                         ^
sqlite-snapshot-201909031623/sqlite3.c:62792:30: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
 #define BTS_SECURE_DELETE    0x0004   /* PRAGMA secure_delete is enabled */
                              ^
sqlite-snapshot-201909031623/sqlite3.c:66311:25: note: in expansion of macro ‘BTS_SECURE_DELETE’
     p->pBt->btsFlags |= BTS_SECURE_DELETE*newFlag;
                         ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘lockBtree’:
sqlite-snapshot-201909031623/sqlite3.c:66494:16: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pageSize = (page1[16]<<8) | (page1[17]<<16);
                ^
sqlite-snapshot-201909031623/sqlite3.c:66525:36: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
                                    pageSize-usableSize);
                                    ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unlockBtreeIfUnused’:
sqlite-snapshot-201909031623/sqlite3.c:66613:11: warning: implicit declaration of function ‘countValidCursors’ [-Wimplicit-function-declaration]
   assert( countValidCursors(pBt,0)==0 || pBt->inTransaction>TRANS_NONE );
           ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:66617:13: warning: implicit declaration of function ‘sqlite3PagerRefcount’ [-Wimplicit-function-declaration]
     assert( sqlite3PagerRefcount(pBt->pPager)==1 );
             ^~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘newDatabase’:
sqlite-snapshot-201909031623/sqlite3.c:66642:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(data, zMagicHeader, sizeof(zMagicHeader));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:66642:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:66653:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&data[24], 0, 100-24);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:66653:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeBeginTrans’:
sqlite-snapshot-201909031623/sqlite3.c:66735:22: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pBt->btsFlags &= ~BTS_READ_ONLY;
                      ^
sqlite-snapshot-201909031623/sqlite3.c:66778:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pBt->btsFlags &= ~BTS_INITIALLY_EMPTY;
                    ^
sqlite-snapshot-201909031623/sqlite3.c:66834:24: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pBt->btsFlags &= ~BTS_EXCLUSIVE;
                        ^
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:66856:25: note: in expansion of macro ‘get4byte’
       *pSchemaVersion = get4byte(&pBt->pPage1->aData[40]);
                         ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘incrVacuumStep’:
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67086:48: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   if( !PTRMAP_ISPAGE(pBt, iLastPg) && iLastPg!=PENDING_BYTE_PAGE(pBt) ){
                                                ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67163:22: note: in expansion of macro ‘PENDING_BYTE_PAGE’
     }while( iLastPg==PENDING_BYTE_PAGE(pBt) || PTRMAP_ISPAGE(pBt, iLastPg) );
                      ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘finalDbSize’:
sqlite-snapshot-201909031623/sqlite3.c:67180:12: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   nEntry = pBt->usableSize/5;
            ^~~
sqlite-snapshot-201909031623/sqlite3.c:67181:51: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nPtrmap = (nFree-nOrig+PTRMAP_PAGENO(pBt, nOrig)+nEntry)/nEntry;
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:67181:59: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nPtrmap = (nFree-nOrig+PTRMAP_PAGENO(pBt, nOrig)+nEntry)/nEntry;
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67183:13: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   if( nOrig>PENDING_BYTE_PAGE(pBt) && nFin<PENDING_BYTE_PAGE(pBt) ){
             ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67183:44: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   if( nOrig>PENDING_BYTE_PAGE(pBt) && nFin<PENDING_BYTE_PAGE(pBt) ){
                                            ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67186:44: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   while( PTRMAP_ISPAGE(pBt, nFin) || nFin==PENDING_BYTE_PAGE(pBt) ){
                                            ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘autoVacuumCommit’:
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67258:45: note: in expansion of macro ‘PENDING_BYTE_PAGE’
     if( PTRMAP_ISPAGE(pBt, nOrig) || nOrig==PENDING_BYTE_PAGE(pBt) ){
                                             ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67288:11: error: ‘nRef’ undeclared (first use in this function)
   assert( nRef>=sqlite3PagerRefcount(pPager) );
           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:67288:15: warning: comparison between pointer and integer
   assert( nRef>=sqlite3PagerRefcount(pPager) );
               ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeSetNPage’:
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:67513:15: note: in expansion of macro ‘get4byte’
   int nPage = get4byte(&pPage1->aData[28]);
               ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67517:16: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pBt->nPage = nPage;
                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeCursor’:
sqlite-snapshot-201909031623/sqlite3.c:67718:11: warning: implicit declaration of function ‘hasSharedCacheTableLock’ [-Wimplicit-function-declaration]
   assert( hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, (wrFlag?2:1)) );
           ^~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67719:25: warning: implicit declaration of function ‘hasReadConflicts’ [-Wimplicit-function-declaration]
   assert( wrFlag==0 || !hasReadConflicts(p, iTable) );
                         ^~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeCursorSize’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:67785:10: note: in expansion of macro ‘ROUND8’
   return ROUND8(sizeof(BtCursor));
          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeCursorZero’:
sqlite-snapshot-201909031623/sqlite3.c:67797:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, offsetof(BtCursor, BTCURSOR_FIRST_UNINIT));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67797:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘getOverflowPage’:
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:67989:50: note: in expansion of macro ‘PENDING_BYTE_PAGE’
     while( PTRMAP_ISPAGE(pBt, iGuess) || iGuess==PENDING_BYTE_PAGE(pBt) ){
                                                  ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘copyPayload’:
sqlite-snapshot-201909031623/sqlite3.c:68045:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pPayload, pBuf, nByte);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:68045:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:68045:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pPayload, pBuf, nByte);
                            ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:68048:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pBuf, pPayload, nByte);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:68048:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:68048:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pBuf, pPayload, nByte);
                            ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘accessPayload’:
sqlite-snapshot-201909031623/sqlite3.c:68120:13: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     int a = amt;
             ^~~
sqlite-snapshot-201909031623/sqlite3.c:68121:10: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if( a+offset>pCur->info.nLocal ){
          ^
sqlite-snapshot-201909031623/sqlite3.c:68122:11: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       a = pCur->info.nLocal - offset;
           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:68127:9: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     amt -= a;
         ^~
sqlite-snapshot-201909031623/sqlite3.c:68147:19: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       int nOvfl = (pCur->info.nPayload-pCur->info.nLocal+ovflSize-1)/ovflSize;
                   ^
sqlite-snapshot-201909031623/sqlite3.c:68152:37: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             pCur->aOverflow, nOvfl*2*sizeof(Pgno)
                                     ^
sqlite-snapshot-201909031623/sqlite3.c:68160:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(pCur->aOverflow, 0, nOvfl*sizeof(Pgno));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:68160:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:68160:39: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset(pCur->aOverflow, 0, nOvfl*sizeof(Pgno));
                                       ^
sqlite-snapshot-201909031623/sqlite3.c:68168:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
         iIdx = (offset/ovflSize);
                ^
sqlite-snapshot-201909031623/sqlite3.c:68201:17: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
         int a = amt;
                 ^~~
sqlite-snapshot-201909031623/sqlite3.c:68202:15: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         if( a + offset > ovflSize ){
               ^
sqlite-snapshot-201909031623/sqlite3.c:68203:15: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
           a = ovflSize - offset;
               ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:68250:13: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         amt -= a;
             ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘moveToChild’:
sqlite-snapshot-201909031623/sqlite3.c:68404:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pCur->curFlags &= ~(BTCF_ValidNKey|BTCF_ValidOvfl);
                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘moveToParent’:
sqlite-snapshot-201909031623/sqlite3.c:68455:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pCur->curFlags &= ~(BTCF_ValidNKey|BTCF_ValidOvfl);
                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘moveToRoot’:
sqlite-snapshot-201909031623/sqlite3.c:68545:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pCur->curFlags &= ~(BTCF_AtLast|BTCF_ValidNKey|BTCF_ValidOvfl);
                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘moveToRightmost’:
sqlite-snapshot-201909031623/sqlite3.c:68608:14: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pCur->ix = pPage->nCell-1;
              ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeLast’:
sqlite-snapshot-201909031623/sqlite3.c:68670:25: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       pCur->curFlags &= ~BTCF_AtLast;
                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeMovetoUnpacked’:
sqlite-snapshot-201909031623/sqlite3.c:68887:31: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           if( nCell<2 || nCell/pCur->pBt->usableSize>pCur->pBt->nPage ){
                               ^
sqlite-snapshot-201909031623/sqlite3.c:68891:37: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           pCellKey = sqlite3Malloc( nCell+nOverrun );
                                     ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:68897:39: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           rc = accessPayload(pCur, 0, nCell, (unsigned char*)pCellKey, 0);
                                       ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:68898:11: warning: incompatible implicit declaration of built-in function ‘memset’
           memset(((u8*)pCellKey)+nCell,0,nOverrun); /* Fix uninit warnings */
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:68898:11: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:68898:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           memset(((u8*)pCellKey)+nCell,0,nOverrun); /* Fix uninit warnings */
                                          ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:68899:29: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
           pCur->curFlags &= ~BTCF_ValidOvfl;
                             ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeNext’:
sqlite-snapshot-201909031623/sqlite3.c:69087:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pCur->curFlags &= ~(BTCF_ValidNKey|BTCF_ValidOvfl);
                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreePrevious’:
sqlite-snapshot-201909031623/sqlite3.c:69174:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pCur->curFlags &= ~(BTCF_AtLast|BTCF_ValidOvfl|BTCF_ValidNKey);
                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘allocateBtreePage’:
sqlite-snapshot-201909031623/sqlite3.c:69311:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(&pPage1->aData[32], &pTrunk->aData[0], 4);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69311:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:69335:13: warning: incompatible implicit declaration of built-in function ‘memcpy’
             memcpy(&pPage1->aData[32], &pTrunk->aData[0], 4);
             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69335:13: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:69341:13: warning: incompatible implicit declaration of built-in function ‘memcpy’
             memcpy(&pPrevTrunk->aData[0], &pTrunk->aData[0], 4);
             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69341:13: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:69364:11: warning: incompatible implicit declaration of built-in function ‘memcpy’
           memcpy(&pNewTrunk->aData[0], &pTrunk->aData[0], 4);
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69364:11: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:69400:36: note: in expansion of macro ‘get4byte’
             dist = sqlite3AbsInt32(get4byte(&aData[8]) - nearby);
                                    ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:69402:40: note: in expansion of macro ‘get4byte’
               int d2 = sqlite3AbsInt32(get4byte(&aData[8+i*4]) - nearby);
                                        ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69431:13: warning: incompatible implicit declaration of built-in function ‘memcpy’
             memcpy(&aData[8+closest*4], &aData[4+k*4], 4);
             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69431:13: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69473:21: note: in expansion of macro ‘PENDING_BYTE_PAGE’
     if( pBt->nPage==PENDING_BYTE_PAGE(pBt) ) pBt->nPage++;
                     ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69483:27: note: in expansion of macro ‘PENDING_BYTE_PAGE’
       assert( pBt->nPage!=PENDING_BYTE_PAGE(pBt) );
                           ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69491:23: note: in expansion of macro ‘PENDING_BYTE_PAGE’
       if( pBt->nPage==PENDING_BYTE_PAGE(pBt) ){ pBt->nPage++; }
                       ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69497:21: note: in expansion of macro ‘PENDING_BYTE_PAGE’
     assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );
                     ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69508:33: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   assert( CORRUPT_DB || *pPgno!=PENDING_BYTE_PAGE(pBt) );
                                 ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘freePage2’:
sqlite-snapshot-201909031623/sqlite3.c:69567:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(pPage->aData, 0, pPage->pBt->pageSize);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69567:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘clearCell’:
sqlite-snapshot-201909031623/sqlite3.c:69696:11: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   nOvfl = (pInfo->nPayload - pInfo->nLocal + ovflPageSize - 1)/ovflPageSize;
           ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘fillInCell’:
sqlite-snapshot-201909031623/sqlite3.c:19259:24: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   sqlite3PutVarint((A),(B)))
                        ^
sqlite-snapshot-201909031623/sqlite3.c:69784:16: note: in expansion of macro ‘putVarint32’
     nHeader += putVarint32(&pCell[nHeader], nPayload);
                ^~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:19259:24: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   sqlite3PutVarint((A),(B)))
                        ^
sqlite-snapshot-201909031623/sqlite3.c:69790:16: note: in expansion of macro ‘putVarint32’
     nHeader += putVarint32(&pCell[nHeader], nPayload);
                ^~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69805:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pPayload, pSrc, nSrc);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69805:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:69805:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pPayload, pSrc, nSrc);
                            ^~~~
sqlite-snapshot-201909031623/sqlite3.c:69806:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(pPayload+nSrc, 0, nPayload-nSrc);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69806:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:69806:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(pPayload+nSrc, 0, nPayload-nSrc);
                              ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69814:28: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   n = mn + (nPayload - mn) % (pPage->pBt->usableSize - 4);
                            ^
sqlite-snapshot-201909031623/sqlite3.c:69814:10: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   n = mn + (nPayload - mn) % (pPage->pBt->usableSize - 4);
          ^
sqlite-snapshot-201909031623/sqlite3.c:69814:7: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   n = mn + (nPayload - mn) % (pPage->pBt->usableSize - 4);
       ^~
sqlite-snapshot-201909031623/sqlite3.c:69863:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pPayload, pSrc, n);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69863:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:69863:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(pPayload, pSrc, n);
                              ^
sqlite-snapshot-201909031623/sqlite3.c:69866:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pPayload, pSrc, n);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69866:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:69866:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(pPayload, pSrc, n);
                              ^
sqlite-snapshot-201909031623/sqlite3.c:69868:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(pPayload, 0, n);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69868:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:69868:27: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset(pPayload, 0, n);
                           ^
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69884:53: note: in expansion of macro ‘PENDING_BYTE_PAGE’
           PTRMAP_ISPAGE(pBt, pgnoOvfl) || pgnoOvfl==PENDING_BYTE_PAGE(pBt)
                                                     ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69928:19: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       spaceLeft = pBt->usableSize - 4;
                   ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘dropCell’:
sqlite-snapshot-201909031623/sqlite3.c:69952:29: warning: implicit declaration of function ‘cellSize’ [-Wimplicit-function-declaration]
   assert( CORRUPT_DB || sz==cellSize(pPage, idx) );
                             ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:63035:23: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define get2byte(x)   ((x)[0]<<8 | (x)[1])
                       ^
sqlite-snapshot-201909031623/sqlite3.c:69958:8: note: in expansion of macro ‘get2byte’
   pc = get2byte(ptr);
        ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69962:9: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   if( pc+sz > pPage->pBt->usableSize ){
         ^
sqlite-snapshot-201909031623/sqlite3.c:69966:25: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
   rc = freeSpace(pPage, pc, sz);
                         ^~
sqlite-snapshot-201909031623/sqlite3.c:69966:29: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   rc = freeSpace(pPage, pc, sz);
                             ^~
sqlite-snapshot-201909031623/sqlite3.c:69973:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&data[hdr+1], 0, 4);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69973:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:69976:20: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     pPage->nFree = pPage->pBt->usableSize - pPage->hdrOffset
                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:69979:5: warning: incompatible implicit declaration of built-in function ‘memmove’
     memmove(ptr, ptr+2, 2*(pPage->nCell - idx));
     ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:69979:5: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:69979:25: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memmove(ptr, ptr+2, 2*(pPage->nCell - idx));
                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘insertCell’:
sqlite-snapshot-201909031623/sqlite3.c:70024:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pTemp, pCell, sz);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70024:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:70024:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(pTemp, pCell, sz);
                            ^~
sqlite-snapshot-201909031623/sqlite3.c:70068:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(&data[idx+4], pCell+4, sz-4);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70068:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:70068:37: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(&data[idx+4], pCell+4, sz-4);
                                     ^~
sqlite-snapshot-201909031623/sqlite3.c:70071:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(&data[idx], pCell, sz);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70071:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:70071:33: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(&data[idx], pCell, sz);
                                 ^~
sqlite-snapshot-201909031623/sqlite3.c:70074:5: warning: incompatible implicit declaration of built-in function ‘memmove’
     memmove(pIns+2, pIns, 2*(pPage->nCell - i));
     ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70074:5: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:70074:27: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memmove(pIns+2, pIns, 2*(pPage->nCell - i));
                           ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘rebuildPage’:
sqlite-snapshot-201909031623/sqlite3.c:70239:26: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   const int usableSize = pPg->pBt->usableSize;
                          ^~~
sqlite-snapshot-201909031623/sqlite3.c:63035:23: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define get2byte(x)   ((x)[0]<<8 | (x)[1])
                       ^
sqlite-snapshot-201909031623/sqlite3.c:70251:7: note: in expansion of macro ‘get2byte’
   j = get2byte(&aData[hdr+5]);
       ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70253:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&pTmp[j], &aData[j], usableSize - j);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70253:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:70253:42: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(&pTmp[j], &aData[j], usableSize - j);
                                          ^
sqlite-snapshot-201909031623/sqlite3.c:70288:16: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pPg->nCell = nCell;
                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pageInsertArray’:
sqlite-snapshot-201909031623/sqlite3.c:70364:5: warning: incompatible implicit declaration of built-in function ‘memmove’
     memmove(pSlot, pCArray->apCell[i], sz);
     ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70364:5: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:70364:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memmove(pSlot, pCArray->apCell[i], sz);
                                        ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pageFreeArray’:
sqlite-snapshot-201909031623/sqlite3.c:70413:48: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
           freeSpace(pPg, (u16)(pFree - aData), szFree);
                                                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70427:42: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     freeSpace(pPg, (u16)(pFree - aData), szFree);
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘editPage’:
sqlite-snapshot-201909031623/sqlite3.c:70471:5: warning: incompatible implicit declaration of built-in function ‘memmove’
     memmove(pPg->aCellIdx, &pPg->aCellIdx[nShift*2], nCell*2);
     ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70471:5: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:70471:54: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memmove(pPg->aCellIdx, &pPg->aCellIdx[nShift*2], nCell*2);
                                                      ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:70489:5: warning: incompatible implicit declaration of built-in function ‘memmove’
     memmove(&pCellptr[nAdd*2], pCellptr, nCell*2);
     ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70489:5: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:70489:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memmove(&pCellptr[nAdd*2], pCellptr, nCell*2);
                                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:70503:9: warning: incompatible implicit declaration of built-in function ‘memmove’
         memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);
         ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70503:9: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:70503:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);
                                         ^
sqlite-snapshot-201909031623/sqlite3.c:70522:16: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pPg->nCell = nNew;
                ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘balance_quick’:
sqlite-snapshot-201909031623/sqlite3.c:70614:19: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     pNew->nFree = pBt->usableSize - pNew->cellOffset - 2 - szCell;
                   ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘copyNodeContent’:
sqlite-snapshot-201909031623/sqlite3.c:70744:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&aTo[iData], &aFrom[iData], pBt->usableSize-iData);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70744:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:70744:55: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(&aTo[iData], &aFrom[iData], pBt->usableSize-iData);
                                                       ^
sqlite-snapshot-201909031623/sqlite3.c:70745:44: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(&aTo[iToHdr], &aFrom[iFromHdr], pFrom->cellOffset + 2*pFrom->nCell);
                                            ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘balance_nonroot’:
sqlite-snapshot-201909031623/sqlite3.c:70845:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(abDone, 0, sizeof(abDone));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70845:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:70900:29: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset(apOld, 0, (i+1)*sizeof(MemPage*));
                             ^
sqlite-snapshot-201909031623/sqlite3.c:70906:29: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memset(apOld, 0, (i)*sizeof(MemPage*));
                             ^
sqlite-snapshot-201909031623/sqlite3.c:70940:33: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           memset(apOld, 0, (i+1)*sizeof(MemPage*));
                                 ^
sqlite-snapshot-201909031623/sqlite3.c:70943:11: warning: incompatible implicit declaration of built-in function ‘memcpy’
           memcpy(&aOvflSpace[iOff], apDiv[i], szNew[i]);
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70943:11: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:70943:47: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           memcpy(&aOvflSpace[iOff], apDiv[i], szNew[i]);
                                               ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:70953:19: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nMaxCells = nOld*(MX_CELL(pBt) + ArraySize(pParent->apOvfl));
                   ^
sqlite-snapshot-201909031623/sqlite3.c:70953:15: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   nMaxCells = nOld*(MX_CELL(pBt) + ArraySize(pParent->apOvfl));
               ^~~~
sqlite-snapshot-201909031623/sqlite3.c:70960:17: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
        nMaxCells*sizeof(u8*)                       /* b.apCell */
                 ^
sqlite-snapshot-201909031623/sqlite3.c:70961:17: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
      + nMaxCells*sizeof(u16)                       /* b.szCell */
                 ^
sqlite-snapshot-201909031623/sqlite3.c:70960:8: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
        nMaxCells*sizeof(u8*)                       /* b.apCell */
        ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:70965:38: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   b.apCell = sqlite3StackAllocRaw(0, szScratch );
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:18792:59: note: in definition of macro ‘sqlite3StackAllocRaw’
 # define sqlite3StackAllocRaw(D,N)   sqlite3DbMallocRaw(D,N)
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:70991:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   leafCorrection = b.pRef->leaf*4;
                    ^
sqlite-snapshot-201909031623/sqlite3.c:71027:54: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(&b.szCell[b.nCell], 0, sizeof(b.szCell[0])*(limit+pOld->nOverflow));
                                                      ^
sqlite-snapshot-201909031623/sqlite3.c:71052:22: error: ‘nCellAtStart’ undeclared (first use in this function)
     assert( (b.nCell-nCellAtStart)==(pOld->nCell+pOld->nOverflow) );
                      ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71052:21: error: invalid operands to binary - (have ‘int’ and ‘struct unix_syscall *’)
     assert( (b.nCell-nCellAtStart)==(pOld->nCell+pOld->nOverflow) );
              ~~~~~~~^
sqlite-snapshot-201909031623/sqlite3.c:71052:35: warning: comparison between pointer and integer
     assert( (b.nCell-nCellAtStart)==(pOld->nCell+pOld->nOverflow) );
                                   ^~
sqlite-snapshot-201909031623/sqlite3.c:71064:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pTemp, apDiv[i], sz);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71064:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:71067:27: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       b.szCell[b.nCell] = b.szCell[b.nCell] - leafCorrection;
                           ^
sqlite-snapshot-201909031623/sqlite3.c:71105:17: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   usableSpace = pBt->usableSize - 12 + leafCorrection;
                 ^~~
sqlite-snapshot-201909031623/sqlite3.c:71294:60: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         sqlite3PagerRekey(apNew[iBest]->pDbPage, pBt->nPage+iBest+1, 0);
                                                            ^
sqlite-snapshot-201909031623/sqlite3.c:71324:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&apNew[nNew-1]->aData[8], &pOld->aData[8], 4);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71324:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:71399:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(&pNew->aData[8], pCell, 4);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71399:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:71410:37: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
       sz = 4 + putVarint(&pCell[4], info.nKey);
                                     ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘balance_deeper’:
sqlite-snapshot-201909031623/sqlite3.c:71628:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pChild->aiOvfl, pRoot->aiOvfl,
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71628:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘balance’:
sqlite-snapshot-201909031623/sqlite3.c:71654:20: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   const int nMin = pCur->pBt->usableSize * 2 / 3;
                    ^~~~
sqlite-snapshot-201909031623/sqlite3.c:71675:17: error: ‘balance_deeper_called’ undeclared (first use in this function)
         assert( balance_deeper_called==0 );
                 ^~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71718:19: error: ‘balance_quick_called’ undeclared (first use in this function)
           assert( balance_quick_called==0 );
                   ^~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71741:42: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
           u8 *pSpace = sqlite3PageMalloc(pCur->pBt->pageSize);
                                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeOverwriteContent’:
sqlite-snapshot-201909031623/sqlite3.c:71793:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(pDest + i, 0, iAmt - i);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71793:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:71793:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset(pDest + i, 0, iAmt - i);
                            ^~~~
sqlite-snapshot-201909031623/sqlite3.c:71811:7: warning: incompatible implicit declaration of built-in function ‘memmove’
       memmove(pDest, ((u8*)pX->pData) + iOffset, iAmt);
       ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71811:7: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:71811:50: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memmove(pDest, ((u8*)pX->pData) + iOffset, iAmt);
                                                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeOverwriteCell’:
sqlite-snapshot-201909031623/sqlite3.c:71854:18: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       if( iOffset+ovflPageSize<(u32)nTotal ){
                  ^
sqlite-snapshot-201909031623/sqlite3.c:71857:24: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         ovflPageSize = nTotal - iOffset;
                        ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71860:43: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
                                  iOffset, ovflPageSize);
                                           ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:71864:13: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     iOffset += ovflPageSize;
             ^~
sqlite-snapshot-201909031623/sqlite3.c:71864:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     iOffset += ovflPageSize;
                ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeInsert’:
sqlite-snapshot-201909031623/sqlite3.c:71979:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
        && pCur->info.nPayload==(u32)pX->nData+pX->nZero
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:72033:20: warning: conversion to ‘int’ from ‘sqlite3_int64 {aka const long long int}’ may alter its value [-Wconversion]
         x2.nData = pX->nKey;
                    ^~
sqlite-snapshot-201909031623/sqlite3.c:72070:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(newCell, oldCell, 4);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:72070:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:63851:58: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
 #define invalidateOverflowCache(pCur) (pCur->curFlags &= ~BTCF_ValidOvfl)
                                                          ^
sqlite-snapshot-201909031623/sqlite3.c:72074:5: note: in expansion of macro ‘invalidateOverflowCache’
     invalidateOverflowCache(pCur);
     ^~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:72094:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(oldCell, newCell, szNew);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:72094:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:72094:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(oldCell, newCell, szNew);
                                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:72102:23: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pCur->curFlags &= ~BTCF_ValidNKey;
                       ^
sqlite-snapshot-201909031623/sqlite3.c:72133:23: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pCur->curFlags &= ~(BTCF_ValidNKey);
                       ^
sqlite-snapshot-201909031623/sqlite3.c:72146:37: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka const long long int}’ may change the sign of the result [-Wsign-conversion]
         pCur->pKey = sqlite3Malloc( pX->nKey );
                                     ^~
sqlite-snapshot-201909031623/sqlite3.c:72150:11: warning: incompatible implicit declaration of built-in function ‘memcpy’
           memcpy(pCur->pKey, pX->pKey, pX->nKey);
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:72150:11: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:72150:40: warning: conversion to ‘long unsigned int’ from ‘sqlite3_int64 {aka const long long int}’ may change the sign of the result [-Wsign-conversion]
           memcpy(pCur->pKey, pX->pKey, pX->nKey);
                                        ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeDelete’:
sqlite-snapshot-201909031623/sqlite3.c:72337:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         pCur->ix = pPage->nCell-1;
                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeCreateTable’:
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:72403:19: note: in expansion of macro ‘PENDING_BYTE_PAGE’
         pgnoRoot==PENDING_BYTE_PAGE(pBt) ){
                   ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeClearTableOfCursor’:
sqlite-snapshot-201909031623/sqlite3.c:72611:47: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   return sqlite3BtreeClearTable(pCur->pBtree, pCur->pgnoRoot, 0);
                                               ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘btreeDropTable’:
sqlite-snapshot-201909031623/sqlite3.c:72648:34: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   rc = sqlite3BtreeClearTable(p, iTable, 0);
                                  ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:72696:18: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       *piMoved = maxRootPgno;
                  ^~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:72705:25: note: in expansion of macro ‘PENDING_BYTE_PAGE’
     while( maxRootPgno==PENDING_BYTE_PAGE(pBt)
                         ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:72709:26: note: in expansion of macro ‘PENDING_BYTE_PAGE’
     assert( maxRootPgno!=PENDING_BYTE_PAGE(pBt) );
                          ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeDropTable’:
sqlite-snapshot-201909031623/sqlite3.c:72722:26: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   rc = btreeDropTable(p, iTable, piMoved);
                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘setPageReferenced’:
sqlite-snapshot-201909031623/sqlite3.c:72929:28: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pCheck->aPgRef[iPg/8] |= (1 << (iPg & 0x07));
                            ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘checkList’:
sqlite-snapshot-201909031623/sqlite3.c:73001:26: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if( checkRef(pCheck, iPage) ) break;
                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:73012:29: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         checkPtrmap(pCheck, iPage, PTRMAP_FREEPAGE, 0);
                             ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:73039:13: note: in expansion of macro ‘get4byte’
         i = get4byte(pOvflData);
             ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:73040:29: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         checkPtrmap(pCheck, i, PTRMAP_OVERFLOW2, iPage);
                             ^
sqlite-snapshot-201909031623/sqlite3.c:73040:50: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         checkPtrmap(pCheck, i, PTRMAP_OVERFLOW2, iPage);
                                                  ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:73044:13: note: in expansion of macro ‘get4byte’
     iPage = get4byte(pOvflData);
             ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘checkTreePage’:
sqlite-snapshot-201909031623/sqlite3.c:73159:24: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   if( checkRef(pCheck, iPage) ) return 0;
                        ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:63393:29: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define get2byteNotZero(X)  (((((int)get2byte(X))-1)&0xffff)+1)
                             ^
sqlite-snapshot-201909031623/sqlite3.c:73188:19: note: in expansion of macro ‘get2byteNotZero’
   contentOffset = get2byteNotZero(&data[hdr+5]);
                   ^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:73204:12: note: in expansion of macro ‘get4byte’
     pgno = get4byte(&data[hdr+8]);
            ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:73208:27: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       checkPtrmap(pCheck, pgno, PTRMAP_BTREE, iPage);
                           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:73208:47: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       checkPtrmap(pCheck, pgno, PTRMAP_BTREE, iPage);
                                               ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:73262:57: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         checkPtrmap(pCheck, pgnoOvfl, PTRMAP_OVERFLOW1, iPage);
                                                         ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:73265:28: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       checkList(pCheck, 0, pgnoOvfl, nPage);
                            ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:73270:14: note: in expansion of macro ‘get4byte’
       pgno = get4byte(pCell);
              ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:73273:29: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         checkPtrmap(pCheck, pgno, PTRMAP_BTREE, iPage);
                             ^~~~
sqlite-snapshot-201909031623/sqlite3.c:73273:49: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         checkPtrmap(pCheck, pgno, PTRMAP_BTREE, iPage);
                                                 ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:73318:43: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       btreeHeapInsert(heap, (((u32)i)<<16)|(i+size-1));
                                           ^
sqlite-snapshot-201909031623/sqlite3.c:73351:15: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nFrag += (x>>16) - (prev&0xffff) - 1;
               ^~
sqlite-snapshot-201909031623/sqlite3.c:73351:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
         nFrag += (x>>16) - (prev&0xffff) - 1;
                  ^
sqlite-snapshot-201909031623/sqlite3.c:73355:11: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nFrag += usableSize - (prev&0xffff) - 1;
           ^~
sqlite-snapshot-201909031623/sqlite3.c:73355:14: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     nFrag += usableSize - (prev&0xffff) - 1;
              ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeIntegrityCheck’:
sqlite-snapshot-201909031623/sqlite3.c:73409:11: error: ‘nRef’ undeclared (first use in this function)
   assert( nRef>=0 );
           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:73432:42: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   sCheck.heap = (u32*)sqlite3PageMalloc( pBt->pageSize );
                                          ^~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:73438:7: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   i = PENDING_BYTE_PAGE(pBt);
       ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:73444:25: note: in expansion of macro ‘get4byte’
   checkList(&sCheck, 1, get4byte(&pBt->pPage1->aData[32]),
                         ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:63037:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define get4byte sqlite3Get4byte
                  ^
sqlite-snapshot-201909031623/sqlite3.c:73455:15: note: in expansion of macro ‘get4byte’
     mxInHdr = get4byte(&pBt->pPage1->aData[52]);
               ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:73475:28: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       checkPtrmap(&sCheck, aRoot[i], PTRMAP_ROOTPAGE, 0);
                            ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:73516:15: warning: comparison between pointer and integer
   assert( nRef==sqlite3PagerRefcount(pBt->pPager) );
               ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeSchema’:
sqlite-snapshot-201909031623/sqlite3.c:73619:43: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pBt->pSchema = sqlite3DbMallocZero(0, nBytes);
                                           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeLockTable’:
sqlite-snapshot-201909031623/sqlite3.c:62662:23: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
 #define READ_LOCK     1
                       ^
sqlite-snapshot-201909031623/sqlite3.c:73652:19: note: in expansion of macro ‘READ_LOCK’
     u8 lockType = READ_LOCK + isWriteLock;
                   ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:73657:39: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     rc = querySharedCacheTableLock(p, iTab, lockType);
                                       ^~~~
sqlite-snapshot-201909031623/sqlite3.c:73659:39: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       rc = setSharedCacheTableLock(p, iTab, lockType);
                                       ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeSetVersion’:
sqlite-snapshot-201909031623/sqlite3.c:73746:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pBt->btsFlags &= ~BTS_NO_WAL;
                    ^
sqlite-snapshot-201909031623/sqlite3.c:73764:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pBt->btsFlags &= ~BTS_NO_WAL;
                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3HeaderSizeBtree’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:73786:57: note: in expansion of macro ‘ROUND8’
 SQLITE_PRIVATE int sqlite3HeaderSizeBtree(void){ return ROUND8(sizeof(MemPage)); }
                                                         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘findBtree’:
sqlite-snapshot-201909031623/sqlite3.c:73896:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&sParse, 0, sizeof(sParse));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:73896:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘backupOnePage’:
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74059:19: note: in expansion of macro ‘PENDING_BYTE_PAGE’
   assert( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) );
                   ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74096:16: note: in expansion of macro ‘PENDING_BYTE_PAGE’
     if( iDest==PENDING_BYTE_PAGE(p->pDest->pBt) ) continue;
                ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74111:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(zOut, zIn, nCopy);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74111:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:74111:25: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(zOut, zIn, nCopy);
                         ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_backup_step’:
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74231:19: note: in expansion of macro ‘PENDING_BYTE_PAGE’
       if( iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) ){
                   ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74242:23: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       p->nPagecount = nSrcPage;
                       ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74243:33: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       p->nRemaining = nSrcPage+1-p->iNext;
                                 ^
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74291:35: note: in expansion of macro ‘PENDING_BYTE_PAGE’
           if( nDestTruncate==(int)PENDING_BYTE_PAGE(p->pDest->pBt) ){
                                   ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74319:38: note: in expansion of macro ‘PENDING_BYTE_PAGE’
                 nDestTruncate==(int)(PENDING_BYTE_PAGE(p->pDest->pBt)-1)
                                      ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74330:19: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           for(iPg=nDestTruncate; rc==SQLITE_OK && iPg<=(Pgno)nDstPage; iPg++){
                   ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:15418:47: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE/((x)->pageSize))+1))
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:62927:33: note: in expansion of macro ‘PAGER_MJ_PGNO’
 # define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)
                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74331:22: note: in expansion of macro ‘PENDING_BYTE_PAGE’
             if( iPg!=PENDING_BYTE_PAGE(p->pDest->pBt) ){
                      ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74369:49: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           sqlite3PagerTruncateImage(pDestPager, nDestTruncate);
                                                 ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74391:15: error: ‘rc2’ undeclared (first use in this function)
       assert( rc2==SQLITE_OK );
               ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_backup_remaining’:
sqlite-snapshot-201909031623/sqlite3.c:74471:11: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   return p->nRemaining;
          ~^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_backup_pagecount’:
sqlite-snapshot-201909031623/sqlite3.c:74485:11: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   return p->nPagecount;
          ~^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BtreeCopyFile’:
sqlite-snapshot-201909031623/sqlite3.c:74578:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&b, 0, sizeof(b));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74578:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:74599:27: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pTo->pBt->btsFlags &= ~BTS_PAGESIZE_FIXED;
                           ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeChangeEncoding’:
sqlite-snapshot-201909031623/sqlite3.c:74805:12: warning: implicit declaration of function ‘sqlite3VdbeMemIsRowSet’ [-Wimplicit-function-declaration]
   assert( !sqlite3VdbeMemIsRowSet(pMem) );
            ^~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemGrow’:
sqlite-snapshot-201909031623/sqlite3.c:74836:11: warning: implicit declaration of function ‘sqlite3VdbeCheckMemInvariants’ [-Wimplicit-function-declaration]
   assert( sqlite3VdbeCheckMemInvariants(pMem) );
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74848:73: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pMem->z = pMem->zMalloc = sqlite3DbReallocOrFree(pMem->db, pMem->z, n);
                                                                         ^
sqlite-snapshot-201909031623/sqlite3.c:74852:50: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pMem->zMalloc = sqlite3DbMallocRaw(pMem->db, n);
                                                  ^
sqlite-snapshot-201909031623/sqlite3.c:74865:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pMem->zMalloc, pMem->z, pMem->n);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74865:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:74865:36: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pMem->zMalloc, pMem->z, pMem->n);
                                    ^~~~
sqlite-snapshot-201909031623/sqlite3.c:74873:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pMem->flags &= ~(MEM_Dyn|MEM_Ephem|MEM_Static);
                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemMakeWriteable’:
sqlite-snapshot-201909031623/sqlite3.c:74938:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pMem->flags &= ~MEM_Ephem;
                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemExpandBlob’:
sqlite-snapshot-201909031623/sqlite3.c:74969:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&pMem->z[pMem->n], 0, pMem->u.nZero);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:74969:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:74969:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(&pMem->z[pMem->n], 0, pMem->u.nZero);
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:74971:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pMem->flags &= ~(MEM_Zero|MEM_Term);
                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemStringify’:
sqlite-snapshot-201909031623/sqlite3.c:18750:31: warning: incompatible implicit declaration of built-in function ‘strlen’
 #define sqlite3Strlen30NN(C) (strlen(C)&0x3fffffff)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:75022:13: note: in expansion of macro ‘sqlite3Strlen30NN’
   pMem->n = sqlite3Strlen30NN(pMem->z);
             ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:18750:31: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
 #define sqlite3Strlen30NN(C) (strlen(C)&0x3fffffff)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:75022:13: note: in expansion of macro ‘sqlite3Strlen30NN’
   pMem->n = sqlite3Strlen30NN(pMem->z);
             ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75025:31: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   if( bForce ) pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal);
                               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemFinalize’:
sqlite-snapshot-201909031623/sqlite3.c:75045:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&ctx, 0, sizeof(ctx));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75045:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:75055:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pMem, &t, sizeof(t));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75055:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemAggValue’:
sqlite-snapshot-201909031623/sqlite3.c:75075:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&ctx, 0, sizeof(ctx));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75075:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeIntegerAffinity’:
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:75276:5: note: in expansion of macro ‘MemSetTypeFlag’
     MemSetTypeFlag(pMem, MEM_Int);
     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemIntegerify’:
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:75289:3: note: in expansion of macro ‘MemSetTypeFlag’
   MemSetTypeFlag(pMem, MEM_Int);
   ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemRealify’:
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:75302:3: note: in expansion of macro ‘MemSetTypeFlag’
   MemSetTypeFlag(pMem, MEM_Real);
   ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemNumerify’:
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:75345:7: note: in expansion of macro ‘MemSetTypeFlag’
       MemSetTypeFlag(pMem, MEM_Int);
       ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:75347:7: note: in expansion of macro ‘MemSetTypeFlag’
       MemSetTypeFlag(pMem, MEM_Real);
       ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75351:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pMem->flags &= ~(MEM_Str|MEM_Blob|MEM_Zero);
                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemCast’:
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:75369:37: note: in expansion of macro ‘MemSetTypeFlag’
         if( pMem->flags & MEM_Str ) MemSetTypeFlag(pMem, MEM_Blob);
                                     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75371:24: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         pMem->flags &= ~(MEM_TypeMask&~MEM_Blob);
                        ^
sqlite-snapshot-201909031623/sqlite3.c:75390:22: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pMem->flags |= (pMem->flags&MEM_Blob)>>3;
                      ^
sqlite-snapshot-201909031623/sqlite3.c:75393:22: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal|MEM_Blob|MEM_Zero);
                      ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemShallowCopy’:
sqlite-snapshot-201909031623/sqlite3.c:75608:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pTo, pFrom, MEMCELLSIZE);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75608:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:75610:19: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pTo->flags &= ~(MEM_Dyn|MEM_Static|MEM_Ephem);
                   ^
sqlite-snapshot-201909031623/sqlite3.c:75612:19: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pTo->flags |= srcType;
                   ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemCopy’:
sqlite-snapshot-201909031623/sqlite3.c:75625:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pTo, pFrom, MEMCELLSIZE);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75625:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:75626:17: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pTo->flags &= ~MEM_Dyn;
                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemMove’:
sqlite-snapshot-201909031623/sqlite3.c:75649:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pTo, pFrom, sizeof(Mem));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75649:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemSetStr’:
sqlite-snapshot-201909031623/sqlite3.c:75698:33: warning: incompatible implicit declaration of built-in function ‘strlen’
       nByte = 0x7fffffff & (int)strlen(z);
                                 ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75698:33: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:75710:18: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     u32 nAlloc = nByte;
                  ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:75723:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pMem->z, z, nAlloc);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:75723:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:75732:16: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       flags |= ((xDel==SQLITE_STATIC)?MEM_Static:MEM_Dyn);
                ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbeMemFromBtreeResize’:
sqlite-snapshot-201909031623/sqlite3.c:75779:59: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   if( SQLITE_OK==(rc = sqlite3VdbeMemClearAndResize(pMem, amt+1)) ){
                                                           ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMemFromBtree’:
sqlite-snapshot-201909031623/sqlite3.c:75801:11: warning: implicit declaration of function ‘sqlite3BtreeCursorIsValid’ [-Wimplicit-function-declaration]
   assert( sqlite3BtreeCursorIsValid(pCur) );
           ^~~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘valueToText’:
sqlite-snapshot-201909031623/sqlite3.c:75852:13: warning: implicit declaration of function ‘sqlite3VdbeMemValidStrRep’ [-Wimplicit-function-declaration]
     assert( sqlite3VdbeMemValidStrRep(pVal) );
             ^~~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘valueFromExpr’:
sqlite-snapshot-201909031623/sqlite3.c:76104:14: warning: conversion to ‘u8 {aka unsigned char}’ from ‘char’ may change the sign of the result [-Wsign-conversion]
     u8 aff = sqlite3AffinityType(pExpr->u.zToken,0);
              ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:76144:22: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pVal->flags &= ~MEM_Str;
                      ^
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:76159:9: note: in expansion of macro ‘MemSetTypeFlag’
         MemSetTypeFlag(pVal, MEM_Real);
         ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeCreate’:
sqlite-snapshot-201909031623/sqlite3.c:76525:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&p->aOp, 0, sizeof(Vdbe)-offsetof(Vdbe,aOp));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:76525:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeSetSql’:
sqlite-snapshot-201909031623/sqlite3.c:76565:40: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->zSql = sqlite3DbStrNDup(p->db, z, n);
                                        ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeSwap’:
sqlite-snapshot-201909031623/sqlite3.c:76631:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pB->aCounter, pA->aCounter, sizeof(pB->aCounter));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:76631:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘growOpArray’:
sqlite-snapshot-201909031623/sqlite3.c:76673:46: warning: conversion to ‘long long unsigned int’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   pNew = sqlite3DbRealloc(p->db, v->aOp, nNew*sizeof(Op));
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:76676:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     v->nOpAlloc = p->szOpAlloc/sizeof(Op);
                               ^
sqlite-snapshot-201909031623/sqlite3.c:76676:19: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
     v->nOpAlloc = p->szOpAlloc/sizeof(Op);
                   ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeAddOp4Dup8’:
sqlite-snapshot-201909031623/sqlite3.c:76837:16: warning: incompatible implicit declaration of built-in function ‘memcpy’
   if( p4copy ) memcpy(p4copy, zP4, 8);
                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:76837:16: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘resizeResolveLabel’:
sqlite-snapshot-201909031623/sqlite3.c:76990:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                      nNewSize*sizeof(p->aLabel[0]));
                              ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbeChangeP4Full’:
sqlite-snapshot-201909031623/sqlite3.c:77659:46: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pOp->p4.z = sqlite3DbStrNDup(p->db, zP4, n);
                                              ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeAppendP4’:
sqlite-snapshot-201909031623/sqlite3.c:77717:19: warning: conversion to ‘signed char’ from ‘int’ may alter its value [-Wconversion]
     pOp->p4type = n;
                   ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeFrameMemDel’:
sqlite-snapshot-201909031623/sqlite3.c:78295:11: warning: implicit declaration of function ‘sqlite3VdbeFrameIsValid’ [-Wimplicit-function-declaration]
   assert( sqlite3VdbeFrameIsValid(pFrame) );
           ^~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeFrameDelete’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:20268:44: note: in expansion of macro ‘ROUND8’
 #define VdbeFrameMem(p) ((Mem *)&((u8 *)p)[ROUND8(sizeof(VdbeFrame))])
                                            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:78307:15: note: in expansion of macro ‘VdbeFrameMem’
   Mem *aMem = VdbeFrameMem(p);
               ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeList’:
sqlite-snapshot-201909031623/sqlite3.c:78387:21: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       nSub = pSub->n/sizeof(Vdbe*);
                     ^
sqlite-snapshot-201909031623/sqlite3.c:78387:14: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
       nSub = pSub->n/sizeof(Vdbe*);
              ^~~~
sqlite-snapshot-201909031623/sqlite3.c:78426:27: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       int nByte = (nSub+1)*sizeof(SubProgram*);
                           ^
sqlite-snapshot-201909031623/sqlite3.c:78426:19: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
       int nByte = (nSub+1)*sizeof(SubProgram*);
                   ^
sqlite-snapshot-201909031623/sqlite3.c:78440:23: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pSub->n = nSub*sizeof(SubProgram*);
                       ^
sqlite-snapshot-201909031623/sqlite3.c:78440:19: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
         pSub->n = nSub*sizeof(SubProgram*);
                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c:78521:23: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       p->nResColumn = 8 - 4*(p->explain-1);
                       ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeMakeReady’:
sqlite-snapshot-201909031623/sqlite3.c:78716:24: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   n = ROUND8(sizeof(Op)*p->nOp);              /* Bytes of opcode memory used */
                        ^
sqlite-snapshot-201909031623/sqlite3.c:14091:26: note: in definition of macro ‘ROUND8’
 #define ROUND8(x)     (((x)+7)&~7)
                          ^
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:78716:7: note: in expansion of macro ‘ROUND8’
   n = ROUND8(sizeof(Op)*p->nOp);              /* Bytes of opcode memory used */
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:23: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define ROUND8(x)     (((x)+7)&~7)
                       ^
sqlite-snapshot-201909031623/sqlite3.c:78716:7: note: in expansion of macro ‘ROUND8’
   n = ROUND8(sizeof(Op)*p->nOp);              /* Bytes of opcode memory used */
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:78724:24: warning: conversion to ‘unsigned char:1’ from ‘unsigned char’ may alter its value [-Wconversion]
   p->usesStmtJournal = (u8)(pParse->isMultiWrite && pParse->mayAbort);
                        ^
sqlite-snapshot-201909031623/sqlite3.c:78741:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->aMem = allocSpace(&x, 0, nMem*sizeof(Mem));
                                   ^
sqlite-snapshot-201909031623/sqlite3.c:78741:31: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
   p->aMem = allocSpace(&x, 0, nMem*sizeof(Mem));
                               ^~~~
sqlite-snapshot-201909031623/sqlite3.c:78742:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->aVar = allocSpace(&x, 0, nVar*sizeof(Mem));
                                   ^
sqlite-snapshot-201909031623/sqlite3.c:78742:31: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
   p->aVar = allocSpace(&x, 0, nVar*sizeof(Mem));
                               ^~~~
sqlite-snapshot-201909031623/sqlite3.c:78743:36: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->apArg = allocSpace(&x, 0, nArg*sizeof(Mem*));
                                    ^
sqlite-snapshot-201909031623/sqlite3.c:78743:32: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
   p->apArg = allocSpace(&x, 0, nArg*sizeof(Mem*));
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:78744:39: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->apCsr = allocSpace(&x, 0, nCursor*sizeof(VdbeCursor*));
                                       ^
sqlite-snapshot-201909031623/sqlite3.c:78744:32: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
   p->apCsr = allocSpace(&x, 0, nCursor*sizeof(VdbeCursor*));
                                ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:78749:52: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     x.pSpace = p->pFree = sqlite3DbMallocRawNN(db, x.nNeeded);
                                                    ^
sqlite-snapshot-201909031623/sqlite3.c:78752:45: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));
                                             ^
sqlite-snapshot-201909031623/sqlite3.c:78752:41: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
       p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));
                                         ^~~~
sqlite-snapshot-201909031623/sqlite3.c:78753:45: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));
                                             ^
sqlite-snapshot-201909031623/sqlite3.c:78753:41: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
       p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));
                                         ^~~~
sqlite-snapshot-201909031623/sqlite3.c:78754:47: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:78754:43: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
       p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));
                                           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:78755:50: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));
                                                  ^
sqlite-snapshot-201909031623/sqlite3.c:78755:43: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
       p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));
                                           ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:78764:16: warning: conversion to ‘unsigned char:2’ from ‘u8 {aka unsigned char}’ may alter its value [-Wconversion]
   p->explain = pParse->explain;
                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:78775:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(p->apCsr, 0, nCursor*sizeof(VdbeCursor*));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:78775:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:78775:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(p->apCsr, 0, nCursor*sizeof(VdbeCursor*));
                                ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeSetNumCols’:
sqlite-snapshot-201909031623/sqlite3.c:78911:59: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->aColName = (Mem*)sqlite3DbMallocRawNN(db, sizeof(Mem)*n );
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeDeleteAuxData’:
sqlite-snapshot-201909031623/sqlite3.c:79726:42: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           && (pAux->iAuxArg>31 || !(mask & MASKBIT32(pAux->iAuxArg))))
                                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeSerialPut’:
sqlite-snapshot-201909031623/sqlite3.c:80122:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(&v, &pMem->u.r, sizeof(v));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80122:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:80125:11: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
       v = pMem->u.i;
           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:80140:11: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     len = pMem->n;
           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:80141:17: warning: incompatible implicit declaration of built-in function ‘memcpy’
     if( len>0 ) memcpy(buf, pMem->z, len);
                 ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80141:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘serialGet’:
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:80172:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
   u64 x = FOUR_BYTE_UINT(buf);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:80172:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
   u64 x = FOUR_BYTE_UINT(buf);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:80173:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
   u32 y = FOUR_BYTE_UINT(buf+4);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:80173:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
   u32 y = FOUR_BYTE_UINT(buf+4);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80198:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&pMem->u.r, &x, sizeof(x));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80198:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeSerialGet’:
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:80261:19: note: in expansion of macro ‘FOUR_BYTE_UINT’
       pMem->u.i = FOUR_BYTE_UINT(buf+2) + (((i64)1)<<32)*TWO_BYTE_INT(buf);
                   ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:80261:19: note: in expansion of macro ‘FOUR_BYTE_UINT’
       pMem->u.i = FOUR_BYTE_UINT(buf+2) + (((i64)1)<<32)*TWO_BYTE_INT(buf);
                   ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80287:17: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       pMem->n = (serial_type-12)/2;
                 ^
sqlite-snapshot-201909031623/sqlite3.c:80289:18: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       return pMem->n;
              ~~~~^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeAllocUnpackedRecord’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:80313:11: note: in expansion of macro ‘ROUND8’
   nByte = ROUND8(sizeof(UnpackedRecord)) + sizeof(Mem)*(pKeyInfo->nKeyField+1);
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80313:55: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nByte = ROUND8(sizeof(UnpackedRecord)) + sizeof(Mem)*(pKeyInfo->nKeyField+1);
                                                       ^
sqlite-snapshot-201909031623/sqlite3.c:14091:23: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define ROUND8(x)     (((x)+7)&~7)
                       ^
sqlite-snapshot-201909031623/sqlite3.c:80313:11: note: in expansion of macro ‘ROUND8’
   nByte = ROUND8(sizeof(UnpackedRecord)) + sizeof(Mem)*(pKeyInfo->nKeyField+1);
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80314:58: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p = (UnpackedRecord *)sqlite3DbMallocRaw(pKeyInfo->db, nByte);
                                                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:80316:31: note: in expansion of macro ‘ROUND8’
   p->aMem = (Mem*)&((char*)p)[ROUND8(sizeof(UnpackedRecord))];
                               ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80319:15: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   p->nField = pKeyInfo->nKeyField + 1;
               ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbeRecordDecodeInt’:
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:80751:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
       y = FOUR_BYTE_UINT(aKey);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:80751:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
       y = FOUR_BYTE_UINT(aKey);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:80756:14: note: in expansion of macro ‘FOUR_BYTE_UINT’
       return FOUR_BYTE_UINT(aKey+2) + (((i64)1)<<32)*TWO_BYTE_INT(aKey);
              ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:80756:14: note: in expansion of macro ‘FOUR_BYTE_UINT’
       return FOUR_BYTE_UINT(aKey+2) + (((i64)1)<<32)*TWO_BYTE_INT(aKey);
              ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:80759:15: note: in expansion of macro ‘FOUR_BYTE_UINT’
       u64 x = FOUR_BYTE_UINT(aKey);
               ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:80759:15: note: in expansion of macro ‘FOUR_BYTE_UINT’
       u64 x = FOUR_BYTE_UINT(aKey);
               ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:80761:21: note: in expansion of macro ‘FOUR_BYTE_UINT’
       x = (x<<32) | FOUR_BYTE_UINT(aKey+4);
                     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:80761:21: note: in expansion of macro ‘FOUR_BYTE_UINT’
       x = (x<<32) | FOUR_BYTE_UINT(aKey+4);
                     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeRecordCompareWithSkip’:
sqlite-snapshot-201909031623/sqlite3.c:80810:12: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     idx1 = 1 + getVarint32(&aKey1[1], s1);
            ^
sqlite-snapshot-201909031623/sqlite3.c:80810:12: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
sqlite-snapshot-201909031623/sqlite3.c:80892:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
         mem1.n = (serial_type - 12) / 2;
                  ^
sqlite-snapshot-201909031623/sqlite3.c:80895:16: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         if( (d1+mem1.n) > (unsigned)nKey1
                ^
sqlite-snapshot-201909031623/sqlite3.c:80924:20: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
         int nStr = (serial_type - 12) / 2;
                    ^
sqlite-snapshot-201909031623/sqlite3.c:80927:16: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         if( (d1+nStr) > (unsigned)nKey1 ){
                ^
sqlite-snapshot-201909031623/sqlite3.c:80960:15: warning: implicit declaration of function ‘vdbeRecordCompareDebug’ [-Wimplicit-function-declaration]
       assert( vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, rc) );
               ^~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80969:10: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     idx1 += sqlite3VarintLen(serial_type);
          ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbeRecordCompareInt’:
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:81035:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
       y = FOUR_BYTE_UINT(aKey);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:81035:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
       y = FOUR_BYTE_UINT(aKey);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:81041:13: note: in expansion of macro ‘FOUR_BYTE_UINT’
       lhs = FOUR_BYTE_UINT(aKey+2) + (((i64)1)<<32)*TWO_BYTE_INT(aKey);
             ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:81041:13: note: in expansion of macro ‘FOUR_BYTE_UINT’
       lhs = FOUR_BYTE_UINT(aKey+2) + (((i64)1)<<32)*TWO_BYTE_INT(aKey);
             ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:81046:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
       x = FOUR_BYTE_UINT(aKey);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:81046:11: note: in expansion of macro ‘FOUR_BYTE_UINT’
       x = FOUR_BYTE_UINT(aKey);
           ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                              ^
sqlite-snapshot-201909031623/sqlite3.c:81047:21: note: in expansion of macro ‘FOUR_BYTE_UINT’
       x = (x<<32) | FOUR_BYTE_UINT(aKey+4);
                     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:80155:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define FOUR_BYTE_UINT(x)  (((u32)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:81047:21: note: in expansion of macro ‘FOUR_BYTE_UINT’
       x = (x<<32) | FOUR_BYTE_UINT(aKey+4);
                     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeIdxRowid’:
sqlite-snapshot-201909031623/sqlite3.c:81225:21: warning: conversion to ‘long long unsigned int’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   assert( (nCellKey & SQLITE_MAX_U32)==(u64)nCellKey );
                     ^
sqlite-snapshot-201909031623/sqlite3.c:81265:37: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   sqlite3VdbeSerialGet((u8*)&m.z[m.n-lenRowid], typeRowid, &v);
                                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExpirePreparedStatements’:
sqlite-snapshot-201909031623/sqlite3.c:81359:18: warning: conversion to ‘unsigned char:2’ from ‘int’ may alter its value [-Wconversion]
     p->expired = iCode+1;
                  ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘invokeProfileCallback’:
sqlite-snapshot-201909031623/sqlite3.c:81618:44: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     db->xProfile(db->pProfileArg, p->zSql, iElapse);
                                            ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_value_dup’:
sqlite-snapshot-201909031623/sqlite3.c:81883:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pNew, 0, sizeof(*pNew));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:81883:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:81884:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pNew, pOrig, MEMCELLSIZE);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:81884:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:81885:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pNew->flags &= ~MEM_Dyn;
                  ^
sqlite-snapshot-201909031623/sqlite3.c:81888:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pNew->flags &= ~(MEM_Static|MEM_Dyn);
                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ResultIntReal’:
sqlite-snapshot-201909031623/sqlite3.c:82120:26: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pCtx->pOut->flags &= ~MEM_Int;
                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Step’:
sqlite-snapshot-201909031623/sqlite3.c:82277:64: error: ‘Vdbe {aka struct Vdbe}’ has no member named ‘rcApp’
   assert( (p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE) || p->rc==p->rcApp );
                                                                ^~
sqlite-snapshot-201909031623/sqlite3.c:82277:61: warning: comparison between pointer and integer
   assert( (p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE) || p->rc==p->rcApp );
                                                             ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘createAggContext’:
sqlite-snapshot-201909031623/sqlite3.c:82422:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(pMem->z, 0, nByte);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:82422:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:82422:26: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset(pMem->z, 0, nByte);
                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_column_value’:
sqlite-snapshot-201909031623/sqlite3.c:82700:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pOut->flags &= ~MEM_Static;
                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_bind_zeroblob64’:
sqlite-snapshot-201909031623/sqlite3.c:83117:42: warning: conversion to ‘int’ from ‘sqlite3_uint64 {aka long long unsigned int}’ may alter its value [-Wconversion]
     rc = sqlite3_bind_zeroblob(pStmt, i, n);
                                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeExpandSql’:
sqlite-snapshot-201909031623/sqlite3.c:83743:11: warning: incompatible implicit declaration of built-in function ‘memset’
           memset(&utf8, 0, sizeof(utf8));
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:83743:11: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘allocateCursor’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:84048:7: note: in expansion of macro ‘ROUND8’
       ROUND8(sizeof(VdbeCursor)) + 2*sizeof(u32)*nField +
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:84048:49: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       ROUND8(sizeof(VdbeCursor)) + 2*sizeof(u32)*nField +
                                                 ^
sqlite-snapshot-201909031623/sqlite3.c:84048:57: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       ROUND8(sizeof(VdbeCursor)) + 2*sizeof(u32)*nField +
                                                         ^
sqlite-snapshot-201909031623/sqlite3.c:14091:23: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define ROUND8(x)     (((x)+7)&~7)
                       ^
sqlite-snapshot-201909031623/sqlite3.c:84048:7: note: in expansion of macro ‘ROUND8’
       ROUND8(sizeof(VdbeCursor)) + 2*sizeof(u32)*nField +
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:84063:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(pCx, 0, offsetof(VdbeCursor,pAltCursor));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:84063:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:84065:16: warning: conversion to ‘i8 {aka signed char}’ from ‘int’ may alter its value [-Wconversion]
     pCx->iDb = iDb;
                ^~~
sqlite-snapshot-201909031623/sqlite3.c:84066:19: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     pCx->nField = nField;
                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:84070:20: note: in expansion of macro ‘ROUND8’
           &pMem->z[ROUND8(sizeof(VdbeCursor))+2*sizeof(u32)*nField];
                    ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:84070:60: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           &pMem->z[ROUND8(sizeof(VdbeCursor))+2*sizeof(u32)*nField];
                                                            ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘alsoAnInt’:
sqlite-snapshot-201909031623/sqlite3.c:84084:16: warning: conversion to ‘i64 {aka long long int}’ from ‘double’ may alter its value [-Wfloat-conversion]
   i64 iValue = (double)rValue;
                ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘applyNumericAffinity’:
sqlite-snapshot-201909031623/sqlite3.c:84125:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pRec->flags &= ~MEM_Str;
                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘applyAffinity’:
sqlite-snapshot-201909031623/sqlite3.c:84176:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pRec->flags &= ~(MEM_Real|MEM_Int|MEM_IntReal);
                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ValueApplyAffinity’:
sqlite-snapshot-201909031623/sqlite3.c:84205:30: warning: conversion to ‘char’ from ‘u8 {aka unsigned char}’ may change the sign of the result [-Wsign-conversion]
   applyAffinity((Mem *)pVal, affinity, enc);
                              ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeExec’:
sqlite-snapshot-201909031623/sqlite3.c:85136:17: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pOut->flags = (pOut->flags&~(MEM_Undefined|MEM_AffMask))|MEM_Null;
                 ^
sqlite-snapshot-201909031623/sqlite3.c:85174:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pOut, pVar, MEMCELLSIZE);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:85174:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:85175:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pOut->flags &= ~(MEM_Dyn|MEM_Ephem);
                  ^
sqlite-snapshot-201909031623/sqlite3.c:85206:13: warning: implicit declaration of function ‘memIsValid’ [-Wimplicit-function-declaration]
     assert( memIsValid(pIn1) );
             ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:85399:14: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     flags1 = pIn1->flags & ~MEM_Str;
              ^~~~
sqlite-snapshot-201909031623/sqlite3.c:85402:14: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     flags1 = pIn1->flags & ~MEM_Str;
              ^~~~
sqlite-snapshot-201909031623/sqlite3.c:85407:14: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     flags2 = pIn2->flags & ~MEM_Str;
              ^~~~
sqlite-snapshot-201909031623/sqlite3.c:85410:14: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     flags2 = pIn2->flags & ~MEM_Str;
              ^~~~
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:85419:3: note: in expansion of macro ‘MemSetTypeFlag’
   MemSetTypeFlag(pOut, MEM_Str);
   ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:85421:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pOut->z, pIn2->z, pIn2->n);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:85421:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:85421:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pOut->z, pIn2->z, pIn2->n);
                              ^~~~
sqlite-snapshot-201909031623/sqlite3.c:85425:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&pOut->z[pIn2->n], pIn1->z, pIn1->n);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:85425:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:85425:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(&pOut->z[pIn2->n], pIn1->z, pIn1->n);
                                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:85516:5: note: in expansion of macro ‘MemSetTypeFlag’
     MemSetTypeFlag(pOut, MEM_Int);
     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:85550:5: note: in expansion of macro ‘MemSetTypeFlag’
     MemSetTypeFlag(pOut, MEM_Real);
     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:85642:12: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       op = 2*OP_ShiftLeft + 1 - op;
            ^
sqlite-snapshot-201909031623/sqlite3.c:85649:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(&uA, &iA, sizeof(uA));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:85649:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:85661:3: note: in expansion of macro ‘MemSetTypeFlag’
   MemSetTypeFlag(pOut, MEM_Int);
   ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:85703:3: note: in expansion of macro ‘MemSetTypeFlag’
   MemSetTypeFlag(pIn1, MEM_Int);
   ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:85755:28: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   sqlite3VdbeMemCast(pIn1, pOp->p2, encoding);
                            ^~~
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:85899:9: note: in expansion of macro ‘MemSetTypeFlag’
         MemSetTypeFlag(pOut, MEM_Null);
         ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:85943:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         flags1 = (pIn1->flags & ~MEM_TypeMask) | (flags1 & MEM_TypeMask);
                  ^
sqlite-snapshot-201909031623/sqlite3.c:85952:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         flags3 = (pIn3->flags & ~MEM_TypeMask) | (flags3 & MEM_TypeMask);
                  ^
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:86004:5: note: in expansion of macro ‘MemSetTypeFlag’
     MemSetTypeFlag(pOut, MEM_Int);
     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:86187:5: note: in expansion of macro ‘MemSetTypeFlag’
     MemSetTypeFlag(pOut, MEM_Null);
     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:86190:5: note: in expansion of macro ‘MemSetTypeFlag’
     MemSetTypeFlag(pOut, MEM_Int);
     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:86281:13: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     iAddr = (int)(pOp - p->aOp);
             ^
sqlite-snapshot-201909031623/sqlite3.c:86286:34: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     p->pFrame->aOnce[iAddr/8] |= 1<<(iAddr & 7);
                                  ^
sqlite-snapshot-201909031623/sqlite3.c:86467:39: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pC->payloadSize = pC->szRow = pReg->n;
                                       ^~~~
sqlite-snapshot-201909031623/sqlite3.c:86542:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(&sMem, 0, sizeof(sMem));
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:86542:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:86560:55: warning: conversion to ‘u8 {aka unsigned char}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
           offset64 += sqlite3VdbeOneByteSerialTypeLen(t);
                                                       ^
sqlite-snapshot-201909031623/sqlite3.c:86586:24: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pC->nHdrParsed = i;
                        ^
sqlite-snapshot-201909031623/sqlite3.c:86632:24: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       pDest->n = len = (t-12)/2;
                        ^
sqlite-snapshot-201909031623/sqlite3.c:86640:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pDest->z, zData, len);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:86640:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:86640:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(pDest->z, zData, len);
                               ^~~
sqlite-snapshot-201909031623/sqlite3.c:86650:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
      || (len = sqlite3VdbeSerialTypeLen(t))==0
                ^~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:86666:65: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       rc = sqlite3VdbeMemFromBtree(pC->uc.pCursor, aOffset[p2], len, pDest);
                                                                 ^~~
sqlite-snapshot-201909031623/sqlite3.c:86669:23: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pDest->flags &= ~MEM_Ephem;
                       ^
sqlite-snapshot-201909031623/sqlite3.c:86720:24: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         pIn1->flags &= ~MEM_Int;
                        ^
sqlite-snapshot-201909031623/sqlite3.c:86724:24: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         pIn1->flags &= ~MEM_Int;
                        ^
sqlite-snapshot-201909031623/sqlite3.c:86808:24: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         pRec->flags &= ~(MEM_Int);
                        ^
sqlite-snapshot-201909031623/sqlite3.c:86881:14: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
         uu = ~i;
              ^
sqlite-snapshot-201909031623/sqlite3.c:86883:14: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
         uu = i;
              ^
sqlite-snapshot-201909031623/sqlite3.c:86917:26: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
           pRec->flags &= ~MEM_IntReal;
                          ^
sqlite-snapshot-201909031623/sqlite3.c:86934:21: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         serial_type += pRec->u.nZero*2;
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:86937:15: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           len += pRec->u.nZero;
               ^~
sqlite-snapshot-201909031623/sqlite3.c:86961:32: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nVarint = sqlite3VarintLen(nHdr);
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:86963:34: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if( nVarint<sqlite3VarintLen(nHdr) ) nHdr++;
                                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c:86965:15: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nByte = nHdr+nData;
               ^
sqlite-snapshot-201909031623/sqlite3.c:86965:11: warning: conversion to ‘i64 {aka long long int}’ from ‘u64 {aka long long unsigned int}’ may change the sign of the result [-Wsign-conversion]
   nByte = nHdr+nData;
           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:86989:21: warning: conversion to ‘int’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
     pOut->u.nZero = nZero;
                     ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:19259:24: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   sqlite3PutVarint((A),(B)))
                        ^
sqlite-snapshot-201909031623/sqlite3.c:86997:11: note: in expansion of macro ‘putVarint32’
   zHdr += putVarint32(zHdr, nHdr);
           ^~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:87066:11: warning: implicit declaration of function ‘checkSavepointCount’ [-Wimplicit-function-declaration]
   assert( checkSavepointCount(db) );
           ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:87091:56: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pNew = sqlite3DbMallocRawNN(db, sizeof(Savepoint)+nName+1);
                                                        ^
sqlite-snapshot-201909031623/sqlite3.c:87094:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(pNew->zName, zName, nName+1);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:87094:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:87094:36: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memcpy(pNew->zName, zName, nName+1);
                                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:87453:11: warning: implicit declaration of function ‘sqlite3SchemaMutexHeld’ [-Wimplicit-function-declaration]
   assert( sqlite3SchemaMutexHeld(db, pOp->p1, 0) );
           ^~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:87455:50: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   rc = sqlite3BtreeUpdateMeta(pDb->pBt, pOp->p2, pOp->p3);
                                                  ^~~
sqlite-snapshot-201909031623/sqlite3.c:87462:33: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pDb->pSchema->file_format = pOp->p3;
                                 ^~~
sqlite-snapshot-201909031623/sqlite3.c:87639:20: warning: conversion to ‘Pgno {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pCur->pgnoRoot = p2;
                    ^~
sqlite-snapshot-201909031623/sqlite3.c:87687:40: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,
                                        ^~~
sqlite-snapshot-201909031623/sqlite3.c:87747:46: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);
                                              ^~~
sqlite-snapshot-201909031623/sqlite3.c:87773:46: warning: conversion to ‘int’ from ‘Pgno {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
           rc = sqlite3BtreeCursor(pCx->pBtx, pCx->pgnoRoot, BTREE_WRCSR,
                                              ^~~
sqlite-snapshot-201909031623/sqlite3.c:88073:56: warning: conversion to ‘i64 {aka long long int}’ from ‘long long unsigned int’ may change the sign of the result [-Wsign-conversion]
     rc = sqlite3BtreeMovetoUnpacked(pC->uc.pCursor, 0, (u64)iKey, 0, &res);
                                                        ^
sqlite-snapshot-201909031623/sqlite3.c:88191:17: warning: conversion to ‘unsigned char:1’ from ‘int’ may alter its value [-Wconversion]
   pC->seekHit = pOp->p2 & 1;
                 ^~~
sqlite-snapshot-201909031623/sqlite3.c:88358:17: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pC->nullRow = 1-alreadyExists;
                 ^
sqlite-snapshot-201909031623/sqlite3.c:88454:10: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   iKey = pIn3->u.i;
          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:88455:45: warning: conversion to ‘i64 {aka long long int}’ from ‘u64 {aka long long unsigned int}’ may change the sign of the result [-Wsign-conversion]
   rc = sqlite3BtreeMovetoUnpacked(pCrsr, 0, iKey, 0, &res);
                                             ^~~~
sqlite-snapshot-201909031623/sqlite3.c:88457:22: warning: conversion to ‘i64 {aka long long int}’ from ‘u64 {aka long long unsigned int}’ may change the sign of the result [-Wsign-conversion]
   pC->movetoTarget = iKey;  /* Used by OP_Delete */
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:88610:69: warning: conversion to ‘i64 {aka long long int}’ from ‘long long unsigned int’ may change the sign of the result [-Wsign-conversion]
       }while(  ((rc = sqlite3BtreeMovetoUnpacked(pC->uc.pCursor, 0, (u64)v,
                                                                     ^
sqlite-snapshot-201909031623/sqlite3.c:88859:43: warning: conversion to ‘u8 {aka unsigned char}’ from ‘u16 {aka short unsigned int}’ may alter its value [-Wconversion]
   rc = sqlite3BtreeDelete(pC->uc.pCursor, pOp->p5);
                                           ^~~
sqlite-snapshot-201909031623/sqlite3.c:89335:13: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE
             ^~
sqlite-snapshot-201909031623/sqlite3.c:89335:21: warning: comparison between pointer and integer
        || pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:89335:38: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE
                                      ^~
sqlite-snapshot-201909031623/sqlite3.c:89335:46: warning: comparison between pointer and integer
        || pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE
                                              ^~
sqlite-snapshot-201909031623/sqlite3.c:89336:13: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found
             ^~
sqlite-snapshot-201909031623/sqlite3.c:89336:21: warning: comparison between pointer and integer
        || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:89336:38: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found
                                      ^~
sqlite-snapshot-201909031623/sqlite3.c:89336:46: warning: comparison between pointer and integer
        || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found
                                              ^~
sqlite-snapshot-201909031623/sqlite3.c:89337:13: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_NullRow|| pC->seekOp==OP_SeekRowid
             ^~
sqlite-snapshot-201909031623/sqlite3.c:89337:21: warning: comparison between pointer and integer
        || pC->seekOp==OP_NullRow|| pC->seekOp==OP_SeekRowid
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:89337:38: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_NullRow|| pC->seekOp==OP_SeekRowid
                                      ^~
sqlite-snapshot-201909031623/sqlite3.c:89337:46: warning: comparison between pointer and integer
        || pC->seekOp==OP_NullRow|| pC->seekOp==OP_SeekRowid
                                              ^~
sqlite-snapshot-201909031623/sqlite3.c:89338:13: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_IfNoHope);
             ^~
sqlite-snapshot-201909031623/sqlite3.c:89338:21: warning: comparison between pointer and integer
        || pC->seekOp==OP_IfNoHope);
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:89340:13: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE
             ^~
sqlite-snapshot-201909031623/sqlite3.c:89340:21: warning: comparison between pointer and integer
        || pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:89340:38: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE
                                      ^~
sqlite-snapshot-201909031623/sqlite3.c:89340:46: warning: comparison between pointer and integer
        || pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE
                                              ^~
sqlite-snapshot-201909031623/sqlite3.c:89341:13: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_Last   || pC->seekOp==OP_IfNoHope
             ^~
sqlite-snapshot-201909031623/sqlite3.c:89341:21: warning: comparison between pointer and integer
        || pC->seekOp==OP_Last   || pC->seekOp==OP_IfNoHope
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:89341:38: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_Last   || pC->seekOp==OP_IfNoHope
                                      ^~
sqlite-snapshot-201909031623/sqlite3.c:89341:46: warning: comparison between pointer and integer
        || pC->seekOp==OP_Last   || pC->seekOp==OP_IfNoHope
                                              ^~
sqlite-snapshot-201909031623/sqlite3.c:89342:13: error: ‘VdbeCursor {aka struct VdbeCursor}’ has no member named ‘seekOp’; did you mean ‘seekHit’?
        || pC->seekOp==OP_NullRow);
             ^~
sqlite-snapshot-201909031623/sqlite3.c:89342:21: warning: comparison between pointer and integer
        || pC->seekOp==OP_NullRow);
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:89702:28: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       resetSchemaOnFault = iDb+1;
                            ^~~
sqlite-snapshot-201909031623/sqlite3.c:89847:18: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     db->mDbFlags &= ~DBFLAG_SchemaKnownOk;
                  ^~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:90174:13: note: in expansion of macro ‘ROUND8’
     nByte = ROUND8(sizeof(VdbeFrame))
             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:90175:22: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
               + nMem * sizeof(Mem)
                      ^
sqlite-snapshot-201909031623/sqlite3.c:90176:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
               + pProgram->nCsr * sizeof(VdbeCursor*)
                                ^
sqlite-snapshot-201909031623/sqlite3.c:90177:15: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
               + (pProgram->nOp + 7)/8;
               ^
sqlite-snapshot-201909031623/sqlite3.c:14091:23: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define ROUND8(x)     (((x)+7)&~7)
                       ^
sqlite-snapshot-201909031623/sqlite3.c:90174:13: note: in expansion of macro ‘ROUND8’
     nByte = ROUND8(sizeof(VdbeFrame))
             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:90178:38: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pFrame = sqlite3DbMallocZero(db, nByte);
                                      ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:20268:44: note: in expansion of macro ‘ROUND8’
 #define VdbeFrameMem(p) ((Mem *)&((u8 *)p)[ROUND8(sizeof(VdbeFrame))])
                                            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:90206:13: note: in expansion of macro ‘VdbeFrameMem’
     pEnd = &VdbeFrameMem(pFrame)[pFrame->nChildMem];
             ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:20268:44: note: in expansion of macro ‘ROUND8’
 #define VdbeFrameMem(p) ((Mem *)&((u8 *)p)[ROUND8(sizeof(VdbeFrame))])
                                            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:90207:14: note: in expansion of macro ‘VdbeFrameMem’
     for(pMem=VdbeFrameMem(pFrame); pMem!=pEnd; pMem++){
              ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:20268:44: note: in expansion of macro ‘ROUND8’
 #define VdbeFrameMem(p) ((Mem *)&((u8 *)p)[ROUND8(sizeof(VdbeFrame))])
                                            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:90230:20: note: in expansion of macro ‘VdbeFrameMem’
   p->aMem = aMem = VdbeFrameMem(pFrame);
                    ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:90235:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pFrame->aOnce, 0, (pProgram->nOp + 7)/8);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:90235:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:90235:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(pFrame->aOnce, 0, (pProgram->nOp + 7)/8);
                            ^
sqlite-snapshot-201909031623/sqlite3.c:90501:36: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pCtx = sqlite3DbMallocRawNN(db, n*sizeof(sqlite3_value*) +
                                    ^
sqlite-snapshot-201909031623/sqlite3.c:90512:16: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pCtx->argc = n;
                ^
sqlite-snapshot-201909031623/sqlite3.c:90854:18: warning: conversion to ‘unsigned char:2’ from ‘int’ may alter its value [-Wconversion]
     p->expired = pOp->p2+1;
                  ^~~
sqlite-snapshot-201909031623/sqlite3.c:90925:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sMem, 0, sizeof(sMem));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:90925:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:91101:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sContext, 0, sizeof(sContext));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:91101:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:91109:5: note: in expansion of macro ‘MemSetTypeFlag’
     MemSetTypeFlag(pDest, MEM_Null);
     ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:91267:26: warning: conversion to ‘u8 {aka unsigned char}’ from ‘u16 {aka short unsigned int}’ may alter its value [-Wconversion]
     db->vtabOnConflict = pOp->p5;
                          ^~~
sqlite-snapshot-201909031623/sqlite3.c:91279:26: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
         p->errorAction = ((pOp->p5==OE_Replace) ? OE_Abort : pOp->p5);
                          ^
sqlite-snapshot-201909031623/sqlite3.c:91323:45: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
   pOut->u.i = sqlite3BtreeMaxPageCount(pBt, newMax);
                                             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:91379:56: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pCtx = sqlite3DbMallocRawNN(db, sizeof(*pCtx) + (n-1)*sizeof(sqlite3_value*));
                                                        ^
sqlite-snapshot-201909031623/sqlite3.c:91386:16: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pCtx->argc = n;
                ^
sqlite-snapshot-201909031623/sqlite3.c:91391:18: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pOp->opcode += 2;
                  ^
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:91419:3: note: in expansion of macro ‘MemSetTypeFlag’
   MemSetTypeFlag(pOut, MEM_Null);
   ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:91673:42: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->aCounter[SQLITE_STMTSTATUS_VM_STEP] += (int)nVmStep;
                                          ^~
sqlite-snapshot-201909031623/sqlite3.c:91675:28: error: ‘nExtraDelete’ undeclared (first use in this function)
   assert( rc!=SQLITE_OK || nExtraDelete==0
                            ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘blobSeekToRow’:
sqlite-snapshot-201909031623/sqlite3.c:91798:20: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       p->iOffset = pC->aType[p->iCol + pC->nField];
                    ^~
sqlite-snapshot-201909031623/sqlite3.c:91799:18: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       p->nByte = sqlite3VdbeSerialTypeLen(type);
                  ^~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_blob_open’:
sqlite-snapshot-201909031623/sqlite3.c:91862:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&sParse, 0, sizeof(Parse));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:91862:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:92033:19: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pBlob->iCol = iCol;
                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘blobReadWrite’:
sqlite-snapshot-201909031623/sqlite3.c:92137:25: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     rc = xCall(p->pCsr, iOffset+p->iOffset, n, z);
                         ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:92137:45: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     rc = xCall(p->pCsr, iOffset+p->iOffset, n, z);
                                             ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbePmaReaderClear’:
sqlite-snapshot-201909031623/sqlite3.c:92694:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pReadr, 0, sizeof(PmaReader));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:92694:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbePmaReadBlob’:
sqlite-snapshot-201909031623/sqlite3.c:92725:10: warning: conversion to ‘int’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
   iBuf = p->iReadOff % p->nBuffer;
          ^
sqlite-snapshot-201909031623/sqlite3.c:92762:40: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
       aNew = sqlite3Realloc(p->aAlloc, nNew);
                                        ^~~~
sqlite-snapshot-201909031623/sqlite3.c:92764:19: warning: conversion to ‘int’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
       p->nAlloc = nNew;
                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c:92770:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(p->aAlloc, &p->aBuffer[iBuf], nAvail);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:92770:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:92770:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(p->aAlloc, &p->aBuffer[iBuf], nAvail);
                                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:92786:47: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(&p->aAlloc[nByte - nRem], aNext, nCopy);
                                               ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbePmaReadVarint’:
sqlite-snapshot-201909031623/sqlite3.c:92806:12: warning: conversion to ‘int’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
     iBuf = p->iReadOff % p->nBuffer;
            ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbePmaReaderSeek’:
sqlite-snapshot-201909031623/sqlite3.c:92872:16: warning: conversion to ‘int’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
     int iBuf = pReadr->iReadOff % pgsz;
                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:92874:44: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pReadr->aBuffer = (u8*)sqlite3Malloc(pgsz);
                                            ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbePmaReaderInit’:
sqlite-snapshot-201909031623/sqlite3.c:92962:37: warning: conversion to ‘long long unsigned int’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     pReadr->iEof = pReadr->iReadOff + nByte;
                                     ^
sqlite-snapshot-201909031623/sqlite3.c:92962:20: warning: conversion to ‘i64 {aka long long int}’ from ‘long long unsigned int’ may change the sign of the result [-Wsign-conversion]
     pReadr->iEof = pReadr->iReadOff + nByte;
                    ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:92963:13: warning: conversion to ‘long long unsigned int’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     *pnByte += nByte;
             ^~
sqlite-snapshot-201909031623/sqlite3.c:92963:16: warning: conversion to ‘i64 {aka long long int}’ from ‘long long unsigned int’ may change the sign of the result [-Wsign-conversion]
     *pnByte += nByte;
                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeSorterInit’:
sqlite-snapshot-201909031623/sqlite3.c:93185:62: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   szKeyInfo = sizeof(KeyInfo) + (pCsr->pKeyInfo->nKeyField-1)*sizeof(CollSeq*);
                                                              ^
sqlite-snapshot-201909031623/sqlite3.c:93185:15: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   szKeyInfo = sizeof(KeyInfo) + (pCsr->pKeyInfo->nKeyField-1)*sizeof(CollSeq*);
               ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93186:37: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   sz = sizeof(VdbeSorter) + nWorker * sizeof(SortSubtask);
                                     ^
sqlite-snapshot-201909031623/sqlite3.c:93186:8: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   sz = sizeof(VdbeSorter) + nWorker * sizeof(SortSubtask);
        ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93188:50: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pSorter = (VdbeSorter*)sqlite3DbMallocZero(db, sz + szKeyInfo);
                                                  ^~
sqlite-snapshot-201909031623/sqlite3.c:93194:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pKeyInfo, pCsr->pKeyInfo, szKeyInfo);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93194:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:93194:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pKeyInfo, pCsr->pKeyInfo, szKeyInfo);
                                      ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93197:29: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pKeyInfo->nKeyField = nField;
                             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93200:22: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pSorter->nTask = nWorker + 1;
                      ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93212:34: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pSorter->mnPmaSize = szPma * pgsz;
                                  ^
sqlite-snapshot-201909031623/sqlite3.c:93212:28: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       pSorter->mnPmaSize = szPma * pgsz;
                            ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:93230:52: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pSorter->list.aMemory = (u8*)sqlite3Malloc(pgsz);
                                                    ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbeSortSubtaskCleanup’:
sqlite-snapshot-201909031623/sqlite3.c:93282:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pTask, 0, sizeof(SortSubtask));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93282:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbeMergeEngineNew’:
sqlite-snapshot-201909031623/sqlite3.c:93400:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nByte = sizeof(MergeEngine) + N * (sizeof(int) + sizeof(PmaReader));
                                   ^
sqlite-snapshot-201909031623/sqlite3.c:93400:11: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   nByte = sizeof(MergeEngine) + N * (sizeof(int) + sizeof(PmaReader));
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93402:69: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pNew = sqlite3FaultSim(100) ? 0 : (MergeEngine*)sqlite3MallocZero(nByte);
                                                                     ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbePmaWriterInit’:
sqlite-snapshot-201909031623/sqlite3.c:93679:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(PmaWriter));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93679:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:93680:35: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->aBuffer = (u8*)sqlite3Malloc(nBuf);
                                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c:93684:33: warning: conversion to ‘int’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
     p->iBufEnd = p->iBufStart = (iStart % nBuf);
                                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbePmaWriteBlob’:
sqlite-snapshot-201909031623/sqlite3.c:93703:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&p->aBuffer[p->iBufEnd], &pData[nData-nRem], nCopy);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93703:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:93703:57: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(&p->aBuffer[p->iBufEnd], &pData[nData-nRem], nCopy);
                                                         ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbePmaWriterFinish’:
sqlite-snapshot-201909031623/sqlite3.c:93739:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(PmaWriter));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93739:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbeSorterListToPMA’:
sqlite-snapshot-201909031623/sqlite3.c:93780:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&writer, 0, sizeof(PmaWriter));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:93780:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:93808:33: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     vdbePmaWriteVarint(&writer, pList->szPMA);
                                 ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:93811:35: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       vdbePmaWriteVarint(&writer, p->nVal);
                                   ^
sqlite-snapshot-201909031623/sqlite3.c:93821:46: error: ‘iSz’ undeclared (first use in this function)
   assert( rc!=SQLITE_OK || pTask->file.iEof==iSz );
                                              ^~~
sqlite-snapshot-201909031623/sqlite3.c:93821:44: warning: comparison between pointer and integer
   assert( rc!=SQLITE_OK || pTask->file.iEof==iSz );
                                            ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbeSorterFlushPMA’:
sqlite-snapshot-201909031623/sqlite3.c:93972:47: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pSorter->list.aMemory = sqlite3Malloc(pSorter->nMemory);
                                               ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeSorterWrite’:
sqlite-snapshot-201909031623/sqlite3.c:94028:18: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nReq = pVal->n + sizeof(SorterRecord);
                  ^
sqlite-snapshot-201909031623/sqlite3.c:94028:10: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   nReq = pVal->n + sizeof(SorterRecord);
          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:94029:37: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nPMA = pVal->n + sqlite3VarintLen(pVal->n);
                                     ^~~~
sqlite-snapshot-201909031623/sqlite3.c:94060:20: warning: conversion to ‘int’ from ‘long int’ may alter its value [-Wconversion]
         iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;
                    ^
sqlite-snapshot-201909031623/sqlite3.c:94065:52: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
       aNew = sqlite3Realloc(pSorter->list.aMemory, nNew);
                                                    ^~~~
sqlite-snapshot-201909031623/sqlite3.c:94071:26: warning: conversion to ‘int’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
       pSorter->nMemory = nNew;
                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:94080:42: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pNew = (SorterRecord *)sqlite3Malloc(nReq);
                                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:94087:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(SRVAL(pNew), pVal->z, pVal->n);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:94087:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:94087:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(SRVAL(pNew), pVal->z, pVal->n);
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vdbeIncrPopulate’:
sqlite-snapshot-201909031623/sqlite3.c:94121:41: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     if( (iEof + nKey + sqlite3VarintLen(nKey))>(iStart + pIncr->mxSz) ) break;
                                         ^~~~
sqlite-snapshot-201909031623/sqlite3.c:94124:33: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     vdbePmaWriteVarint(&writer, nKey);
                                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeSorterRowkey’:
sqlite-snapshot-201909031623/sqlite3.c:20359:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
    ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:94929:3: note: in expansion of macro ‘MemSetTypeFlag’
   MemSetTypeFlag(pOut, MEM_Blob);
   ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:94930:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pOut->z, pKey, nKey);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:94930:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:94930:25: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(pOut->z, pKey, nKey);
                         ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VdbeSorterCompare’:
sqlite-snapshot-201909031623/sqlite3.c:94970:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     r2->nField = nKeyCol;
                  ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘memjrnlRead’:
sqlite-snapshot-201909031623/sqlite3.c:95108:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(zOut, (u8*)pChunk->zChunk + iChunkOffset, nCopy);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:95108:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:95108:54: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(zOut, (u8*)pChunk->zChunk + iChunkOffset, nCopy);
                                                      ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘memjrnlCreateFile’:
sqlite-snapshot-201909031623/sqlite3.c:95140:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(MemJournal));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:95140:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:95148:18: warning: conversion to ‘int’ from ‘long long int’ may alter its value [-Wconversion]
         nChunk = copy.endpoint.iOffset - iOff;
                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘memjrnlWrite’:
sqlite-snapshot-201909031623/sqlite3.c:95041:54: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define fileChunkSize(nChunkSize) (sizeof(FileChunk) + ((nChunkSize)-8))
                                                      ^
sqlite-snapshot-201909031623/sqlite3.c:95219:44: note: in expansion of macro ‘fileChunkSize’
           FileChunk *pNew = sqlite3_malloc(fileChunkSize(p->nChunkSize));
                                            ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:95041:35: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define fileChunkSize(nChunkSize) (sizeof(FileChunk) + ((nChunkSize)-8))
                                   ^
sqlite-snapshot-201909031623/sqlite3.c:95219:44: note: in expansion of macro ‘fileChunkSize’
           FileChunk *pNew = sqlite3_malloc(fileChunkSize(p->nChunkSize));
                                            ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:95234:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy((u8*)p->endpoint.pChunk->zChunk + iChunkOffset, zWrite, iSpace);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:95234:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:95234:72: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memcpy((u8*)p->endpoint.pChunk->zChunk + iChunkOffset, zWrite, iSpace);
                                                                        ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:95239:18: warning: conversion to ‘int’ from ‘sqlite_int64 {aka long long int}’ may alter its value [-Wconversion]
       p->nSize = iAmt + iOfst;
                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3JournalOpen’:
sqlite-snapshot-201909031623/sqlite3.c:95345:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(MemJournal));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:95345:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:95041:54: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define fileChunkSize(nChunkSize) (sizeof(FileChunk) + ((nChunkSize)-8))
                                                      ^
sqlite-snapshot-201909031623/sqlite3.c:95354:44: note: in expansion of macro ‘fileChunkSize’
     assert( MEMJOURNAL_DFLT_FILECHUNKSIZE==fileChunkSize(p->nChunkSize) );
                                            ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘incrAggDepth’:
sqlite-snapshot-201909031623/sqlite3.c:95660:50: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   if( pExpr->op==TK_AGG_FUNCTION ) pExpr->op2 += pWalker->u.n;
                                                  ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘incrAggFunctionDepth’:
sqlite-snapshot-201909031623/sqlite3.c:95666:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&w, 0, sizeof(w));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:95666:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘resolveAlias’:
sqlite-snapshot-201909031623/sqlite3.c:95724:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pExpr, pDup, sizeof(*pExpr));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:95724:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘lookupName’:
sqlite-snapshot-201909031623/sqlite3.c:95898:32: warning: conversion to ‘ynVar {aka short int}’ from ‘int’ may alter its value [-Wconversion]
               pExpr->iColumn = j;
                                ^
sqlite-snapshot-201909031623/sqlite3.c:96002:32: warning: conversion to ‘ynVar {aka short int}’ from ‘int’ may alter its value [-Wconversion]
               pExpr->iColumn = iCol;
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:96198:15: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pExpr->op = eNewExprOp;
               ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘resolveExprStep’:
sqlite-snapshot-201909031623/sqlite3.c:96572:27: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             pNC2->ncFlags |= NC_HasAgg | (pDef->funcFlags & SQLITE_FUNC_MINMAX);
                           ^~
sqlite-snapshot-201909031623/sqlite3.c:17811:22: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
 #define NC_HasAgg    0x0010  /* One or more aggregate functions seen */
                      ^
sqlite-snapshot-201909031623/sqlite3.c:96572:30: note: in expansion of macro ‘NC_HasAgg’
             pNC2->ncFlags |= NC_HasAgg | (pDef->funcFlags & SQLITE_FUNC_MINMAX);
                              ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘resolveOrderByTermToExprList’:
sqlite-snapshot-201909031623/sqlite3.c:96728:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&nc, 0, sizeof(nc));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:96728:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘windowRemoveExprFromSelect’:
sqlite-snapshot-201909031623/sqlite3.c:96952:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&sWalker, 0, sizeof(Walker));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:96952:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘resolveOrderGroupBy’:
sqlite-snapshot-201909031623/sqlite3.c:97032:34: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         pItem->u.x.iOrderByCol = j+1;
                                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘resolveSelectStep’:
sqlite-snapshot-201909031623/sqlite3.c:97086:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&sNC, 0, sizeof(sNC));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:97086:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:97152:19: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       p->selFlags |= SF_Aggregate | (sNC.ncFlags&NC_MinMaxAgg);
                   ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ResolveSelfReference’:
sqlite-snapshot-201909031623/sqlite3.c:97435:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sNC, 0, sizeof(sNC));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:97435:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘binaryCompareP5’:
sqlite-snapshot-201909031623/sqlite3.c:97754:12: warning: conversion to ‘u8 {aka unsigned char}’ from ‘char’ may change the sign of the result [-Wsign-conversion]
   u8 aff = (char)sqlite3ExprAffinity(pExpr2);
            ^
sqlite-snapshot-201909031623/sqlite3.c:97755:44: warning: conversion to ‘char’ from ‘u8 {aka unsigned char}’ may change the sign of the result [-Wsign-conversion]
   aff = (u8)sqlite3CompareAffinity(pExpr1, aff) | (u8)jumpIfNull;
                                            ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprForVectorField’:
sqlite-snapshot-201909031623/sqlite3.c:97921:23: warning: conversion to ‘ynVar {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       pRet->iColumn = iField;
                       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprAlloc’:
sqlite-snapshot-201909031623/sqlite3.c:98225:16: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
       nExtra = pToken->n+1;
                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98229:47: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pNew = sqlite3DbMallocRawNN(db, sizeof(Expr)+nExtra);
                                               ^
sqlite-snapshot-201909031623/sqlite3.c:98231:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(pNew, 0, sizeof(Expr));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98231:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:98236:21: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pNew->flags |= EP_IntValue|EP_Leaf|(iValue?EP_IsTrue:EP_IsFalse);
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:98241:25: warning: incompatible implicit declaration of built-in function ‘memcpy’
         if( pToken->n ) memcpy(pNew->u.zToken, pToken->z, pToken->n);
                         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98241:25: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Expr’:
sqlite-snapshot-201909031623/sqlite3.c:98266:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   x.n = sqlite3Strlen30(zToken);
         ^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3PExpr’:
sqlite-snapshot-201909031623/sqlite3.c:98315:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(p, 0, sizeof(Expr));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98315:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:98316:13: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     p->op = op & 0xff;
             ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprAssignVarNumber’:
sqlite-snapshot-201909031623/sqlite3.c:98437:43: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
         bOk = 0==sqlite3Atoi64(&z[1], &i, n-1, SQLITE_UTF8);
                                           ^
sqlite-snapshot-201909031623/sqlite3.c:98460:59: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       x = (ynVar)sqlite3VListNameToNum(pParse->pVList, z, n);
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:98467:63: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       pParse->pVList = sqlite3VListAdd(db, pParse->pVList, z, n, x);
                                                               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘dupedExprNodeSize’:
sqlite-snapshot-201909031623/sqlite3.c:18750:31: warning: incompatible implicit declaration of built-in function ‘strlen’
 #define sqlite3Strlen30NN(C) (strlen(C)&0x3fffffff)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:98613:14: note: in expansion of macro ‘sqlite3Strlen30NN’
     nByte += sqlite3Strlen30NN(p->u.zToken)+1;
              ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:18750:31: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
 #define sqlite3Strlen30NN(C) (strlen(C)&0x3fffffff)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:98613:14: note: in expansion of macro ‘sqlite3Strlen30NN’
     nByte += sqlite3Strlen30NN(p->u.zToken)+1;
              ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98613:11: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nByte += sqlite3Strlen30NN(p->u.zToken)+1;
           ^~
sqlite-snapshot-201909031623/sqlite3.c:18750:30: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define sqlite3Strlen30NN(C) (strlen(C)&0x3fffffff)
                              ^
sqlite-snapshot-201909031623/sqlite3.c:98613:14: note: in expansion of macro ‘sqlite3Strlen30NN’
     nByte += sqlite3Strlen30NN(p->u.zToken)+1;
              ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprDup’:
sqlite-snapshot-201909031623/sqlite3.c:98665:39: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     zAlloc = sqlite3DbMallocRawNN(db, dupedExprSize(p, dupFlags));
                                       ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98676:34: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     const unsigned nStructSize = dupedExprStructSize(p, dupFlags);
                                  ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98686:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(zAlloc, p, nNewSize);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98686:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:98686:25: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(zAlloc, p, nNewSize);
                         ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98689:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(zAlloc, p, nSize);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98689:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:98691:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(&zAlloc[nSize], 0, EXPR_FULLSIZE-nSize);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98691:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:98696:17: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     pNew->flags &= ~(EP_Reduced|EP_TokenOnly|EP_Static|EP_MemToken);
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:98703:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(zToken, p->u.zToken, nToken);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98703:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:98703:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(zToken, p->u.zToken, nToken);
                                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘withDup’:
sqlite-snapshot-201909031623/sqlite3.c:98758:56: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     sqlite3_int64 nByte = sizeof(*p) + sizeof(p->a[0]) * (p->nCte-1);
                                                        ^
sqlite-snapshot-201909031623/sqlite3.c:98758:27: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     sqlite3_int64 nByte = sizeof(*p) + sizeof(p->a[0]) * (p->nCte-1);
                           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98759:36: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     pRet = sqlite3DbMallocZero(db, nByte);
                                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprListDup’:
sqlite-snapshot-201909031623/sqlite3.c:98837:35: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pNew = sqlite3DbMallocRawNN(db, sqlite3DbMallocSize(db, p));
                                   ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3SrcListDup’:
sqlite-snapshot-201909031623/sqlite3.c:98888:53: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nByte = sizeof(*p) + (p->nSrc>0 ? sizeof(p->a[0]) * (p->nSrc-1) : 0);
                                                     ^
sqlite-snapshot-201909031623/sqlite3.c:98888:11: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   nByte = sizeof(*p) + (p->nSrc>0 ? sizeof(p->a[0]) * (p->nSrc-1) : 0);
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:98889:35: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pNew = sqlite3DbMallocRawNN(db, nByte );
                                   ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:98891:31: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pNew->nSrc = pNew->nAlloc = p->nSrc;
                               ^
sqlite-snapshot-201909031623/sqlite3.c:98891:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   pNew->nSrc = pNew->nAlloc = p->nSrc;
                ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3IdListDup’:
sqlite-snapshot-201909031623/sqlite3.c:98931:44: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pNew->a = sqlite3DbMallocRawNN(db, p->nId*sizeof(p->a[0]) );
                                            ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3SelectDup’:
sqlite-snapshot-201909031623/sqlite3.c:98969:34: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     pNew->selFlags = p->selFlags & ~SF_UsesEphemeral;
                                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprListAppend’:
sqlite-snapshot-201909031623/sqlite3.c:99027:58: warning: conversion to ‘long long unsigned int’ from ‘long long int’ may change the sign of the result [-Wsign-conversion]
          sizeof(*pList)+(2*(sqlite3_int64)pList->nExpr-1)*sizeof(pList->a[0]));
                                                          ^
sqlite-snapshot-201909031623/sqlite3.c:99036:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&pItem->zName,0,sizeof(*pItem)-offsetof(struct ExprList_item,zName));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:99036:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprIsConst’:
sqlite-snapshot-201909031623/sqlite3.c:99421:13: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   w.eCode = initFlag;
             ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3FindInIndex’:
sqlite-snapshot-201909031623/sqlite3.c:99901:11: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     iDb = sqlite3SchemaToIndex(db, pTab->pSchema);
           ^~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprINAffinity’:
sqlite-snapshot-201909031623/sqlite3.c:100081:41: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   zRet = sqlite3DbMallocRaw(pParse->db, nVal+1);
                                         ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3CodeRhsOfIN’:
sqlite-snapshot-201909031623/sqlite3.c:100259:15: warning: implicit declaration of function ‘sqlite3KeyInfoIsWriteable’ [-Wimplicit-function-declaration]
       assert( sqlite3KeyInfoIsWriteable(pKeyInfo) );
               ^~~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:17566:44: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ExprClearProperty(E,P)   (E)->flags&=~(P)
                                            ^
sqlite-snapshot-201909031623/sqlite3.c:100302:9: note: in expansion of macro ‘ExprClearProperty’
         ExprClearProperty(pExpr, EP_Subrtn);
         ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprCodeIN’:
sqlite-snapshot-201909031623/sqlite3.c:100515:26: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pParse->db, nVector*(sizeof(int) + sizeof(char)) + 1
                          ^
sqlite-snapshot-201909031623/sqlite3.c:100602:32: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘char’ may change the sign of the result [-Wsign-conversion]
         sqlite3VdbeChangeP5(v, zAff[0]);
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:100607:32: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘signed char’ may change the sign of the result [-Wsign-conversion]
         sqlite3VdbeChangeP5(v, zAff[0] | SQLITE_JUMPIFNULL);
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprCodeGetColumnOfTable’:
sqlite-snapshot-201909031623/sqlite3.c:100830:62: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       x = sqlite3ColumnOfIndex(sqlite3PrimaryKeyIndex(pTab), iCol);
                                                              ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprToRegister’:
sqlite-snapshot-201909031623/sqlite3.c:17566:44: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ExprClearProperty(E,P)   (E)->flags&=~(P)
                                            ^
sqlite-snapshot-201909031623/sqlite3.c:100882:3: note: in expansion of macro ‘ExprClearProperty’
   ExprClearProperty(p, EP_Skip);
   ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprCodeTarget’:
sqlite-snapshot-201909031623/sqlite3.c:101100:50: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
         codeVectorCompare(pParse, pExpr, target, op, p5);
                                                  ^~
sqlite-snapshot-201909031623/sqlite3.c:101100:54: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
         codeVectorCompare(pParse, pExpr, target, op, p5);
                                                      ^~
sqlite-snapshot-201909031623/sqlite3.c:101375:27: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
                           constMask, r1, target, (char*)pDef, P4_FUNCDEF);
                           ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:101577:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(&opCompare, 0, sizeof(opCompare));
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:101577:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprCodeExprList’:
sqlite-snapshot-201909031623/sqlite3.c:101823:41: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   if( !ConstFactorOk(pParse) ) flags &= ~SQLITE_ECEL_FACTOR;
                                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprCodeBetween’:
sqlite-snapshot-201909031623/sqlite3.c:101896:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&compLeft, 0, sizeof(Expr));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:101896:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprCoveredByIndex’:
sqlite-snapshot-201909031623/sqlite3.c:102731:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&w, 0, sizeof(w));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:102731:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3FunctionUsesThisSrc’:
sqlite-snapshot-201909031623/sqlite3.c:102792:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&w, 0, sizeof(w));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:102792:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3AlterRenameTable’:
sqlite-snapshot-201909031623/sqlite3.c:103205:11: warning: implicit declaration of function ‘sqlite3BtreeHoldsAllMutexes’ [-Wimplicit-function-declaration]
   assert( sqlite3BtreeHoldsAllMutexes(pParse->db) );
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3AlterBeginAddColumn’:
sqlite-snapshot-201909031623/sqlite3.c:103549:63: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pNew->aCol = (Column*)sqlite3DbMallocZero(db, sizeof(Column)*nAlloc);
                                                               ^
sqlite-snapshot-201909031623/sqlite3.c:103555:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pNew->aCol, pTab->aCol, sizeof(Column)*pNew->nCol);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:103555:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:103555:48: warning: conversion to ‘long unsigned int’ from ‘i16 {aka short int}’ may change the sign of the result [-Wsign-conversion]
   memcpy(pNew->aCol, pTab->aCol, sizeof(Column)*pNew->nCol);
                                                ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3RenameExprUnmap’:
sqlite-snapshot-201909031623/sqlite3.c:103851:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sWalker, 0, sizeof(Walker));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:103851:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3RenameExprlistUnmap’:
sqlite-snapshot-201909031623/sqlite3.c:103866:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&sWalker, 0, sizeof(Walker));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:103866:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘renameWalkWith’:
sqlite-snapshot-201909031623/sqlite3.c:103919:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(&sNC, 0, sizeof(sNC));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:103919:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘renameParseSql’:
sqlite-snapshot-201909031623/sqlite3.c:104071:18: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   db->init.iDb = bTemp ? 1 : sqlite3FindDbName(db, zDb);
                  ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:104076:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(p, 0, sizeof(Parse));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:104076:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘renameEditSql’:
sqlite-snapshot-201909031623/sqlite3.c:104152:34: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   zOut = sqlite3DbMallocZero(db, nSql + pRename->nList*nQuot + 1);
                                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c:104155:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(zOut, zSql, nSql);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:104155:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:104155:24: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(zOut, zSql, nSql);
                        ^~~~
sqlite-snapshot-201909031623/sqlite3.c:104162:27: warning: conversion to ‘u8 {aka unsigned char}’ from ‘char’ may change the sign of the result [-Wsign-conversion]
       if( sqlite3IsIdChar(*pBest->t.z) ){
                           ^
sqlite-snapshot-201909031623/sqlite3.c:104163:20: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nReplace = nNew;
                    ^~~~
sqlite-snapshot-201909031623/sqlite3.c:104166:20: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nReplace = nQuot;
                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:104170:14: warning: conversion to ‘int’ from ‘long int’ may alter its value [-Wconversion]
       iOff = pBest->t.z - zSql;
              ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:104172:9: warning: incompatible implicit declaration of built-in function ‘memmove’
         memmove(&zOut[iOff + nReplace], &zOut[iOff + pBest->t.n],
         ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:104172:9: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:104172:28: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memmove(&zOut[iOff + nReplace], &zOut[iOff + pBest->t.n],
                            ^
sqlite-snapshot-201909031623/sqlite3.c:104172:52: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memmove(&zOut[iOff + nReplace], &zOut[iOff + pBest->t.n],
                                                    ^
sqlite-snapshot-201909031623/sqlite3.c:104173:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nOut - (iOff + pBest->t.n)
                          ^
sqlite-snapshot-201909031623/sqlite3.c:104173:18: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nOut - (iOff + pBest->t.n)
                  ^
sqlite-snapshot-201909031623/sqlite3.c:104175:14: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nOut += nReplace - pBest->t.n;
              ^~
sqlite-snapshot-201909031623/sqlite3.c:104175:17: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
         nOut += nReplace - pBest->t.n;
                 ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘renameResolveTrigger’:
sqlite-snapshot-201909031623/sqlite3.c:104205:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sNC, 0, sizeof(sNC));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:104205:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘renameColumnFunc’:
sqlite-snapshot-201909031623/sqlite3.c:104378:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sCtx, 0, sizeof(sCtx));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:104378:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘renameTableFunc’:
sqlite-snapshot-201909031623/sqlite3.c:104573:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&sCtx, 0, sizeof(RenameCtx));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:104573:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘renameTableTest’:
sqlite-snapshot-201909031623/sqlite3.c:104721:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(&sNC, 0, sizeof(sNC));
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:104721:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘statInit’:
sqlite-snapshot-201909031623/sqlite3.c:105179:22: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     + sizeof(tRowcnt)*nColUp                  /* Stat4Accum.anEq */
                      ^
sqlite-snapshot-201909031623/sqlite3.c:105180:22: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     + sizeof(tRowcnt)*nColUp                  /* Stat4Accum.anDLt */
                      ^
sqlite-snapshot-201909031623/sqlite3.c:105178:7: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   n = sizeof(*p)
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:105188:31: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p = sqlite3DbMallocZero(db, n);
                               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘statGet’:
sqlite-snapshot-201909031623/sqlite3.c:105601:37: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     char *zRet = sqlite3MallocZero( (p->nKeyCol+1)*25 );
                                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘analyzeOneTable’:
sqlite-snapshot-201909031623/sqlite3.c:105882:55: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       aGotoChng = sqlite3DbMallocRawNN(db, sizeof(int)*nColTest);
                                                       ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘decodeIntArray’:
sqlite-snapshot-201909031623/sqlite3.c:106192:16: warning: conversion to ‘tRowcnt {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       v = v*10 + c - '0';
                ^
sqlite-snapshot-201909031623/sqlite3.c:106219:42: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pIndex->szIdxRow = sqlite3LogEst(sz);
                                          ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3AnalysisLoad’:
sqlite-snapshot-201909031623/sqlite3.c:106586:20: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     pTab->tabFlags &= ~TF_HasStat1;
                    ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘attachFunc’:
sqlite-snapshot-201909031623/sqlite3.c:106776:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(aNew, db->aDb, sizeof(db->aDb[0])*2);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:106776:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:106778:62: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       aNew = sqlite3DbRealloc(db, db->aDb, sizeof(db->aDb[0])*(db->nDb+1) );
                                                              ^
sqlite-snapshot-201909031623/sqlite3.c:106783:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(pNew, 0, sizeof(*pNew));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:106783:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:106799:59: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
     rc = sqlite3BtreeOpen(pVfs, zPath, db, &pNew->pBt, 0, flags);
                                                           ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:15466:37: warning: conversion to ‘unsigned int’ from ‘u64 {aka long long unsigned int}’ may alter its value [-Wconversion]
 #define PAGER_SYNCHRONOUS_FULL      0x03  /* PRAGMA synchronous=FULL */
                                     ^
sqlite-snapshot-201909031623/sqlite3.c:106824:23: note: in expansion of macro ‘PAGER_SYNCHRONOUS_FULL’
                       PAGER_SYNCHRONOUS_FULL | (db->flags & PAGER_FLAGS_MASK));
                       ^~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:106878:18: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     db->mDbFlags &= ~(DBFLAG_SchemaKnownOk);
                  ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘codeAttach’:
sqlite-snapshot-201909031623/sqlite3.c:107011:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sName, 0, sizeof(NameContext));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:107011:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3TableLock’:
sqlite-snapshot-201909031623/sqlite3.c:107638:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nBytes = sizeof(TableLock) * (pToplevel->nTableLock+1);
                              ^
sqlite-snapshot-201909031623/sqlite3.c:107638:12: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   nBytes = sizeof(TableLock) * (pToplevel->nTableLock+1);
            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:107640:68: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       sqlite3DbReallocOrFree(pToplevel->db, pToplevel->aTableLock, nBytes);
                                                                    ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3FinishCoding’:
sqlite-snapshot-201909031623/sqlite3.c:107715:11: warning: implicit declaration of function ‘sqlite3VdbeAssertMayAbort’ [-Wimplicit-function-declaration]
        || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort));
           ^~~~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3NestedParse’:
sqlite-snapshot-201909031623/sqlite3.c:107837:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(saveBuf, PARSE_TAIL(pParse), PARSE_TAIL_SZ);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:107837:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:107838:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(PARSE_TAIL(pParse), 0, PARSE_TAIL_SZ);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:107838:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3CollapseDatabaseArray’:
sqlite-snapshot-201909031623/sqlite3.c:108086:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(db->aDbStatic, db->aDb, 2*sizeof(db->aDb[0]));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:108086:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ResetOneSchema’:
sqlite-snapshot-201909031623/sqlite3.c:108105:18: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     db->mDbFlags &= ~DBFLAG_SchemaKnownOk;
                  ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ResetAllSchemasOfConnection’:
sqlite-snapshot-201909031623/sqlite3.c:108134:16: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   db->mDbFlags &= ~(DBFLAG_SchemaChange|DBFLAG_SchemaKnownOk);
                ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3CommitInternalChanges’:
sqlite-snapshot-201909031623/sqlite3.c:108146:16: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   db->mDbFlags &= ~DBFLAG_SchemaChange;
                ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘deleteTable’:
sqlite-snapshot-201909031623/sqlite3.c:108210:15: error: ‘pOld’ undeclared (first use in this function)
       assert( pOld==pIndex || pOld==0 );
               ^~~~
sqlite-snapshot-201909031623/sqlite3.c:108210:19: warning: comparison of distinct pointer types lacks a cast
       assert( pOld==pIndex || pOld==0 );
                   ^~
sqlite-snapshot-201909031623/sqlite3.c:108231:11: error: ‘nLookaside’ undeclared (first use in this function)
   assert( nLookaside==0 || nLookaside==sqlite3LookasideUsed(db,0) );
           ^~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:108231:38: warning: comparison between pointer and integer
   assert( nLookaside==0 || nLookaside==sqlite3LookasideUsed(db,0) );
                                      ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ColumnOfIndex’:
sqlite-snapshot-201909031623/sqlite3.c:108452:42: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     if( iCol==pIdx->aiColumn[i] ) return i;
                                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3AddColumn’:
sqlite-snapshot-201909031623/sqlite3.c:108704:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(z, pName->z, pName->n);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:108704:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:108716:51: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     aNew = sqlite3DbRealloc(db,p->aCol,(p->nCol+8)*sizeof(p->aCol[0]));
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:108724:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pCol, 0, sizeof(p->aCol[0]));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:108724:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3AffinityType’:
sqlite-snapshot-201909031623/sqlite3.c:108865:19: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pCol->szEst = v;
                   ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3AddDefaultValue’:
sqlite-snapshot-201909031623/sqlite3.c:108901:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(&x, 0, sizeof(x));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:108901:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3AddPrimaryKey’:
sqlite-snapshot-201909031623/sqlite3.c:109008:19: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     pTab->iPKey = iCol;
                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c:109011:20: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pTab->tabFlags |= autoInc*TF_Autoincrement;
                    ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘identPut’:
sqlite-snapshot-201909031623/sqlite3.c:109195:14: warning: conversion to ‘char’ from ‘unsigned char’ may change the sign of the result [-Wsign-conversion]
     z[i++] = zIdent[j];
              ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘createTableStmt’:
sqlite-snapshot-201909031623/sqlite3.c:109228:33: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   zStmt = sqlite3DbMallocRaw(0, n);
                                 ^
sqlite-snapshot-201909031623/sqlite3.c:109264:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(&zStmt[k], zType, len);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:109264:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:109264:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(&zStmt[k], zType, len);
                              ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘resizeIndexObject’:
sqlite-snapshot-201909031623/sqlite3.c:109281:44: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nByte = (sizeof(char*) + sizeof(i16) + 1)*N;
                                            ^
sqlite-snapshot-201909031623/sqlite3.c:109281:11: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   nByte = (sizeof(char*) + sizeof(i16) + 1)*N;
           ^
sqlite-snapshot-201909031623/sqlite3.c:109282:36: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   zExtra = sqlite3DbMallocZero(db, nByte);
                                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:109284:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(zExtra, pIdx->azColl, sizeof(char*)*pIdx->nColumn);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:109284:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:109286:26: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   zExtra += sizeof(char*)*N;
                          ^
sqlite-snapshot-201909031623/sqlite3.c:109289:24: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   zExtra += sizeof(i16)*N;
                        ^
sqlite-snapshot-201909031623/sqlite3.c:109292:19: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pIdx->nColumn = N;
                   ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘convertToWithoutRowidTable’:
sqlite-snapshot-201909031623/sqlite3.c:109490:20: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pPk->nKeyCol = j;
                    ^
sqlite-snapshot-201909031623/sqlite3.c:109553:26: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       pPk->aiColumn[j] = i;
                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘isShadowTableName’:
sqlite-snapshot-201909031623/sqlite3.c:109576:11: warning: implicit declaration of function ‘strrchr’ [-Wimplicit-function-declaration]
   zTail = strrchr(zName, '_');
           ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:109576:11: warning: incompatible implicit declaration of built-in function ‘strrchr’
sqlite-snapshot-201909031623/sqlite3.c:109576:11: note: include ‘<string.h>’ or provide a declaration of ‘strrchr’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3EndTable’:
sqlite-snapshot-201909031623/sqlite3.c:109786:32: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       if( pEnd2->z[0]!=';' ) n += pEnd2->n;
                                ^~
sqlite-snapshot-201909031623/sqlite3.c:109786:35: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
       if( pEnd2->z[0]!=';' ) n += pEnd2->n;
                                   ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqliteViewResetAll’:
sqlite-snapshot-201909031623/sqlite3.c:16248:68: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
 #define DbClearProperty(D,I,P)   (D)->aDb[I].pSchema->schemaFlags&=~(P)
                                                                    ^
sqlite-snapshot-201909031623/sqlite3.c:110092:3: note: in expansion of macro ‘DbClearProperty’
   DbClearProperty(db, idx, DB_UnresetViews);
   ^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3DropTable’:
sqlite-snapshot-201909031623/sqlite3.c:110333:41: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pTab = sqlite3LocateTableItem(pParse, isView, &pName->a[0]);
                                         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3CreateForeignKey’:
sqlite-snapshot-201909031623/sqlite3.c:110474:36: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nByte = sizeof(*pFKey) + (nCol-1)*sizeof(pFKey->aCol[0]) + pTo->n + 1;
                                    ^
sqlite-snapshot-201909031623/sqlite3.c:110474:11: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   nByte = sizeof(*pFKey) + (nCol-1)*sizeof(pFKey->aCol[0]) + pTo->n + 1;
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:110480:35: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pFKey = sqlite3DbMallocZero(db, nByte );
                                   ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:110491:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(z, pTo->z, pTo->n);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:110491:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:110525:37: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(z, pToCol->a[i].zName, n);
                                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3AllocateIndexObject’:
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:110703:11: note: in expansion of macro ‘ROUND8’
   nByte = ROUND8(sizeof(Index)) +              /* Index structure  */
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:110704:31: warning: conversion to ‘long unsigned int’ from ‘i16 {aka short int}’ may change the sign of the result [-Wsign-conversion]
           ROUND8(sizeof(char*)*nCol) +         /* Index.azColl     */
                               ^
sqlite-snapshot-201909031623/sqlite3.c:14091:26: note: in definition of macro ‘ROUND8’
 #define ROUND8(x)     (((x)+7)&~7)
                          ^
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:110704:11: note: in expansion of macro ‘ROUND8’
           ROUND8(sizeof(char*)*nCol) +         /* Index.azColl     */
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:110705:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           ROUND8(sizeof(LogEst)*(nCol+1) +     /* Index.aiRowLogEst   */
                                ^
sqlite-snapshot-201909031623/sqlite3.c:14091:26: note: in definition of macro ‘ROUND8’
 #define ROUND8(x)     (((x)+7)&~7)
                          ^
sqlite-snapshot-201909031623/sqlite3.c:110706:29: warning: conversion to ‘long unsigned int’ from ‘i16 {aka short int}’ may change the sign of the result [-Wsign-conversion]
                  sizeof(i16)*nCol +            /* Index.aiColumn   */
                             ^
sqlite-snapshot-201909031623/sqlite3.c:14091:26: note: in definition of macro ‘ROUND8’
 #define ROUND8(x)     (((x)+7)&~7)
                          ^
sqlite-snapshot-201909031623/sqlite3.c:110707:28: warning: conversion to ‘long unsigned int’ from ‘i16 {aka short int}’ may change the sign of the result [-Wsign-conversion]
                  sizeof(u8)*nCol);             /* Index.aSortOrder */
                            ^
sqlite-snapshot-201909031623/sqlite3.c:14091:26: note: in definition of macro ‘ROUND8’
 #define ROUND8(x)     (((x)+7)&~7)
                          ^
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:110705:11: note: in expansion of macro ‘ROUND8’
           ROUND8(sizeof(LogEst)*(nCol+1) +     /* Index.aiRowLogEst   */
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:23: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define ROUND8(x)     (((x)+7)&~7)
                       ^
sqlite-snapshot-201909031623/sqlite3.c:110703:11: note: in expansion of macro ‘ROUND8’
   nByte = ROUND8(sizeof(Index)) +              /* Index structure  */
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:110708:31: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p = sqlite3DbMallocZero(db, nByte + nExtra);
                               ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:110710:31: note: in expansion of macro ‘ROUND8’
     char *pExtra = ((char*)p)+ROUND8(sizeof(Index));
                               ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:110711:69: warning: conversion to ‘long unsigned int’ from ‘i16 {aka short int}’ may change the sign of the result [-Wsign-conversion]
     p->azColl = (const char**)pExtra; pExtra += ROUND8(sizeof(char*)*nCol);
                                                                     ^
sqlite-snapshot-201909031623/sqlite3.c:14091:26: note: in definition of macro ‘ROUND8’
 #define ROUND8(x)     (((x)+7)&~7)
                          ^
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:110711:49: note: in expansion of macro ‘ROUND8’
     p->azColl = (const char**)pExtra; pExtra += ROUND8(sizeof(char*)*nCol);
                                                 ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:110712:63: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     p->aiRowLogEst = (LogEst*)pExtra; pExtra += sizeof(LogEst)*(nCol+1);
                                                               ^
sqlite-snapshot-201909031623/sqlite3.c:110713:60: warning: conversion to ‘long unsigned int’ from ‘i16 {aka short int}’ may change the sign of the result [-Wsign-conversion]
     p->aiColumn = (i16*)pExtra;       pExtra += sizeof(i16)*nCol;
                                                            ^
sqlite-snapshot-201909031623/sqlite3.c:110715:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘i16 {aka short int}’ may change the sign of the result [-Wsign-conversion]
     p->nColumn = nCol;
                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c:110716:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     p->nKeyCol = nCol - 1;
                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3CreateIndex’:
sqlite-snapshot-201909031623/sqlite3.c:110984:43: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   pIndex = sqlite3AllocateIndexObject(db, pList->nExpr + nExtraCol,
                                           ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:110993:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pIndex->zName, zName, nName+1);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:110993:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:110993:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(pIndex->zName, zName, nName+1);
                                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:110997:21: warning: conversion to ‘unsigned char:2’ from ‘u8 {aka unsigned char}’ may alter its value [-Wconversion]
   pIndex->idxType = idxType;
                     ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:110999:21: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pIndex->nKeyCol = pList->nExpr;
                     ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:111067:29: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(zExtra, zColl, nColl);
                             ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:111095:31: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         pIndex->aiColumn[i] = x;
                               ^
sqlite-snapshot-201909031623/sqlite3.c:111118:39: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       if( sqlite3ColumnOfIndex(pIndex,j)>=0 ) continue;
                                       ^
sqlite-snapshot-201909031623/sqlite3.c:111180:66: warning: conversion to ‘unsigned char:2’ from ‘u8 {aka unsigned char}’ may alter its value [-Wconversion]
         if( idxType==SQLITE_IDXTYPE_PRIMARYKEY ) pIdx->idxType = idxType;
                                                                  ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:111256:56: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         int n = (int)(pParse->sLastToken.z - pName->z) + pParse->sLastToken.n;
                                                        ^
sqlite-snapshot-201909031623/sqlite3.c:111256:17: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         int n = (int)(pParse->sLastToken.z - pName->z) + pParse->sLastToken.n;
                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3DefaultRowEst’:
sqlite-snapshot-201909031623/sqlite3.c:111362:40: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   if( pIdx->pPartIdxWhere!=0 ) a[0] -= 10;  assert( 10==sqlite3LogEst(2) );
                                        ^~
sqlite-snapshot-201909031623/sqlite3.c:111362:3: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
   if( pIdx->pPartIdxWhere!=0 ) a[0] -= 10;  assert( 10==sqlite3LogEst(2) );
   ^~
sqlite-snapshot-201909031623/sqlite3.c:111362:45: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’
   if( pIdx->pPartIdxWhere!=0 ) a[0] -= 10;  assert( 10==sqlite3LogEst(2) );
                                             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:111363:3: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
   if( a[0]<33 ) a[0] = 33;                  assert( 33==sqlite3LogEst(10) );
   ^~
sqlite-snapshot-201909031623/sqlite3.c:111363:45: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’
   if( a[0]<33 ) a[0] = 33;                  assert( 33==sqlite3LogEst(10) );
                                             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:111367:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&a[1], aVal, nCopy*sizeof(LogEst));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:111367:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:111367:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(&a[1], aVal, nCopy*sizeof(LogEst));
                            ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ArrayAllocate’:
sqlite-snapshot-201909031623/sqlite3.c:111472:47: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     void *pNew = sqlite3DbRealloc(db, pArray, sz*szEntry);
                                               ^~
sqlite-snapshot-201909031623/sqlite3.c:111480:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&z[n * szEntry], 0, szEntry);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:111480:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:111480:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(&z[n * szEntry], 0, szEntry);
                              ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3SrcListEnlarge’:
sqlite-snapshot-201909031623/sqlite3.c:111589:22: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   if( (u32)pSrc->nSrc+nExtra>pSrc->nAlloc ){
                      ^
sqlite-snapshot-201909031623/sqlite3.c:111601:42: warning: conversion to ‘long long unsigned int’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );
                                          ^
sqlite-snapshot-201909031623/sqlite3.c:111607:20: warning: conversion to ‘u32 {aka unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
     pSrc->nAlloc = nAlloc;
                    ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:111618:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&pSrc->a[iStart], 0, sizeof(pSrc->a[0])*nExtra);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:111618:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:111618:49: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(&pSrc->a[iStart], 0, sizeof(pSrc->a[0])*nExtra);
                                                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3SrcListAppend’:
sqlite-snapshot-201909031623/sqlite3.c:111680:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&pList->a[0], 0, sizeof(pList->a[0]));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:111680:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3BeginWriteOperation’:
sqlite-snapshot-201909031623/sqlite3.c:112027:30: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pToplevel->isMultiWrite |= setStatement;
                              ^~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WithAdd’:
sqlite-snapshot-201909031623/sqlite3.c:112349:65: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     sqlite3_int64 nByte = sizeof(*pWith) + (sizeof(pWith->a[1]) * pWith->nCte);
                                                                 ^
sqlite-snapshot-201909031623/sqlite3.c:112349:27: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     sqlite3_int64 nByte = sizeof(*pWith) + (sizeof(pWith->a[1]) * pWith->nCte);
                           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:112350:40: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     pNew = sqlite3DbRealloc(db, pWith, nByte);
                                        ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘synthCollSeq’:
sqlite-snapshot-201909031623/sqlite3.c:112450:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pColl, pColl2, sizeof(CollSeq));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:112450:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘findCollSeqEntry’:
sqlite-snapshot-201909031623/sqlite3.c:112552:54: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pColl = sqlite3DbMallocZero(db, 3*sizeof(*pColl) + nName);
                                                      ^
sqlite-snapshot-201909031623/sqlite3.c:112561:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pColl[0].zName, zName, nName);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:112561:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:112561:37: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(pColl[0].zName, zName, nName);
                                     ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3FindFunction’:
sqlite-snapshot-201909031623/sqlite3.c:112797:54: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       (pBest = sqlite3DbMallocZero(db, sizeof(*pBest)+nName+1))!=0 ){
                                                      ^
sqlite-snapshot-201909031623/sqlite3.c:112801:19: warning: conversion to ‘i8 {aka signed char}’ from ‘short unsigned int’ may alter its value [-Wconversion]
     pBest->nArg = (u16)nArg;
                   ^
sqlite-snapshot-201909031623/sqlite3.c:112803:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy((char*)&pBest[1], zName, nName+1);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:112803:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:112803:37: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy((char*)&pBest[1], zName, nName+1);
                                     ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3SchemaClear’:
sqlite-snapshot-201909031623/sqlite3.c:112854:27: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pSchema->schemaFlags &= ~(DB_SchemaLoaded|DB_ResetWanted);
                           ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3DeleteFrom’:
sqlite-snapshot-201909031623/sqlite3.c:113162:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sContext, 0, sizeof(sContext));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:113162:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:113315:12: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     wcf |= (bComplex ? 0 : WHERE_ONEPASS_MULTIROW);
            ^
sqlite-snapshot-201909031623/sqlite3.c:113327:13: warning: conversion to ‘i16 {aka short int}’ from ‘u16 {aka short unsigned int}’ may change the sign of the result [-Wsign-conversion]
       nPk = pPk->nKeyCol;
             ^~~
sqlite-snapshot-201909031623/sqlite3.c:113373:42: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       aToOpen = sqlite3DbMallocRawNN(db, nIdx+2);
                                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:113378:26: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memset(aToOpen, 1, nIdx+1);
                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:113468:23: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
           iKey, nKey, count, OE_Default, eOnePass, aiCurOnePass[1]);
                       ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:113468:42: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
           iKey, nKey, count, OE_Default, eOnePass, aiCurOnePass[1]);
                                          ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘printfFunc’:
sqlite-snapshot-201909031623/sqlite3.c:114108:9: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     n = str.nChar;
         ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘substrFunc’:
sqlite-snapshot-201909031623/sqlite3.c:114206:46: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     sqlite3_result_text64(context, (char*)z, z2-z, SQLITE_TRANSIENT,
                                              ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘contextMalloc’:
sqlite-snapshot-201909031623/sqlite3.c:114272:23: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     z = sqlite3Malloc(nByte);
                       ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘lowerFunc’:
sqlite-snapshot-201909031623/sqlite3.c:18731:30: warning: conversion to ‘char’ from ‘unsigned char’ may change the sign of the result [-Wsign-conversion]
 # define sqlite3Tolower(x)   (sqlite3UpperToLower[(unsigned char)(x)])
                              ^
sqlite-snapshot-201909031623/sqlite3.c:114315:17: note: in expansion of macro ‘sqlite3Tolower’
         z1[i] = sqlite3Tolower(z2[i]);
                 ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘randomBlob’:
sqlite-snapshot-201909031623/sqlite3.c:114376:24: warning: conversion to ‘int’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
     sqlite3_randomness(n, p);
                        ^
sqlite-snapshot-201909031623/sqlite3.c:114377:44: warning: conversion to ‘int’ from ‘sqlite3_int64 {aka long long int}’ may alter its value [-Wconversion]
     sqlite3_result_blob(context, (char*)p, n, sqlite3_free);
                                            ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘patternCompare’:
sqlite-snapshot-201909031623/sqlite3.c:18725:33: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 # define sqlite3Toupper(x)  ((x)&~(sqlite3CtypeMap[(unsigned char)(x)]&0x20))
                                 ^
sqlite-snapshot-201909031623/sqlite3.c:114561:22: note: in expansion of macro ‘sqlite3Toupper’
           zStop[0] = sqlite3Toupper(c);
                      ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:18725:29: warning: conversion to ‘char’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
 # define sqlite3Toupper(x)  ((x)&~(sqlite3CtypeMap[(unsigned char)(x)]&0x20))
                             ^
sqlite-snapshot-201909031623/sqlite3.c:114561:22: note: in expansion of macro ‘sqlite3Toupper’
           zStop[0] = sqlite3Toupper(c);
                      ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:18731:30: warning: conversion to ‘char’ from ‘unsigned char’ may change the sign of the result [-Wsign-conversion]
 # define sqlite3Tolower(x)   (sqlite3UpperToLower[(unsigned char)(x)])
                              ^
sqlite-snapshot-201909031623/sqlite3.c:114562:22: note: in expansion of macro ‘sqlite3Tolower’
           zStop[1] = sqlite3Tolower(c);
                      ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:114565:22: warning: conversion to ‘char’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
           zStop[0] = c;
                      ^
sqlite-snapshot-201909031623/sqlite3.c:114569:22: warning: implicit declaration of function ‘strcspn’ [-Wimplicit-function-declaration]
           zString += strcspn((const char*)zString, zStop);
                      ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:114569:22: warning: incompatible implicit declaration of built-in function ‘strcspn’
sqlite-snapshot-201909031623/sqlite3.c:114569:22: note: include ‘<string.h>’ or provide a declaration of ‘strcspn’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘quoteFunc’:
sqlite-snapshot-201909031623/sqlite3.c:114908:20: warning: conversion to ‘char’ from ‘unsigned char’ may change the sign of the result [-Wsign-conversion]
           z[j++] = zArg[i];
                    ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unicodeFunc’:
sqlite-snapshot-201909031623/sqlite3.c:114938:47: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   if( z && z[0] ) sqlite3_result_int(context, sqlite3Utf8Read(&z));
                                               ^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘charFunc’:
sqlite-snapshot-201909031623/sqlite3.c:114953:32: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   zOut = z = sqlite3_malloc64( argc*4+1 );
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114967:17: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
       *zOut++ = 0xC0 + (u8)((c>>6)&0x1F);
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114968:17: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
       *zOut++ = 0x80 + (u8)(c & 0x3F);
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114970:17: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
       *zOut++ = 0xE0 + (u8)((c>>12)&0x0F);
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114971:17: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
       *zOut++ = 0x80 + (u8)((c>>6) & 0x3F);
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114972:17: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
       *zOut++ = 0x80 + (u8)(c & 0x3F);
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114974:17: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
       *zOut++ = 0xF0 + (u8)((c>>18) & 0x07);
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114975:17: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
       *zOut++ = 0x80 + (u8)((c>>12) & 0x3F);
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114976:17: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
       *zOut++ = 0x80 + (u8)((c>>6) & 0x3F);
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114977:17: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
       *zOut++ = 0x80 + (u8)(c & 0x3F);
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:114980:44: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
   sqlite3_result_text64(context, (char*)z, zOut-z, sqlite3_free, SQLITE_UTF8);
                                            ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘zeroblobFunc’:
sqlite-snapshot-201909031623/sqlite3.c:115026:43: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   rc = sqlite3_result_zeroblob64(context, n); /* IMP: R-00293-64994 */
                                           ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘replaceFunc’:
sqlite-snapshot-201909031623/sqlite3.c:115106:42: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘i64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
           zOut = sqlite3_realloc64(zOut, (int)nOut + (nOut - nStr - 1));
                                          ^
sqlite-snapshot-201909031623/sqlite3.c:115114:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(&zOut[j], zRep, nRep);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:115114:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:115114:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(&zOut[j], zRep, nRep);
                              ^~~~
sqlite-snapshot-201909031623/sqlite3.c:115120:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(&zOut[j], &zStr[i], nStr-i);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:115120:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:115120:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy(&zOut[j], &zStr[i], nStr-i);
                              ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘trimFunc’:
sqlite-snapshot-201909031623/sqlite3.c:115167:51: warning: conversion to ‘long long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       azChar = contextMalloc(context, ((i64)nChar)*(sizeof(char*)+1));
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:115167:39: warning: conversion to ‘i64 {aka long long int}’ from ‘long long unsigned int’ may change the sign of the result [-Wsign-conversion]
       azChar = contextMalloc(context, ((i64)nChar)*(sizeof(char*)+1));
                                       ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sumStep’:
sqlite-snapshot-201909031623/sqlite3.c:115357:15: warning: conversion to ‘double’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
       p->rSum += v;
               ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sumInverse’:
sqlite-snapshot-201909031623/sqlite3.c:115383:15: warning: conversion to ‘double’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
       p->rSum -= v;
               ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘countStep’:
sqlite-snapshot-201909031623/sqlite3.c:115447:50: error: ‘CountCtx {aka struct CountCtx}’ has no member named ‘bInverse’
   assert( argc==1 || p==0 || p->n>0x7fffffff || p->bInverse
                                                  ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘groupConcatStep’:
sqlite-snapshot-201909031623/sqlite3.c:115553:23: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pAccum->mxAlloc = db->aLimit[SQLITE_LIMIT_LENGTH];
                       ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘groupConcatInverse’:
sqlite-snapshot-201909031623/sqlite3.c:115592:21: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pAccum->nChar -= n;
                     ^~
sqlite-snapshot-201909031623/sqlite3.c:115593:7: warning: incompatible implicit declaration of built-in function ‘memmove’
       memmove(pAccum->zText, &pAccum->zText[n], pAccum->nChar);
       ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:115593:7: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3RegisterLikeFunctions’:
sqlite-snapshot-201909031623/sqlite3.c:115664:65: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   sqlite3FindFunction(db, "like", 2, SQLITE_UTF8, 0)->funcFlags |= flags;
                                                                 ^~
sqlite-snapshot-201909031623/sqlite3.c:115665:65: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   sqlite3FindFunction(db, "like", 3, SQLITE_UTF8, 0)->funcFlags |= flags;
                                                                 ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3IsLikeFunction’:
sqlite-snapshot-201909031623/sqlite3.c:115712:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(aWc, pDef->pUserData, 3);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:115712:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3FkLocateIndex’:
sqlite-snapshot-201909031623/sqlite3.c:116080:57: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     aiCol = (int *)sqlite3DbMallocRawNN(pParse->db, nCol*sizeof(int));
                                                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘fkScanChildren’:
sqlite-snapshot-201909031623/sqlite3.c:116447:12: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     iCol = aiCol ? aiCol[i] : pFKey->aCol[0].iFrom;
            ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:116447:12: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
sqlite-snapshot-201909031623/sqlite3.c:116494:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sNameContext, 0, sizeof(NameContext));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:116494:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘fkActionTrigger’:
sqlite-snapshot-201909031623/sqlite3.c:117145:17: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       tFrom.n = nFrom;
                 ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:117164:29: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         sizeof(TriggerStep) +     /* Single step in trigger program */
                             ^
sqlite-snapshot-201909031623/sqlite3.c:117170:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy((char *)pStep->zTarget, zFrom, nFrom);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:117170:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:117170:45: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy((char *)pStep->zTarget, zFrom, nFrom);
                                             ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3IndexAffinityStr’:
sqlite-snapshot-201909031623/sqlite3.c:117377:51: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pIdx->zColAff = (char *)sqlite3DbMallocRaw(0, pIdx->nColumn+1);
                                                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3TableAffinity’:
sqlite-snapshot-201909031623/sqlite3.c:117429:45: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     zColAff = (char *)sqlite3DbMallocRaw(0, pTab->nCol+1);
                                             ^~~~
sqlite-snapshot-201909031623/sqlite3.c:18750:31: warning: incompatible implicit declaration of built-in function ‘strlen’
 #define sqlite3Strlen30NN(C) (strlen(C)&0x3fffffff)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:117445:7: note: in expansion of macro ‘sqlite3Strlen30NN’
   i = sqlite3Strlen30NN(zColAff);
       ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:18750:31: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
 #define sqlite3Strlen30NN(C) (strlen(C)&0x3fffffff)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:117445:7: note: in expansion of macro ‘sqlite3Strlen30NN’
   i = sqlite3Strlen30NN(zColAff);
       ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Insert’:
sqlite-snapshot-201909031623/sqlite3.c:118058:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&sNC, 0, sizeof(sNC));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:118058:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:118112:51: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     aRegIdx = sqlite3DbMallocRawNN(db, sizeof(int)*(nIdx+2));
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:118334:30: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       sqlite3VdbeChangeP5(v, onError==OE_Default ? OE_Abort : onError);
                              ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:118342:36: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
           regIns, 0, ipkColumn>=0, onError, endOfLoop, &isReplace, 0, pUpsert
                                    ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ExprReferencesUpdatedColumn’:
sqlite-snapshot-201909031623/sqlite3.c:118477:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&w, 0, sizeof(w));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:118477:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:118484:16: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     w.eCode &= ~CKCNSTRNT_ROWID;
                ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3GenerateConstraintChecks’:
sqlite-snapshot-201909031623/sqlite3.c:119133:19: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
             regR, nPkField, 0, OE_Replace,
                   ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3CompleteInsertion’:
sqlite-snapshot-201909031623/sqlite3.c:119234:20: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       pik_flags |= (update_flags & OPFLAG_SAVEPOSITION);
                    ^
sqlite-snapshot-201909031623/sqlite3.c:119257:18: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pik_flags |= (update_flags?update_flags:OPFLAG_LASTROWID);
                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_exec’:
sqlite-snapshot-201909031623/sqlite3.c:119832:53: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           azCols = sqlite3DbMallocRaw(db, (2*nCol+1)*sizeof(const char*));
                                                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3LoadExtension’:
sqlite-snapshot-201909031623/sqlite3.c:121037:14: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   u64 nMsg = 300 + sqlite3Strlen30(zFile);
              ^~~
sqlite-snapshot-201909031623/sqlite3.c:121084:26: warning: conversion to ‘int’ from ‘u64 {aka long long unsigned int}’ may alter its value [-Wconversion]
         sqlite3_snprintf(nMsg, zErrmsg,
                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:121086:32: warning: conversion to ‘int’ from ‘u64 {aka long long unsigned int}’ may alter its value [-Wconversion]
         sqlite3OsDlError(pVfs, nMsg-1, zErrmsg);
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:121107:34: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     zAltEntry = sqlite3_malloc64(ncFile+30);
                                  ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:121112:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(zAltEntry, "sqlite3_", 8);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:121112:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:121127:12: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       nMsg += sqlite3Strlen30(zEntry);
            ^~
sqlite-snapshot-201909031623/sqlite3.c:121130:26: warning: conversion to ‘int’ from ‘u64 {aka long long unsigned int}’ may alter its value [-Wconversion]
         sqlite3_snprintf(nMsg, zErrmsg,
                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c:121132:32: warning: conversion to ‘int’ from ‘u64 {aka long long unsigned int}’ may alter its value [-Wconversion]
         sqlite3OsDlError(pVfs, nMsg-1, zErrmsg);
                                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:121152:51: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   aHandle = sqlite3DbMallocZero(db, sizeof(handle)*(db->nExtension+1));
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:121157:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(aHandle, db->aExtension, sizeof(handle)*db->nExtension);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:121157:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:121157:51: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(aHandle, db->aExtension, sizeof(handle)*db->nExtension);
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘setAllPagerFlags’:
sqlite-snapshot-201909031623/sqlite3.c:122275:18: warning: conversion to ‘unsigned int’ from ‘u64 {aka long long unsigned int}’ may alter its value [-Wconversion]
                  pDb->safety_level | (db->flags & PAGER_FLAGS_MASK) );
                  ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Pragma’:
sqlite-snapshot-201909031623/sqlite3.c:122755:25: warning: conversion to ‘signed char’ from ‘unsigned char’ may change the sign of the result [-Wsign-conversion]
       db->nextAutovac = (u8)eAuto;
                         ^
sqlite-snapshot-201909031623/sqlite3.c:123081:29: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
         pDb->safety_level = iLevel;
                             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:123100:14: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         mask &= ~(SQLITE_ForeignKeys);
              ^~
sqlite-snapshot-201909031623/sqlite3.c:123577:51: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       aRoot = sqlite3DbMallocRawNN(db, sizeof(int)*(cnt+1));
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:123626:17: warning: implicit declaration of function ‘sqlite3NoTempsInRange’ [-Wimplicit-function-declaration]
         assert( sqlite3NoTempsInRange(pParse,1,7+j) );
                 ^~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:123872:19: warning: conversion to ‘int’ from ‘u64 {aka const long long unsigned int}’ may alter its value [-Wconversion]
     int iCookie = pPragma->iArg;  /* Which cookie to read or write */
                   ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:124068:23: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         szThreshold = pTab->nRowLogEst + 46; assert( sqlite3LogEst(25)==46 );
                       ^~~~
sqlite-snapshot-201909031623/sqlite3.c:124078:53: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                          sqlite3VdbeCurrentAddr(v)+2+(opMask&1), szThreshold);
                                                     ^
sqlite-snapshot-201909031623/sqlite3.c:124078:26: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
                          sqlite3VdbeCurrentAddr(v)+2+(opMask&1), szThreshold);
                          ^~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pragmaVtabConnect’:
sqlite-snapshot-201909031623/sqlite3.c:124315:11: warning: incompatible implicit declaration of built-in function ‘strlen’
   assert( strlen(zBuf) < sizeof(zBuf)-1 );
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:124315:11: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c:124322:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(pTab, 0, sizeof(PragmaVtab));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:124322:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:124325:23: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       pTab->iHidden = i;
                       ^
sqlite-snapshot-201909031623/sqlite3.c:124326:23: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       pTab->nHidden = j;
                       ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pragmaVtabOpen’:
sqlite-snapshot-201909031623/sqlite3.c:124393:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pCsr, 0, sizeof(PragmaVtabCursor));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:124393:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3InitCallback’:
sqlite-snapshot-201909031623/sqlite3.c:16248:68: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
 #define DbClearProperty(D,I,P)   (D)->aDb[I].pSchema->schemaFlags&=~(P)
                                                                    ^
sqlite-snapshot-201909031623/sqlite3.c:124649:3: note: in expansion of macro ‘DbClearProperty’
   DbClearProperty(db, iDb, DB_Empty);
   ^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:124672:20: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     db->init.iDb = iDb;
                    ^~~
sqlite-snapshot-201909031623/sqlite3.c:124678:25: error: ‘rcp’ undeclared (first use in this function)
     assert( (rc&0xFF)==(rcp&0xFF) );
                         ^~~
sqlite-snapshot-201909031623/sqlite3.c:124678:28: error: invalid operands to binary & (have ‘struct unix_syscall *’ and ‘int’)
     assert( (rc&0xFF)==(rcp&0xFF) );
                         ~~~^
sqlite-snapshot-201909031623/sqlite3.c:124678:22: warning: comparison between pointer and integer
     assert( (rc&0xFF)==(rcp&0xFF) );
                      ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3InitOne’:
sqlite-snapshot-201909031623/sqlite3.c:124813:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(meta, 0, sizeof(meta));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:124813:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Prepare’:
sqlite-snapshot-201909031623/sqlite3.c:125118:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sParse, 0, PARSE_HDR_SZ);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:125118:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:125184:43: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     zSqlCopy = sqlite3DbStrNDup(db, zSql, nBytes);
                                           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:125236:69: warning: conversion to ‘u8 {aka unsigned char}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
     sqlite3VdbeSetSql(sParse.pVdbe, zSql, (int)(sParse.zTail-zSql), prepFlags);
                                                                     ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3SelectNew’:
sqlite-snapshot-201909031623/sqlite3.c:125662:17: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pNew->selId = ++pParse->nSelect;
                 ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3JoinType’:
sqlite-snapshot-201909031623/sqlite3.c:125750:69: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
           && sqlite3StrNICmp((char*)p->z, &zKeyText[aKeyword[j].i], p->n)==0 ){
                                                                     ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘unsetJoinExpr’:
sqlite-snapshot-201909031623/sqlite3.c:17566:44: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ExprClearProperty(E,P)   (E)->flags&=~(P)
                                            ^
sqlite-snapshot-201909031623/sqlite3.c:125922:7: note: in expansion of macro ‘ExprClearProperty’
       ExprClearProperty(p, EP_FromJoin);
       ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘pushOntoSorter’:
sqlite-snapshot-201909031623/sqlite3.c:126174:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(pKI->aSortFlags, 0, pKI->nKeyField); /* Makes OP_Jump testable */
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:126174:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘selectInnerLoop’:
sqlite-snapshot-201909031623/sqlite3.c:126455:47: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
           p->pEList->a[j-1].u.x.iOrderByCol = i+1-pSort->nOBSat;
                                               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3KeyInfoAlloc’:
sqlite-snapshot-201909031623/sqlite3.c:126782:21: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   int nExtra = (N+X)*(sizeof(CollSeq*)+1) - sizeof(CollSeq*);
                     ^
sqlite-snapshot-201909031623/sqlite3.c:126782:16: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   int nExtra = (N+X)*(sizeof(CollSeq*)+1) - sizeof(CollSeq*);
                ^
sqlite-snapshot-201909031623/sqlite3.c:126783:57: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   KeyInfo *p = sqlite3DbMallocRawNN(db, sizeof(KeyInfo) + nExtra);
                                                         ^
sqlite-snapshot-201909031623/sqlite3.c:126791:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&p[1], 0, nExtra);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:126791:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:126791:22: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(&p[1], 0, nExtra);
                      ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ColumnsFromExprList’:
sqlite-snapshot-201909031623/sqlite3.c:127453:51: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     aCol = sqlite3DbMallocZero(db, sizeof(aCol[0])*nCol);
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:127461:12: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   *pnCol = nCol;
            ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3SelectAddColumnTypeAndCollation’:
sqlite-snapshot-201909031623/sqlite3.c:127557:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sNC, 0, sizeof(sNC));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:127557:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:127570:61: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pCol->zName = sqlite3DbReallocOrFree(db, pCol->zName, n+m+2);
                                                             ^
sqlite-snapshot-201909031623/sqlite3.c:127572:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(&pCol->zName[n+1], zType, m+1);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:127572:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:127572:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memcpy(&pCol->zName[n+1], zType, m+1);
                                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘multiSelectValues’:
sqlite-snapshot-201909031623/sqlite3.c:127992:21: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     p->nSelectRow = nRow;
                     ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘multiSelectOrderBy’:
sqlite-snapshot-201909031623/sqlite3.c:128702:50: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   aPermute = sqlite3DbMallocRawNN(db, sizeof(int)*(nOrderBy + 1));
                                                  ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘substExpr’:
sqlite-snapshot-201909031623/sqlite3.c:128955:30: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     pExpr->iRightJoinTable = pSubst->iNewTable;
                              ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:128971:11: warning: incompatible implicit declaration of built-in function ‘memset’
           memset(&ifNullRow, 0, sizeof(ifNullRow));
           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:128971:11: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘flattenSubquery’:
sqlite-snapshot-201909031623/sqlite3.c:129505:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(&pSubSrc->a[i], 0, sizeof(pSubSrc->a[i]));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:129505:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘constInsert’:
sqlite-snapshot-201909031623/sqlite3.c:129627:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                          pConst->nConst*2*sizeof(Expr*));
                                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘propagateConstantExprRewrite’:
sqlite-snapshot-201909031623/sqlite3.c:17566:44: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ExprClearProperty(E,P)   (E)->flags&=~(P)
                                            ^
sqlite-snapshot-201909031623/sqlite3.c:129692:5: note: in expansion of macro ‘ExprClearProperty’
     ExprClearProperty(pExpr, EP_Leaf);
     ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘propagateConstants’:
sqlite-snapshot-201909031623/sqlite3.c:129752:7: warning: incompatible implicit declaration of built-in function ‘memset’
       memset(&w, 0, sizeof(w));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:129752:7: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘minMaxQuery’:
sqlite-snapshot-201909031623/sqlite3.c:129918:12: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     return eRet;
            ^~~~
sqlite-snapshot-201909031623/sqlite3.c:129928:12: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     return eRet;
            ^~~~
sqlite-snapshot-201909031623/sqlite3.c:129933:10: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   return eRet;
          ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘convertCompoundSelectToSubquery’:
sqlite-snapshot-201909031623/sqlite3.c:130043:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&dummy, 0, sizeof(dummy));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:130043:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:130057:15: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   p->selFlags &= ~SF_Compound;
               ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘selectExpander’:
sqlite-snapshot-201909031623/sqlite3.c:130346:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
   u16 selFlags = p->selFlags;
                  ^
sqlite-snapshot-201909031623/sqlite3.c:130359:16: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     p->selId = ++pParse->nSelect;
                ^~
sqlite-snapshot-201909031623/sqlite3.c:130467:17: warning: conversion to ‘int’ from ‘u64 {aka long long unsigned int}’ may alter its value [-Wconversion]
     int flags = pParse->db->flags;
                 ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘havingToWhere’:
sqlite-snapshot-201909031623/sqlite3.c:130980:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sWalker, 0, sizeof(sWalker));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:130980:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Select’:
sqlite-snapshot-201909031623/sqlite3.c:131159:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sAggInfo, 0, sizeof(sAggInfo));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:131159:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:131180:17: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     p->selFlags &= ~SF_Distinct;
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:131232:29: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       pItem->fg.jointype &= ~(JT_LEFT|JT_OUTER);
                             ^
sqlite-snapshot-201909031623/sqlite3.c:131536:17: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     p->selFlags &= ~SF_Distinct;
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:131607:22: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
     u16 wctrlFlags = (sDistinct.isTnct ? WHERE_WANT_DISTINCT : 0)
                      ^
sqlite-snapshot-201909031623/sqlite3.c:131627:29: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       sDistinct.eTnctType = sqlite3WhereIsDistinct(pWInfo);
                             ^~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_get_table_cb’:
sqlite-snapshot-201909031623/sqlite3.c:132231:16: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   if( p->nData + need > p->nAlloc ){
                ^
sqlite-snapshot-201909031623/sqlite3.c:132233:29: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     p->nAlloc = p->nAlloc*2 + need;
                             ^
sqlite-snapshot-201909031623/sqlite3.c:132243:18: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     p->nColumn = nCol;
                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c:132266:31: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         z = sqlite3_malloc64( n );
                               ^
sqlite-snapshot-201909031623/sqlite3.c:132268:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(z, argv[i], n);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:132268:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:132268:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memcpy(z, argv[i], n);
                            ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_get_table’:
sqlite-snapshot-201909031623/sqlite3.c:132352:30: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   if( pnColumn ) *pnColumn = res.nColumn;
                              ^~~
sqlite-snapshot-201909031623/sqlite3.c:132353:24: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   if( pnRow ) *pnRow = res.nRow;
                        ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘triggerStepAllocate’:
sqlite-snapshot-201909031623/sqlite3.c:132797:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(z, pName->z, pName->n);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:132797:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘codeRowTrigger’:
sqlite-snapshot-201909031623/sqlite3.c:133295:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sNC, 0, sizeof(sNC));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:133295:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ColumnDefault’:
sqlite-snapshot-201909031623/sqlite3.c:133643:26: warning: conversion to ‘u8 {aka unsigned char}’ from ‘char’ may change the sign of the result [-Wsign-conversion]
                          pCol->affinity, &pValue);
                          ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Update’:
sqlite-snapshot-201909031623/sqlite3.c:133777:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sContext, 0, sizeof(sContext));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:133777:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:133850:48: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   aXRef = sqlite3DbMallocRawNN(db, sizeof(int) * (pTab->nCol+nIdx+1) + nIdx+2 );
                                                ^
sqlite-snapshot-201909031623/sqlite3.c:133850:70: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   aXRef = sqlite3DbMallocRawNN(db, sizeof(int) * (pTab->nCol+nIdx+1) + nIdx+2 );
                                                                      ^
sqlite-snapshot-201909031623/sqlite3.c:133854:22: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(aToOpen, 1, nIdx+1);
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c:133916:13: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   chngKey = chngRowid + chngPk;
             ^~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:133959:24: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(aToOpen, 1, nIdx+1);
                        ^~~~
sqlite-snapshot-201909031623/sqlite3.c:134041:11: warning: conversion to ‘i16 {aka short int}’ from ‘u16 {aka short unsigned int}’ may change the sign of the result [-Wsign-conversion]
     nPk = pPk->nKeyCol;
           ^~~
sqlite-snapshot-201909031623/sqlite3.c:134074:64: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     pWInfo = sqlite3WhereBegin(pParse, pTabList, pWhere, 0, 0, flags, iIdxCur);
                                                                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:134227:13: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   newmask = sqlite3TriggerColmask(
             ^~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:134237:63: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       }else if( 0==(tmask&TRIGGER_BEFORE) || i>31 || (newmask & MASKBIT32(i)) ){
                                                               ^
sqlite-snapshot-201909031623/sqlite3.c:134294:44: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
         regNewRowid, regOldRowid, chngKey, onError, labelContinue, &bReplace,
                                            ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘updateVirtualTable’:
sqlite-snapshot-201909031623/sqlite3.c:134558:26: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   sqlite3VdbeChangeP5(v, onError==OE_Default ? OE_Abort : onError);
                          ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3UpsertAnalyzeTarget’:
sqlite-snapshot-201909031623/sqlite3.c:134676:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sNC, 0, sizeof(sNC));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:134676:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3RunVacuum’:
sqlite-snapshot-201909031623/sqlite3.c:135015:19: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     db->openFlags &= ~SQLITE_OPEN_READONLY;
                   ^~
sqlite-snapshot-201909031623/sqlite3.c:135119:18: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   db->init.iDb = nDb; /* force new CREATE statements into vacuum_db */
                  ^~~
sqlite-snapshot-201909031623/sqlite3.c:135147:16: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   db->mDbFlags &= ~DBFLAG_Vacuum;
                ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VtabCreateModule’:
sqlite-snapshot-201909031623/sqlite3.c:135307:51: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pMod = (Module *)sqlite3Malloc(sizeof(Module) + nName + 1);
                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:135313:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(zCopy, zName, nName+1);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:135313:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:135313:26: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(zCopy, zName, nName+1);
                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘addModuleArgument’:
sqlite-snapshot-201909031623/sqlite3.c:135608:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   sqlite3_int64 nBytes = sizeof(char *)*(2+pTable->nModuleArg);
                                        ^
sqlite-snapshot-201909031623/sqlite3.c:135608:26: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
   sqlite3_int64 nBytes = sizeof(char *)*(2+pTable->nModuleArg);
                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:135614:59: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   azModuleArg = sqlite3DbRealloc(db, pTable->azModuleArg, nBytes);
                                                           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VtabBeginParse’:
sqlite-snapshot-201909031623/sqlite3.c:135654:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pParse->sNameToken.n = (int)(
                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘addArgumentToVtab’:
sqlite-snapshot-201909031623/sqlite3.c:135681:13: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
     int n = pParse->sArg.n;
             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:135683:74: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     addModuleArgument(pParse, pParse->pNewTable, sqlite3DbStrNDup(db, z, n));
                                                                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VtabFinishParse’:
sqlite-snapshot-201909031623/sqlite3.c:135715:68: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       pParse->sNameToken.n = (int)(pEnd->z - pParse->sNameToken.z) + pEnd->n;
                                                                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VtabArgExtend’:
sqlite-snapshot-201909031623/sqlite3.c:135792:15: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pArg->n = (int)(&p->z[p->n] - pArg->z);
               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘vtabCallConstructor’:
sqlite-snapshot-201909031623/sqlite3.c:135869:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(pVTable->pVtab, 0, sizeof(pVTable->pVtab[0]));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:135869:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘growVTrans’:
sqlite-snapshot-201909031623/sqlite3.c:135973:49: warning: conversion to ‘long long unsigned int’ from ‘long long int’ may change the sign of the result [-Wsign-conversion]
     sqlite3_int64 nBytes = sizeof(sqlite3_vtab*)*
                                                 ^
sqlite-snapshot-201909031623/sqlite3.c:135973:28: warning: conversion to ‘sqlite3_int64 {aka long long int}’ from ‘long long unsigned int’ may change the sign of the result [-Wsign-conversion]
     sqlite3_int64 nBytes = sizeof(sqlite3_vtab*)*
                            ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:135975:57: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
     aVTrans = sqlite3DbRealloc(db, (void *)db->aVTrans, nBytes);
                                                         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:135979:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&aVTrans[db->nVTrans], 0, sizeof(sqlite3_vtab *)*ARRAY_INCR);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:135979:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:135979:60: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(&aVTrans[db->nVTrans], 0, sizeof(sqlite3_vtab *)*ARRAY_INCR);
                                                            ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_declare_vtab’:
sqlite-snapshot-201909031623/sqlite3.c:136067:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sParse, 0, sizeof(sParse));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:136067:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VtabOverloadFunction’:
sqlite-snapshot-201909031623/sqlite3.c:136400:30: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                              + sqlite3Strlen30(pDef->zName) + 1);
                              ^
sqlite-snapshot-201909031623/sqlite3.c:136406:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy((char*)&pNew[1], pDef->zName, sqlite3Strlen30(pDef->zName)+1);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:136406:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:136406:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memcpy((char*)&pNew[1], pDef->zName, sqlite3Strlen30(pDef->zName)+1);
                                        ^~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3VtabMakeWritable’:
sqlite-snapshot-201909031623/sqlite3.c:136428:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   n = (pToplevel->nVtabLock+1)*sizeof(pToplevel->apVtabLock[0]);
                               ^
sqlite-snapshot-201909031623/sqlite3.c:136428:7: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   n = (pToplevel->nVtabLock+1)*sizeof(pToplevel->apVtabLock[0]);
       ^
sqlite-snapshot-201909031623/sqlite3.c:136429:57: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   apVtabLock = sqlite3_realloc64(pToplevel->apVtabLock, n);
                                                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘codeEqualityTerm’:
sqlite-snapshot-201909031623/sqlite3.c:137709:66: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         aiMap = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*nEq);
                                                                  ^
sqlite-snapshot-201909031623/sqlite3.c:137735:62: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                               sizeof(pLevel->u.in.aInLoop[0])*pLevel->u.in.nIn);
                                                              ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘codeAllEqualityTerms’:
sqlite-snapshot-201909031623/sqlite3.c:137877:27: warning: incompatible implicit declaration of built-in function ‘strlen’
   assert( zAff==0 || (int)strlen(zAff)>=nEq );
                           ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:137877:27: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘codeDeferredSeek’:
sqlite-snapshot-201909031623/sqlite3.c:138211:64: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     int *ai = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*(pTab->nCol+1));
                                                                ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereIndexExprTransNode’:
sqlite-snapshot-201909031623/sqlite3.c:138281:22: warning: conversion to ‘ynVar {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     pExpr->iColumn = pX->iIdxCol;
                      ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereIndexExprTrans’:
sqlite-snapshot-201909031623/sqlite3.c:138306:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&w, 0, sizeof(w));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:138306:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WhereCodeOneLoopStart’:
sqlite-snapshot-201909031623/sqlite3.c:138745:30: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pLevel->iLikeRepCntr |= bRev ^ (pIdx->aSortOrder[nEq]==SQLITE_SO_DESC);
                              ^~
sqlite-snapshot-201909031623/sqlite3.c:138785:16: warning: conversion to ‘u8 {aka unsigned char}’ from ‘u16 {aka short unsigned int}’ may alter its value [-Wconversion]
       SWAP(u8, nBtm, nTop);
                ^
sqlite-snapshot-201909031623/sqlite3.c:13892:32: note: in definition of macro ‘SWAP’
 #define SWAP(TYPE,A,B) {TYPE t=A; A=B; B=t;}
                                ^
sqlite-snapshot-201909031623/sqlite3.c:139113:55: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                             sizeof(*pOrTab)+ nNotReady*sizeof(pOrTab->a[0]));
                                                       ^
sqlite-snapshot-201909031623/sqlite3.c:18792:59: note: in definition of macro ‘sqlite3StackAllocRaw’
 # define sqlite3StackAllocRaw(D,N)   sqlite3DbMallocRaw(D,N)
                                                           ^
sqlite-snapshot-201909031623/sqlite3.c:139116:22: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       pOrTab->nSrc = pOrTab->nAlloc;
                      ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:139117:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(pOrTab->a, pTabItem, sizeof(*pTabItem));
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:139117:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:17742:32: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
 #define WHERE_OR_SUBCLAUSE     0x0020 /* Processing a sub-WHERE as part of
                                ^
sqlite-snapshot-201909031623/sqlite3.c:139193:19: note: in expansion of macro ‘WHERE_OR_SUBCLAUSE’
     wctrlFlags =  WHERE_OR_SUBCLAUSE | (pWInfo->wctrlFlags & WHERE_SEEK_TABLE);
                   ^~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereClauseInsert’:
sqlite-snapshot-201909031623/sqlite3.c:139563:56: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pWC->a = sqlite3DbMallocRawNN(db, sizeof(pWC->a[0])*pWC->nSlot*2 );
                                                        ^
sqlite-snapshot-201909031623/sqlite3.c:139571:5: warning: incompatible implicit declaration of built-in function ‘memcpy’
     memcpy(pWC->a, pOld, sizeof(pWC->a[0])*pWC->nTerm);
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:139571:5: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:139571:43: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(pWC->a, pOld, sizeof(pWC->a[0])*pWC->nTerm);
                                           ^
sqlite-snapshot-201909031623/sqlite3.c:139575:49: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pWC->nSlot = sqlite3DbMallocSize(db, pWC->a)/sizeof(pWC->a[0]);
                                                 ^
sqlite-snapshot-201909031623/sqlite3.c:139575:18: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
     pWC->nSlot = sqlite3DbMallocSize(db, pWC->a)/sizeof(pWC->a[0]);
                  ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:139579:38: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pTerm->truthProb = sqlite3LogEst(p->iTable) - 270;
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:139579:24: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     pTerm->truthProb = sqlite3LogEst(p->iTable) - 270;
                        ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:139587:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&pTerm->eOperator, 0,
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:139587:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprCommute’:
sqlite-snapshot-201909031623/sqlite3.c:139632:28: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
       pExpr->pRight->flags &= ~EP_Collate;
                            ^~
sqlite-snapshot-201909031623/sqlite3.c:139649:17: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pExpr->op = ((pExpr->op-TK_GT)^2)+TK_GT;
                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘isAuxiliaryVtabOperator’:
sqlite-snapshot-201909031623/sqlite3.c:139930:20: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
           *peOp2 = i;
                    ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereCombineDisjuncts’:
sqlite-snapshot-201909031623/sqlite3.c:140047:14: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pNew->op = op;
              ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprAnalyzeOrTerm’:
sqlite-snapshot-201909031623/sqlite3.c:140168:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pOrWc->aStatic, 0, sizeof(pOrWc->aStatic));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:140168:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:140295:29: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         pOrTerm->wtFlags &= ~TERM_OR_OK;
                             ^
sqlite-snapshot-201909031623/sqlite3.c:140334:31: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
           pOrTerm->wtFlags &= ~TERM_OR_OK;
                               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprAnalyze’:
sqlite-snapshot-201909031623/sqlite3.c:140654:25: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pNew->eOperator = (operatorMask(pDup->op) + eExtraOp) & opMask;
                         ^
sqlite-snapshot-201909031623/sqlite3.c:18725:29: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
 # define sqlite3Toupper(x)  ((x)&~(sqlite3CtypeMap[(unsigned char)(x)]&0x20))
                             ^
sqlite-snapshot-201909031623/sqlite3.c:140745:30: note: in expansion of macro ‘sqlite3Toupper’
         pStr1->u.zToken[i] = sqlite3Toupper(c);
                              ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:18731:30: warning: conversion to ‘char’ from ‘unsigned char’ may change the sign of the result [-Wsign-conversion]
 # define sqlite3Tolower(x)   (sqlite3UpperToLower[(unsigned char)(x)])
                              ^
sqlite-snapshot-201909031623/sqlite3.c:140746:30: note: in expansion of macro ‘sqlite3Tolower’
         pStr2->u.zToken[i] = sqlite3Tolower(c);
                              ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:140764:13: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       *pC = c + 1;
             ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WhereTabFuncArgs’:
sqlite-snapshot-201909031623/sqlite3.c:141108:24: warning: conversion to ‘ynVar {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     pColRef->iColumn = k++;
                        ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WhereOkOnePass’:
sqlite-snapshot-201909031623/sqlite3.c:141257:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(aiCur, pWInfo->aiCurOnePass, sizeof(int)*2);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:141257:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereOrMove’:
sqlite-snapshot-201909031623/sqlite3.c:141273:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pDest->a, pSrc->a, pDest->n*sizeof(pDest->a[0]));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:141273:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereScanInit’:
sqlite-snapshot-201909031623/sqlite3.c:141497:24: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   pScan->aiColumn[0] = iColumn;
                        ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘estLog’:
sqlite-snapshot-201909031623/sqlite3.c:141674:36: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘LogEst {aka short int}’ may change the sign of the result [-Wsign-conversion]
   return N<=10 ? 0 : sqlite3LogEst(N) - 33;
                                    ^
sqlite-snapshot-201909031623/sqlite3.c:141674:20: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   return N<=10 ? 0 : sqlite3LogEst(N) - 33;
          ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘constructAutomaticIndex’:
sqlite-snapshot-201909031623/sqlite3.c:141881:40: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pLoop->u.btree.nEq = pLoop->nLTerm = nKeyCol;
                                        ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:141905:49: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   pIdx = sqlite3AllocateIndexObject(pParse->db, nKeyCol+1, 0, &zNotUsed);
                                                 ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:141921:29: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         pIdx->aiColumn[n] = pTerm->u.leftColumn;
                             ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:141934:27: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       pIdx->aiColumn[n] = i;
                           ^
sqlite-snapshot-201909031623/sqlite3.c:141941:27: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       pIdx->aiColumn[n] = i;
                           ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘allocateIndexInfo’:
sqlite-snapshot-201909031623/sqlite3.c:142065:67: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                            + (sizeof(*pIdxCons) + sizeof(*pUsage))*nTerm
                                                                   ^
sqlite-snapshot-201909031623/sqlite3.c:142066:50: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                            + sizeof(*pIdxOrderBy)*nOrderBy + sizeof(*pHidden) );
                                                  ^
sqlite-snapshot-201909031623/sqlite3.c:142143:31: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
         if( i<16 ) mNoOmit |= (1 << i);
                               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereRangeAdjust’:
sqlite-snapshot-201909031623/sqlite3.c:142410:15: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       nRet += pTerm->truthProb;
               ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:142412:15: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       nRet -= 20;        assert( 20==sqlite3LogEst(4) );
               ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereRangeScanEst’:
sqlite-snapshot-201909031623/sqlite3.c:142719:35: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   nNew = whereRangeAdjust(pLower, nOut);
                                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c:142729:13: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     nNew -= 20;
             ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereLoopResize’:
sqlite-snapshot-201909031623/sqlite3.c:143005:56: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   paNew = sqlite3DbMallocRawNN(db, sizeof(p->aLTerm[0])*n);
                                                        ^
sqlite-snapshot-201909031623/sqlite3.c:143007:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(paNew, p->aLTerm, sizeof(p->aLTerm[0])*p->nLSlot);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143007:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:143010:15: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   p->nLSlot = n;
               ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereLoopXfer’:
sqlite-snapshot-201909031623/sqlite3.c:143020:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&pTo->u, 0, sizeof(pTo->u));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143020:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:143023:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(pTo, pFrom, WHERE_LOOP_XFER_SZ);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143023:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereLoopAdjustCost’:
sqlite-snapshot-201909031623/sqlite3.c:143132:25: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       pTemplate->nOut = p->nOut - 1;
                         ^
sqlite-snapshot-201909031623/sqlite3.c:143139:25: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       pTemplate->nOut = p->nOut + 1;
                         ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereLoopOutputAdjust’:
sqlite-snapshot-201909031623/sqlite3.c:143408:24: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         pLoop->nOut += pTerm->truthProb;
                        ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:143421:37: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
           if( iReduce<k ) iReduce = k;
                                     ^
sqlite-snapshot-201909031623/sqlite3.c:143426:51: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   if( pLoop->nOut > nRow-iReduce )  pLoop->nOut = nRow - iReduce;
                                                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereLoopAddBtreeIndex’:
sqlite-snapshot-201909031623/sqlite3.c:143569:25: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         opMask, pProbe);
                         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143638:29: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nIn = sqlite3LogEst(pExpr->x.pList->nExpr);
                             ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:143662:23: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         logK = estLog(nIn);
                       ^~~
sqlite-snapshot-201909031623/sqlite3.c:143697:28: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pNew->u.btree.nBtm = whereRangeVectorLen(
                            ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143719:28: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pNew->u.btree.nTop = whereRangeVectorLen(
                            ^~~~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143745:23: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         pNew->nOut += pTerm->truthProb;
                       ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:143746:23: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         pNew->nOut -= nIn;
                       ^~~
sqlite-snapshot-201909031623/sqlite3.c:143776:25: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
           pNew->nOut += (pProbe->aiRowLogEst[nEq] - pProbe->aiRowLogEst[nEq-1]);
                         ^
sqlite-snapshot-201909031623/sqlite3.c:143781:27: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
             pNew->nOut += 10;
                           ^~
sqlite-snapshot-201909031623/sqlite3.c:143792:16: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     rCostIdx = pNew->nOut + 1 + (15*pProbe->szIdxRow)/pSrc->pTab->szTabRow;
                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:143795:49: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       pNew->rRun = sqlite3LogEstAdd(pNew->rRun, pNew->nOut + 16);
                                                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:143800:19: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     pNew->rRun += nInMul + nIn;
                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143801:19: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     pNew->nOut += nInMul + nIn;
                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143814:54: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       whereLoopAddBtreeIndex(pBuilder, pSrc, pProbe, nInMul+nIn);
                                                      ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143853:13: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     nIter = pProbe->aiRowLogEst[saved_nEq] - pProbe->aiRowLogEst[saved_nEq+1];
             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:143854:19: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     pNew->nOut -= nIter;
                   ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:143857:14: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     nIter += 5;
              ^
sqlite-snapshot-201909031623/sqlite3.c:143858:52: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
     whereLoopAddBtreeIndex(pBuilder, pSrc, pProbe, nIter + nInMul);
                                                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereLoopAddBtree’:
sqlite-snapshot-201909031623/sqlite3.c:144008:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&sPk, 0, sizeof(Index));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:144008:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:144060:24: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         pNew->rSetup = rLogSize + rSize;
                        ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:144062:27: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
           pNew->rSetup += 28;
                           ^~
sqlite-snapshot-201909031623/sqlite3.c:144064:27: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
           pNew->rSetup -= 10;
                           ^~
sqlite-snapshot-201909031623/sqlite3.c:144112:24: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       pNew->iSortIdx = b ? iSortIdx : 0;
                        ^
sqlite-snapshot-201909031623/sqlite3.c:144114:20: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
       pNew->rRun = rSize + 16;
                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:144142:26: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
         pNew->iSortIdx = b ? iSortIdx : 0;
                          ^
sqlite-snapshot-201909031623/sqlite3.c:144147:22: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         pNew->rRun = rSize + 1 + (15*pProbe->szIdxRow)/pTab->szTabRow;
                      ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:144154:28: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
           LogEst nLookup = rSize + 16;  /* Base cost:  N*3 */
                            ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:144166:26: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
               nLookup += pTerm->truthProb;
                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:144169:65: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
               if( pTerm->eOperator & (WO_EQ|WO_IS) ) nLookup -= 19;
                                                                 ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereLoopAddVirtualOne’:
sqlite-snapshot-201909031623/sqlite3.c:144261:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(pUsage, 0, sizeof(pUsage[0])*nConstraint);
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:144261:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:144261:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(pUsage, 0, sizeof(pUsage[0])*nConstraint);
                                      ^
sqlite-snapshot-201909031623/sqlite3.c:144269:23: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘long long int’ may change the sign of the result [-Wsign-conversion]
   pIdxInfo->colUsed = (sqlite3_int64)pSrc->colUsed;
                       ^
sqlite-snapshot-201909031623/sqlite3.c:144315:65: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       if( iTerm<16 && pUsage[i].omit ) pNew->u.vtab.omitMask |= 1<<iTerm;
                                                                 ^
sqlite-snapshot-201909031623/sqlite3.c:144328:28: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pNew->u.vtab.omitMask &= ~mNoOmit;
                            ^
sqlite-snapshot-201909031623/sqlite3.c:144330:18: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   pNew->nLTerm = mxTerm+1;
                  ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:144342:27: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pNew->u.vtab.needFree = pIdxInfo->needToFreeIdxStr;
                           ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:144349:30: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘sqlite3_int64 {aka long long int}’ may change the sign of the result [-Wsign-conversion]
   pNew->nOut = sqlite3LogEst(pIdxInfo->estimatedRows);
                              ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:144356:19: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     pNew->wsFlags &= ~WHERE_ONEROW;
                   ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereLoopAddOr’:
sqlite-snapshot-201909031623/sqlite3.c:144559:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sSum, 0, sizeof(sSum));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:144559:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:144649:22: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         pNew->rRun = sSum.a[i].rRun + 1;
                      ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereLoopAddAll’:
sqlite-snapshot-201909031623/sqlite3.c:144682:18: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
     pNew->iTab = iTab;
                  ^~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘wherePathSatisfiesOrderBy’:
sqlite-snapshot-201909031623/sqlite3.c:144800:14: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
   nOrderBy = pOrderBy->nExpr;
              ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:144971:43: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
             pLoop->u.btree.nDistinctCol = j+1;
                                           ^
sqlite-snapshot-201909031623/sqlite3.c:144984:19: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
             rev = revIdx ^ (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC);
                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145037:33: warning: conversion to ‘i8 {aka signed char}’ from ‘int’ may alter its value [-Wconversion]
       if( (obSat&m)==m ) return i;
                                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereSortingCost’:
sqlite-snapshot-201909031623/sqlite3.c:145112:26: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   rScale = sqlite3LogEst((nOrderBy-nSorted)*100/nOrderBy) - 66;
                          ^
sqlite-snapshot-201909031623/sqlite3.c:145112:12: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   rScale = sqlite3LogEst((nOrderBy-nSorted)*100/nOrderBy) - 66;
            ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145113:15: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   rSortCost = nRow + rScale + 16;
               ^~~~
sqlite-snapshot-201909031623/sqlite3.c:145120:16: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   rSortCost += estLog(nRow);
                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘wherePathSolver’:
sqlite-snapshot-201909031623/sqlite3.c:145180:49: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nSpace = (sizeof(WherePath)+sizeof(WhereLoop*)*nLoop)*mxChoice*2;
                                                 ^
sqlite-snapshot-201909031623/sqlite3.c:145180:56: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nSpace = (sizeof(WherePath)+sizeof(WhereLoop*)*nLoop)*mxChoice*2;
                                                        ^
sqlite-snapshot-201909031623/sqlite3.c:145180:12: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   nSpace = (sizeof(WherePath)+sizeof(WhereLoop*)*nLoop)*mxChoice*2;
            ^
sqlite-snapshot-201909031623/sqlite3.c:145181:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nSpace += sizeof(LogEst) * nOrderBy;
                            ^
sqlite-snapshot-201909031623/sqlite3.c:145181:10: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nSpace += sizeof(LogEst) * nOrderBy;
          ^~
sqlite-snapshot-201909031623/sqlite3.c:145181:13: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
   nSpace += sizeof(LogEst) * nOrderBy;
             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145182:37: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pSpace = sqlite3DbMallocRawNN(db, nSpace);
                                     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145186:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(aFrom, 0, sizeof(aFrom[0]));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145186:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:145199:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(aSortCost, 0, sizeof(LogEst) * nOrderBy);
                                         ^
sqlite-snapshot-201909031623/sqlite3.c:13883:19: warning: conversion to ‘LogEst {aka short int}’ from ‘u32 {aka unsigned int}’ may alter its value [-Wconversion]
 # define MIN(A,B) ((A)<(B)?(A):(B))
                   ^
sqlite-snapshot-201909031623/sqlite3.c:145209:19: note: in expansion of macro ‘MIN’
   aFrom[0].nRow = MIN(pParse->nQueryLoop, 48);  assert( 48==sqlite3LogEst(28) );
                   ^~~
sqlite-snapshot-201909031623/sqlite3.c:145219:26: warning: conversion to ‘i8 {aka signed char}’ from ‘int’ may alter its value [-Wconversion]
     aFrom[0].isOrdered = nLoop>0 ? -1 : nOrderBy;
                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:145249:53: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         rUnsorted = sqlite3LogEstAdd(pWLoop->rSetup,pWLoop->rRun + pFrom->nRow);
                                                     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145251:16: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         nOut = pFrom->nRow + pWLoop->nOut;
                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:145256:24: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
                        iLoop, pWLoop, &revMask);
                        ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:145270:19: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
           rCost = sqlite3LogEstAdd(rUnsorted, aSortCost[isOrdered]) + 5;
                   ^~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145278:24: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
           rUnsorted -= 2;  /* TUNING:  Slight bias in favor of no-sort plans */
                        ^
sqlite-snapshot-201909031623/sqlite3.c:145387:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(pTo->aLoop, pFrom->aLoop, sizeof(WhereLoop*)*iLoop);
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145387:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:145387:60: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memcpy(pTo->aLoop, pFrom->aLoop, sizeof(WhereLoop*)*iLoop);
                                                            ^
sqlite-snapshot-201909031623/sqlite3.c:145455:36: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
                  WHERE_DISTINCTBY, nLoop-1, pFrom->aLoop[nLoop-1], &notUsed);
                                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:145478:44: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
                       WHERE_ORDERBY_LIMIT, nLoop-1, pFrom->aLoop[nLoop-1], &m);
                                            ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:145494:21: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
           pFrom, 0, nLoop-1, pFrom->aLoop[nLoop-1], &revMask
                     ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘whereShortCut’:
sqlite-snapshot-201909031623/sqlite3.c:145565:55: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pTerm = sqlite3WhereFindTerm(pWC, iCur, j, 0, opMask, pIdx);
                                                       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145575:23: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pLoop->nLTerm = j;
                       ^
sqlite-snapshot-201909031623/sqlite3.c:145576:28: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
       pLoop->u.btree.nEq = j;
                            ^
sqlite-snapshot-201909031623/sqlite3.c:145590:46: warning: conversion to ‘i8 {aka signed char}’ from ‘int’ may alter its value [-Wconversion]
     if( pWInfo->pOrderBy ) pWInfo->nOBSat =  pWInfo->pOrderBy->nExpr;
                                              ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprIsDeterministic’:
sqlite-snapshot-201909031623/sqlite3.c:145620:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&w, 0, sizeof(w));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145620:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WhereBegin’:
sqlite-snapshot-201909031623/sqlite3.c:145751:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sWLB, 0, sizeof(sWLB));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145751:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:145761:19: warning: conversion to ‘u16 {aka short unsigned int}’ from ‘int’ may alter its value [-Wconversion]
     wctrlFlags &= ~WHERE_WANT_DISTINCT;
                   ^
sqlite-snapshot-201909031623/sqlite3.c:145787:53: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   nByteWInfo = ROUND8(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));
                                                     ^
sqlite-snapshot-201909031623/sqlite3.c:14091:26: note: in definition of macro ‘ROUND8’
 #define ROUND8(x)     (((x)+7)&~7)
                          ^
sqlite-snapshot-201909031623/sqlite3.c:14091:31: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ROUND8(x)     (((x)+7)&~7)
                               ^
sqlite-snapshot-201909031623/sqlite3.c:145787:16: note: in expansion of macro ‘ROUND8’
   nByteWInfo = ROUND8(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));
                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:14091:23: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
 #define ROUND8(x)     (((x)+7)&~7)
                       ^
sqlite-snapshot-201909031623/sqlite3.c:145787:16: note: in expansion of macro ‘ROUND8’
   nByteWInfo = ROUND8(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));
                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145788:48: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pWInfo = sqlite3DbMallocRawNN(db, nByteWInfo + sizeof(WhereLoop));
                                                ^
sqlite-snapshot-201909031623/sqlite3.c:145800:20: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pWInfo->nLevel = nTabList;
                    ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145803:20: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
   pWInfo->iLimit = iAuxArg;
                    ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145804:29: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
   pWInfo->savedNQueryLoop = pParse->nQueryLoop;
                             ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145807:54: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   memset(&pWInfo->a[0], 0, sizeof(WhereLoop)+nTabList*sizeof(WhereLevel));
                                                      ^
sqlite-snapshot-201909031623/sqlite3.c:145829:37: warning: conversion to ‘i8 {aka signed char}’ from ‘int’ may alter its value [-Wconversion]
     if( pOrderBy ) pWInfo->nOBSat = pOrderBy->nExpr;
                                     ^~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:145945:32: warning: conversion to ‘LogEst {aka short int}’ from ‘int’ may alter its value [-Wconversion]
        wherePathSolver(pWInfo, pWInfo->nRowOut+1);
                                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:146052:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         int nByte = (pWInfo->nLevel-1-i) * sizeof(WhereLevel);
                                          ^
sqlite-snapshot-201909031623/sqlite3.c:146052:21: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
         int nByte = (pWInfo->nLevel-1-i) * sizeof(WhereLevel);
                     ^
sqlite-snapshot-201909031623/sqlite3.c:146053:9: warning: incompatible implicit declaration of built-in function ‘memmove’
         memmove(&pWInfo->a[i], &pWInfo->a[i+1], nByte);
         ^~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:146053:9: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
sqlite-snapshot-201909031623/sqlite3.c:146053:49: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memmove(&pWInfo->a[i], &pWInfo->a[i+1], nByte);
                                                 ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:146060:30: warning: conversion to ‘u32 {aka unsigned int}’ from ‘LogEst {aka short int}’ may change the sign of the result [-Wsign-conversion]
   pWInfo->pParse->nQueryLoop += pWInfo->nRowOut;
                              ^~
sqlite-snapshot-201909031623/sqlite3.c:146083:19: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     int wsFlags = pWInfo->a[0].pWLoop->wsFlags;
                   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:146096:40: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         pWInfo->a[0].pWLoop->wsFlags = (wsFlags & ~WHERE_IDX_ONLY);
                                        ^
sqlite-snapshot-201909031623/sqlite3.c:146232:15: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
     wsFlags = pLevel->pWLoop->wsFlags;
               ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:146258:26: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pParse->nQueryLoop = pWInfo->savedNQueryLoop;
                          ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WhereEnd’:
sqlite-snapshot-201909031623/sqlite3.c:146385:16: warning: conversion to ‘int’ from ‘u32 {aka unsigned int}’ may change the sign of the result [-Wsign-conversion]
       int ws = pLoop->wsFlags;
                ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:146499:42: warning: conversion to ‘i16 {aka short int}’ from ‘int’ may alter its value [-Wconversion]
           x = sqlite3ColumnOfIndex(pIdx, x);
                                          ^
sqlite-snapshot-201909031623/sqlite3.c:146524:24: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   pParse->nQueryLoop = pWInfo->savedNQueryLoop;
                        ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘ntileValueFunc’:
sqlite-snapshot-201909031623/sqlite3.c:146987:17: warning: conversion to ‘int’ from ‘i64 {aka long long int}’ may alter its value [-Wconversion]
     int nSize = (p->nTotal / p->nParam);
                 ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WindowUpdate’:
sqlite-snapshot-201909031623/sqlite3.c:147245:28: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
           pWin->eFrmType = aUp[i].eFrmType;
                            ^~~
sqlite-snapshot-201909031623/sqlite3.c:147246:26: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
           pWin->eStart = aUp[i].eStart;
                          ^~~
sqlite-snapshot-201909031623/sqlite3.c:147247:24: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
           pWin->eEnd = aUp[i].eEnd;
                        ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘selectWindowRewriteExprCb’:
sqlite-snapshot-201909031623/sqlite3.c:17566:44: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
 #define ExprClearProperty(E,P)   (E)->flags&=~(P)
                                            ^
sqlite-snapshot-201909031623/sqlite3.c:147326:9: note: in expansion of macro ‘ExprClearProperty’
         ExprClearProperty(pExpr, EP_Static);
         ^~~~~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c:147327:9: warning: incompatible implicit declaration of built-in function ‘memset’
         memset(pExpr, 0, sizeof(Expr));
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:147327:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c:147330:26: warning: conversion to ‘ynVar {aka short int}’ from ‘int’ may alter its value [-Wconversion]
         pExpr->iColumn = p->pSub->nExpr-1;
                          ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘selectWindowRewriteEList’:
sqlite-snapshot-201909031623/sqlite3.c:147383:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&sWalker, 0, sizeof(Walker));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:147383:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘exprListAppendList’:
sqlite-snapshot-201909031623/sqlite3.c:147418:21: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);
                     ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WindowRewrite’:
sqlite-snapshot-201909031623/sqlite3.c:147460:17: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     p->selFlags &= ~SF_Aggregate;
                 ^~
sqlite-snapshot-201909031623/sqlite3.c:147534:9: warning: incompatible implicit declaration of built-in function ‘memcpy’
         memcpy(pTab, pTab2, sizeof(Table));
         ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:147534:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WindowAlloc’:
sqlite-snapshot-201909031623/sqlite3.c:147661:20: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pWin->eFrmType = eType;
                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:147662:18: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pWin->eStart = eStart;
                  ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:147663:16: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pWin->eEnd = eEnd;
                ^~~~
sqlite-snapshot-201909031623/sqlite3.c:147668:26: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   pWin->bImplicitFrame = bImplicitFrame;
                          ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3WindowCodeStep’:
sqlite-snapshot-201909031623/sqlite3.c:149156:3: warning: incompatible implicit declaration of built-in function ‘memset’
   memset(&s, 0, sizeof(WindowCodeArg));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:149156:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘tokenExpr’:
sqlite-snapshot-201909031623/sqlite3.c:149576:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(p->u.zToken, t.z, t.n);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:149576:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c: In function ‘yy_shift’:
sqlite-snapshot-201909031623/sqlite3.c:149738:30: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
 #define YY_MIN_REDUCE        1174
                              ^
sqlite-snapshot-201909031623/sqlite3.c:151848:19: note: in expansion of macro ‘YY_MIN_REDUCE’
     yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
                   ^~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘yy_reduce’:
sqlite-snapshot-201909031623/sqlite3.c:152781:68: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   sqlite3EndTable(pParse,&yymsp[-2].minor.yy0,&yymsp[-1].minor.yy0,yymsp[0].minor.yy32,0);
                                                                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:152810:27: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   yymsp[-3].minor.yy0.n = (int)(&yymsp[0].minor.yy0.z[yymsp[0].minor.yy0.n] - yymsp[-3].minor.yy0.z);
                           ^
sqlite-snapshot-201909031623/sqlite3.c:152815:27: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   yymsp[-5].minor.yy0.n = (int)(&yymsp[0].minor.yy0.z[yymsp[0].minor.yy0.n] - yymsp[-5].minor.yy0.z);
                           ^
sqlite-snapshot-201909031623/sqlite3.c:152819:44: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 {yymsp[-1].minor.yy0.n=yymsp[0].minor.yy0.n+(int)(yymsp[0].minor.yy0.z-yymsp[-1].minor.yy0.z);}
                                            ^
sqlite-snapshot-201909031623/sqlite3.c:153038:39: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     if( ALWAYS(pLhs) ) pLhs->selFlags &= ~SF_MultiValue;
                                       ^~
sqlite-snapshot-201909031623/sqlite3.c:153039:20: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     pRhs->selFlags &= ~SF_MultiValue;
                    ^~
sqlite-snapshot-201909031623/sqlite3.c:153056:180: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   yymsp[-8].minor.yy25 = sqlite3SelectNew(pParse,yymsp[-6].minor.yy138,yymsp[-5].minor.yy609,yymsp[-4].minor.yy46,yymsp[-3].minor.yy138,yymsp[-2].minor.yy46,yymsp[-1].minor.yy138,yymsp[-7].minor.yy32,yymsp[0].minor.yy46);
                                                                                                                                                                                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:153061:180: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   yymsp[-9].minor.yy25 = sqlite3SelectNew(pParse,yymsp[-7].minor.yy138,yymsp[-6].minor.yy609,yymsp[-5].minor.yy46,yymsp[-4].minor.yy138,yymsp[-3].minor.yy46,yymsp[-1].minor.yy138,yymsp[-8].minor.yy32,yymsp[0].minor.yy46);
                                                                                                                                                                                    ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:153078:39: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   if( ALWAYS(pLeft) ) pLeft->selFlags &= ~SF_MultiValue;
                                       ^~
sqlite-snapshot-201909031623/sqlite3.c:153515:14: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
   int bNot = yymsp[-1].minor.yy0.n & 0x80000000;
              ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:153527:14: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
   int bNot = yymsp[-3].minor.yy0.n & 0x80000000;
              ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:153729:63: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   all.n = (int)(yymsp[0].minor.yy0.z - yymsp[-3].minor.yy0.z) + yymsp[0].minor.yy0.n;
                                                               ^
sqlite-snapshot-201909031623/sqlite3.c:153799:121: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
 {yylhsminor.yy527 = sqlite3TriggerUpdateStep(pParse, &yymsp[-5].minor.yy0, yymsp[-2].minor.yy138, yymsp[-1].minor.yy46, yymsp[-6].minor.yy32, yymsp[-7].minor.yy0.z, yymsp[0].minor.yy8);}
                                                                                                                         ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:153804:119: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
    yylhsminor.yy527 = sqlite3TriggerInsertStep(pParse,&yymsp[-4].minor.yy0,yymsp[-3].minor.yy406,yymsp[-2].minor.yy25,yymsp[-6].minor.yy32,yymsp[-1].minor.yy288,yymsp[-7].minor.yy8,yymsp[0].minor.yy8);/*yylhsminor.yy527-overwrites-yymsp[-6].minor.yy32*/
                                                                                                                       ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:153872:77: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   yymsp[-1].minor.yy0.n = (int)(pParse->sLastToken.z-yymsp[-1].minor.yy0.z) + pParse->sLastToken.n;
                                                                             ^
sqlite-snapshot-201909031623/sqlite3.c:154017:26: warning: conversion to ‘u8 {aka unsigned char}’ from ‘short unsigned int’ may alter its value [-Wconversion]
 {yymsp[-1].minor.yy118 = yymsp[-1].major; /*A-overwrites-X*/}
                          ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:154020:25: warning: conversion to ‘u8 {aka unsigned char}’ from ‘short unsigned int’ may alter its value [-Wconversion]
 {yymsp[0].minor.yy118 = yymsp[0].major; /*A-overwrites-X*/}
                         ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3Parser’:
sqlite-snapshot-201909031623/sqlite3.c:154275:35: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       yyact = yy_reduce(yypParser,yyact-YY_MIN_REDUCE,yymajor,
                                   ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3RunParser’:
sqlite-snapshot-201909031623/sqlite3.c:155414:28: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     pParse->sLastToken.n = n;
                            ^
sqlite-snapshot-201909031623/sqlite3.c:155418:61: error: ‘startedWithOom’ undeclared (first use in this function)
     assert( db->mallocFailed==0 || pParse->rc!=SQLITE_OK || startedWithOom );
                                                             ^~~~~~~~~~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_initialize’:
sqlite-snapshot-201909031623/sqlite3.c:156250:5: warning: incompatible implicit declaration of built-in function ‘memset’
     memset(&sqlite3BuiltinFunctions, 0, sizeof(sqlite3BuiltinFunctions));
     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:156250:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
In file included from sqlite-snapshot-201909031623/sqlite3.c:1077:0:
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_config’:
/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h:49:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
 #define va_arg(v,l) __builtin_va_arg(v,l)
                     ^
sqlite-snapshot-201909031623/sqlite3.c:156464:42: note: in expansion of macro ‘va_arg’
       sqlite3GlobalConfig.bSmallMalloc = va_arg(ap, int);
                                          ^~~~~~
/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h:49:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
 #define va_arg(v,l) __builtin_va_arg(v,l)
                     ^
sqlite-snapshot-201909031623/sqlite3.c:156595:38: note: in expansion of macro ‘va_arg’
       sqlite3GlobalConfig.bOpenUri = va_arg(ap, int);
                                      ^~~~~~
/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h:49:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
 #define va_arg(v,l) __builtin_va_arg(v,l)
                     ^
sqlite-snapshot-201909031623/sqlite3.c:156604:37: note: in expansion of macro ‘va_arg’
       sqlite3GlobalConfig.bUseCis = va_arg(ap, int);
                                     ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘setupLookaside’:
sqlite-snapshot-201909031623/sqlite3.c:156725:29: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘long long int’ may change the sign of the result [-Wsign-conversion]
     pStart = sqlite3Malloc( sz*(sqlite3_int64)cnt );  /* IMP: R-61949-35727 */
                             ^~
sqlite-snapshot-201909031623/sqlite3.c:156739:27: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     db->lookaside.nSlot = cnt;
                           ^~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3CreateFunc’:
sqlite-snapshot-201909031623/sqlite3.c:157800:55: warning: conversion to ‘u32 {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
   p->funcFlags = (p->funcFlags & SQLITE_FUNC_ENCMASK) | extraFlags;
                                                       ^
sqlite-snapshot-201909031623/sqlite3.c:157808:13: warning: conversion to ‘i8 {aka signed char}’ from ‘short unsigned int’ may alter its value [-Wconversion]
   p->nArg = (u16)nArg;
             ^
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_trace_v2’:
sqlite-snapshot-201909031623/sqlite3.c:158044:16: warning: conversion to ‘u8 {aka unsigned char}’ from ‘unsigned int’ may alter its value [-Wconversion]
   db->mTrace = mTrace;
                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3ParseUri’:
sqlite-snapshot-201909031623/sqlite3.c:158755:17: warning: conversion to ‘u64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     u64 nByte = nUri+2;           /* Bytes of space to allocate */
                 ^~~~
sqlite-snapshot-201909031623/sqlite3.c:158834:13: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         c = octet;
             ^~~~~
sqlite-snapshot-201909031623/sqlite3.c:158902:24: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           limit = mask & flags;
                        ^
sqlite-snapshot-201909031623/sqlite3.c:158902:19: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
           limit = mask & flags;
                   ^~~~
sqlite-snapshot-201909031623/sqlite3.c:158927:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           flags = (flags & ~mask) | mode;
                          ^
sqlite-snapshot-201909031623/sqlite3.c:158927:35: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
           flags = (flags & ~mask) | mode;
                                   ^
sqlite-snapshot-201909031623/sqlite3.c:158935:30: warning: conversion to ‘sqlite3_uint64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     zFile = sqlite3_malloc64(nUri+2);
                              ^~~~
sqlite-snapshot-201909031623/sqlite3.c:158938:7: warning: incompatible implicit declaration of built-in function ‘memcpy’
       memcpy(zFile, zUri, nUri);
       ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:158938:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:158938:27: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       memcpy(zFile, zUri, nUri);
                           ^~~~
sqlite-snapshot-201909031623/sqlite3.c:158942:11: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     flags &= ~SQLITE_OPEN_URI;
           ^~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘openDatabase’:
sqlite-snapshot-201909031623/sqlite3.c:159032:11: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     flags &= ~SQLITE_OPEN_SHAREDCACHE;
           ^~
sqlite-snapshot-201909031623/sqlite3.c:159046:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
   flags &=  ~( SQLITE_OPEN_DELETEONCLOSE |
         ^~
sqlite-snapshot-201909031623/sqlite3.c:159086:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
   memcpy(db->aLimit, aHardLimit, sizeof(db->aLimit));
   ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:159086:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
sqlite-snapshot-201909031623/sqlite3.c:159216:25: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
                         flags | SQLITE_OPEN_MAIN_DB);
                         ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_extended_result_codes’:
sqlite-snapshot-201909031623/sqlite3.c:159769:17: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
   db->errMask = onoff ? 0xffffffff : 0xff;
                 ^~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_test_control’:
sqlite-snapshot-201909031623/sqlite3.c:159871:33: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
       sqlite3Config.iPrngSeed = x;
                                 ^
sqlite-snapshot-201909031623/sqlite3.c:159946:43: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         if( newVal ) sqlite3PendingByte = newVal;
                                           ^~~~~~
In file included from sqlite-snapshot-201909031623/sqlite3.c:1077:0:
/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h:49:21: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
 #define va_arg(v,l) __builtin_va_arg(v,l)
                     ^
sqlite-snapshot-201909031623/sqlite3.c:160091:48: note: in expansion of macro ‘va_arg’
       sqlite3GlobalConfig.bExtraSchemaChecks = va_arg(ap, int);
                                                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c:160156:22: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
       db->init.iDb = sqlite3FindDbName(db, va_arg(ap,const char*));
                      ^~~~~~~~~~~~~~~~~
In file included from sqlite-snapshot-201909031623/sqlite3.c:1077:0:
/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h:49:21: warning: conversion to ‘unsigned char:1’ from ‘int’ may alter its value [-Wconversion]
 #define va_arg(v,l) __builtin_va_arg(v,l)
                     ^
sqlite-snapshot-201909031623/sqlite3.c:160157:48: note: in expansion of macro ‘va_arg’
       db->init.busy = db->init.imposterTable = va_arg(ap,int);
                                                ^~~~~~
sqlite-snapshot-201909031623/sqlite3.c: In function ‘sqlite3_uri_boolean’:
sqlite-snapshot-201909031623/sqlite3.c:160232:35: warning: conversion to ‘u8 {aka unsigned char}’ from ‘int’ may alter its value [-Wconversion]
   return z ? sqlite3GetBoolean(z, bDflt) : bDflt;
                                   ^~~~~
make: *** [../../Mk/l4.build.mk:62: sqlite-snapshot-201909031623/sqlite3.o] Error 1
